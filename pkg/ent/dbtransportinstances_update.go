/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportinstances"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportrecipients"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
)

// DbTransportInstancesUpdate is the builder for updating DbTransportInstances entities.
type DbTransportInstancesUpdate struct {
	config
	hooks    []Hook
	mutation *DbTransportInstancesMutation
}

// Where appends a list predicates to the DbTransportInstancesUpdate builder.
func (dtiu *DbTransportInstancesUpdate) Where(ps ...predicate.DbTransportInstances) *DbTransportInstancesUpdate {
	dtiu.mutation.Where(ps...)
	return dtiu
}

// SetTenantID sets the "tenant_id" field.
func (dtiu *DbTransportInstancesUpdate) SetTenantID(i int) *DbTransportInstancesUpdate {
	dtiu.mutation.SetTenantID(i)
	return dtiu
}

// SetName sets the "Name" field.
func (dtiu *DbTransportInstancesUpdate) SetName(s string) *DbTransportInstancesUpdate {
	dtiu.mutation.SetName(s)
	return dtiu
}

// SetDescription sets the "Description" field.
func (dtiu *DbTransportInstancesUpdate) SetDescription(s string) *DbTransportInstancesUpdate {
	dtiu.mutation.SetDescription(s)
	return dtiu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dtiu *DbTransportInstancesUpdate) SetNillableDescription(s *string) *DbTransportInstancesUpdate {
	if s != nil {
		dtiu.SetDescription(*s)
	}
	return dtiu
}

// ClearDescription clears the value of the "Description" field.
func (dtiu *DbTransportInstancesUpdate) ClearDescription() *DbTransportInstancesUpdate {
	dtiu.mutation.ClearDescription()
	return dtiu
}

// SetConfig sets the "Config" field.
func (dtiu *DbTransportInstancesUpdate) SetConfig(s string) *DbTransportInstancesUpdate {
	dtiu.mutation.SetConfig(s)
	return dtiu
}

// SetTransportProvider sets the "TransportProvider" field.
func (dtiu *DbTransportInstancesUpdate) SetTransportProvider(s string) *DbTransportInstancesUpdate {
	dtiu.mutation.SetTransportProvider(s)
	return dtiu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dtiu *DbTransportInstancesUpdate) SetTenant(t *Tenant) *DbTransportInstancesUpdate {
	return dtiu.SetTenantID(t.ID)
}

// AddTransportRecipientIDs adds the "TransportRecipients" edge to the DbTransportRecipients entity by IDs.
func (dtiu *DbTransportInstancesUpdate) AddTransportRecipientIDs(ids ...int) *DbTransportInstancesUpdate {
	dtiu.mutation.AddTransportRecipientIDs(ids...)
	return dtiu
}

// AddTransportRecipients adds the "TransportRecipients" edges to the DbTransportRecipients entity.
func (dtiu *DbTransportInstancesUpdate) AddTransportRecipients(d ...*DbTransportRecipients) *DbTransportInstancesUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtiu.AddTransportRecipientIDs(ids...)
}

// Mutation returns the DbTransportInstancesMutation object of the builder.
func (dtiu *DbTransportInstancesUpdate) Mutation() *DbTransportInstancesMutation {
	return dtiu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dtiu *DbTransportInstancesUpdate) ClearTenant() *DbTransportInstancesUpdate {
	dtiu.mutation.ClearTenant()
	return dtiu
}

// ClearTransportRecipients clears all "TransportRecipients" edges to the DbTransportRecipients entity.
func (dtiu *DbTransportInstancesUpdate) ClearTransportRecipients() *DbTransportInstancesUpdate {
	dtiu.mutation.ClearTransportRecipients()
	return dtiu
}

// RemoveTransportRecipientIDs removes the "TransportRecipients" edge to DbTransportRecipients entities by IDs.
func (dtiu *DbTransportInstancesUpdate) RemoveTransportRecipientIDs(ids ...int) *DbTransportInstancesUpdate {
	dtiu.mutation.RemoveTransportRecipientIDs(ids...)
	return dtiu
}

// RemoveTransportRecipients removes "TransportRecipients" edges to DbTransportRecipients entities.
func (dtiu *DbTransportInstancesUpdate) RemoveTransportRecipients(d ...*DbTransportRecipients) *DbTransportInstancesUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtiu.RemoveTransportRecipientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtiu *DbTransportInstancesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dtiu.hooks) == 0 {
		if err = dtiu.check(); err != nil {
			return 0, err
		}
		affected, err = dtiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbTransportInstancesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtiu.check(); err != nil {
				return 0, err
			}
			dtiu.mutation = mutation
			affected, err = dtiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dtiu.hooks) - 1; i >= 0; i-- {
			if dtiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtiu *DbTransportInstancesUpdate) SaveX(ctx context.Context) int {
	affected, err := dtiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtiu *DbTransportInstancesUpdate) Exec(ctx context.Context) error {
	_, err := dtiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtiu *DbTransportInstancesUpdate) ExecX(ctx context.Context) {
	if err := dtiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtiu *DbTransportInstancesUpdate) check() error {
	if v, ok := dtiu.mutation.Name(); ok {
		if err := dbtransportinstances.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbTransportInstances.Name": %w`, err)}
		}
	}
	if v, ok := dtiu.mutation.Config(); ok {
		if err := dbtransportinstances.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "Config", err: fmt.Errorf(`ent: validator failed for field "DbTransportInstances.Config": %w`, err)}
		}
	}
	if v, ok := dtiu.mutation.TransportProvider(); ok {
		if err := dbtransportinstances.TransportProviderValidator(v); err != nil {
			return &ValidationError{Name: "TransportProvider", err: fmt.Errorf(`ent: validator failed for field "DbTransportInstances.TransportProvider": %w`, err)}
		}
	}
	if _, ok := dtiu.mutation.TenantID(); dtiu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbTransportInstances.tenant"`)
	}
	return nil
}

func (dtiu *DbTransportInstancesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbtransportinstances.Table,
			Columns: dbtransportinstances.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbtransportinstances.FieldID,
			},
		},
	}
	if ps := dtiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldName,
		})
	}
	if value, ok := dtiu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldDescription,
		})
	}
	if dtiu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbtransportinstances.FieldDescription,
		})
	}
	if value, ok := dtiu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldConfig,
		})
	}
	if value, ok := dtiu.mutation.TransportProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldTransportProvider,
		})
	}
	if dtiu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportinstances.TenantTable,
			Columns: []string{dbtransportinstances.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportinstances.TenantTable,
			Columns: []string{dbtransportinstances.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtiu.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiu.mutation.RemovedTransportRecipientsIDs(); len(nodes) > 0 && !dtiu.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiu.mutation.TransportRecipientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbtransportinstances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DbTransportInstancesUpdateOne is the builder for updating a single DbTransportInstances entity.
type DbTransportInstancesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbTransportInstancesMutation
}

// SetTenantID sets the "tenant_id" field.
func (dtiuo *DbTransportInstancesUpdateOne) SetTenantID(i int) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.SetTenantID(i)
	return dtiuo
}

// SetName sets the "Name" field.
func (dtiuo *DbTransportInstancesUpdateOne) SetName(s string) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.SetName(s)
	return dtiuo
}

// SetDescription sets the "Description" field.
func (dtiuo *DbTransportInstancesUpdateOne) SetDescription(s string) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.SetDescription(s)
	return dtiuo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dtiuo *DbTransportInstancesUpdateOne) SetNillableDescription(s *string) *DbTransportInstancesUpdateOne {
	if s != nil {
		dtiuo.SetDescription(*s)
	}
	return dtiuo
}

// ClearDescription clears the value of the "Description" field.
func (dtiuo *DbTransportInstancesUpdateOne) ClearDescription() *DbTransportInstancesUpdateOne {
	dtiuo.mutation.ClearDescription()
	return dtiuo
}

// SetConfig sets the "Config" field.
func (dtiuo *DbTransportInstancesUpdateOne) SetConfig(s string) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.SetConfig(s)
	return dtiuo
}

// SetTransportProvider sets the "TransportProvider" field.
func (dtiuo *DbTransportInstancesUpdateOne) SetTransportProvider(s string) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.SetTransportProvider(s)
	return dtiuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dtiuo *DbTransportInstancesUpdateOne) SetTenant(t *Tenant) *DbTransportInstancesUpdateOne {
	return dtiuo.SetTenantID(t.ID)
}

// AddTransportRecipientIDs adds the "TransportRecipients" edge to the DbTransportRecipients entity by IDs.
func (dtiuo *DbTransportInstancesUpdateOne) AddTransportRecipientIDs(ids ...int) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.AddTransportRecipientIDs(ids...)
	return dtiuo
}

// AddTransportRecipients adds the "TransportRecipients" edges to the DbTransportRecipients entity.
func (dtiuo *DbTransportInstancesUpdateOne) AddTransportRecipients(d ...*DbTransportRecipients) *DbTransportInstancesUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtiuo.AddTransportRecipientIDs(ids...)
}

// Mutation returns the DbTransportInstancesMutation object of the builder.
func (dtiuo *DbTransportInstancesUpdateOne) Mutation() *DbTransportInstancesMutation {
	return dtiuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dtiuo *DbTransportInstancesUpdateOne) ClearTenant() *DbTransportInstancesUpdateOne {
	dtiuo.mutation.ClearTenant()
	return dtiuo
}

// ClearTransportRecipients clears all "TransportRecipients" edges to the DbTransportRecipients entity.
func (dtiuo *DbTransportInstancesUpdateOne) ClearTransportRecipients() *DbTransportInstancesUpdateOne {
	dtiuo.mutation.ClearTransportRecipients()
	return dtiuo
}

// RemoveTransportRecipientIDs removes the "TransportRecipients" edge to DbTransportRecipients entities by IDs.
func (dtiuo *DbTransportInstancesUpdateOne) RemoveTransportRecipientIDs(ids ...int) *DbTransportInstancesUpdateOne {
	dtiuo.mutation.RemoveTransportRecipientIDs(ids...)
	return dtiuo
}

// RemoveTransportRecipients removes "TransportRecipients" edges to DbTransportRecipients entities.
func (dtiuo *DbTransportInstancesUpdateOne) RemoveTransportRecipients(d ...*DbTransportRecipients) *DbTransportInstancesUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtiuo.RemoveTransportRecipientIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtiuo *DbTransportInstancesUpdateOne) Select(field string, fields ...string) *DbTransportInstancesUpdateOne {
	dtiuo.fields = append([]string{field}, fields...)
	return dtiuo
}

// Save executes the query and returns the updated DbTransportInstances entity.
func (dtiuo *DbTransportInstancesUpdateOne) Save(ctx context.Context) (*DbTransportInstances, error) {
	var (
		err  error
		node *DbTransportInstances
	)
	if len(dtiuo.hooks) == 0 {
		if err = dtiuo.check(); err != nil {
			return nil, err
		}
		node, err = dtiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbTransportInstancesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtiuo.check(); err != nil {
				return nil, err
			}
			dtiuo.mutation = mutation
			node, err = dtiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtiuo.hooks) - 1; i >= 0; i-- {
			if dtiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dtiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbTransportInstances)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbTransportInstancesMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtiuo *DbTransportInstancesUpdateOne) SaveX(ctx context.Context) *DbTransportInstances {
	node, err := dtiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtiuo *DbTransportInstancesUpdateOne) Exec(ctx context.Context) error {
	_, err := dtiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtiuo *DbTransportInstancesUpdateOne) ExecX(ctx context.Context) {
	if err := dtiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtiuo *DbTransportInstancesUpdateOne) check() error {
	if v, ok := dtiuo.mutation.Name(); ok {
		if err := dbtransportinstances.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbTransportInstances.Name": %w`, err)}
		}
	}
	if v, ok := dtiuo.mutation.Config(); ok {
		if err := dbtransportinstances.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "Config", err: fmt.Errorf(`ent: validator failed for field "DbTransportInstances.Config": %w`, err)}
		}
	}
	if v, ok := dtiuo.mutation.TransportProvider(); ok {
		if err := dbtransportinstances.TransportProviderValidator(v); err != nil {
			return &ValidationError{Name: "TransportProvider", err: fmt.Errorf(`ent: validator failed for field "DbTransportInstances.TransportProvider": %w`, err)}
		}
	}
	if _, ok := dtiuo.mutation.TenantID(); dtiuo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbTransportInstances.tenant"`)
	}
	return nil
}

func (dtiuo *DbTransportInstancesUpdateOne) sqlSave(ctx context.Context) (_node *DbTransportInstances, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbtransportinstances.Table,
			Columns: dbtransportinstances.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbtransportinstances.FieldID,
			},
		},
	}
	id, ok := dtiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbTransportInstances.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbtransportinstances.FieldID)
		for _, f := range fields {
			if !dbtransportinstances.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbtransportinstances.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldName,
		})
	}
	if value, ok := dtiuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldDescription,
		})
	}
	if dtiuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbtransportinstances.FieldDescription,
		})
	}
	if value, ok := dtiuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldConfig,
		})
	}
	if value, ok := dtiuo.mutation.TransportProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportinstances.FieldTransportProvider,
		})
	}
	if dtiuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportinstances.TenantTable,
			Columns: []string{dbtransportinstances.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportinstances.TenantTable,
			Columns: []string{dbtransportinstances.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtiuo.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiuo.mutation.RemovedTransportRecipientsIDs(); len(nodes) > 0 && !dtiuo.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtiuo.mutation.TransportRecipientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DbTransportInstances{config: dtiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbtransportinstances.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
