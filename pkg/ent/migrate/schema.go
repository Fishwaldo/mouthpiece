/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DbAppsColumns holds the columns for the "db_apps" table.
	DbAppsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"AppEnabled", "AppDisabled"}},
		{Name: "description", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "url", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbAppsTable holds the schema information for the "db_apps" table.
	DbAppsTable = &schema.Table{
		Name:       "db_apps",
		Columns:    DbAppsColumns,
		PrimaryKey: []*schema.Column{DbAppsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_apps_tenants_tenant",
				Columns:    []*schema.Column{DbAppsColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DbFiltersColumns holds the columns for the "db_filters" table.
	DbFiltersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"InvalidFilter", "AppFilter", "UserFilter", "TransportFilter"}},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "filter_impl", Type: field.TypeString},
		{Name: "config", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbFiltersTable holds the schema information for the "db_filters" table.
	DbFiltersTable = &schema.Table{
		Name:       "db_filters",
		Columns:    DbFiltersColumns,
		PrimaryKey: []*schema.Column{DbFiltersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_filters_tenants_tenant",
				Columns:    []*schema.Column{DbFiltersColumns[8]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DbGroupsColumns holds the columns for the "db_groups" table.
	DbGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbGroupsTable holds the schema information for the "db_groups" table.
	DbGroupsTable = &schema.Table{
		Name:       "db_groups",
		Columns:    DbGroupsColumns,
		PrimaryKey: []*schema.Column{DbGroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_groups_tenants_tenant",
				Columns:    []*schema.Column{DbGroupsColumns[4]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DbMessagesColumns holds the columns for the "db_messages" table.
	DbMessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "message", Type: field.TypeString, Size: 2147483647},
		{Name: "short_msg", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "topic", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "severity", Type: field.TypeInt, Nullable: true, Default: 3},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "db_app_messages", Type: field.TypeInt},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbMessagesTable holds the schema information for the "db_messages" table.
	DbMessagesTable = &schema.Table{
		Name:       "db_messages",
		Columns:    DbMessagesColumns,
		PrimaryKey: []*schema.Column{DbMessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_messages_db_apps_messages",
				Columns:    []*schema.Column{DbMessagesColumns[7]},
				RefColumns: []*schema.Column{DbAppsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "db_messages_tenants_tenant",
				Columns:    []*schema.Column{DbMessagesColumns[8]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DbMessageFieldsColumns holds the columns for the "db_message_fields" table.
	DbMessageFieldsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "value", Type: field.TypeString, Size: 2147483647},
		{Name: "db_message_fields", Type: field.TypeUUID},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbMessageFieldsTable holds the schema information for the "db_message_fields" table.
	DbMessageFieldsTable = &schema.Table{
		Name:       "db_message_fields",
		Columns:    DbMessageFieldsColumns,
		PrimaryKey: []*schema.Column{DbMessageFieldsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_message_fields_db_messages_fields",
				Columns:    []*schema.Column{DbMessageFieldsColumns[4]},
				RefColumns: []*schema.Column{DbMessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_message_fields_tenants_tenant",
				Columns:    []*schema.Column{DbMessageFieldsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DbTransportInstancesColumns holds the columns for the "db_transport_instances" table.
	DbTransportInstancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "config", Type: field.TypeString},
		{Name: "transport_provider", Type: field.TypeString},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbTransportInstancesTable holds the schema information for the "db_transport_instances" table.
	DbTransportInstancesTable = &schema.Table{
		Name:       "db_transport_instances",
		Columns:    DbTransportInstancesColumns,
		PrimaryKey: []*schema.Column{DbTransportInstancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_transport_instances_tenants_tenant",
				Columns:    []*schema.Column{DbTransportInstancesColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DbTransportRecipientsColumns holds the columns for the "db_transport_recipients" table.
	DbTransportRecipientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "config", Type: field.TypeString},
		{Name: "db_group_transport_recipients", Type: field.TypeInt, Nullable: true},
		{Name: "db_transport_instances_transport_recipients", Type: field.TypeInt},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "db_user_transport_recipients", Type: field.TypeInt, Nullable: true},
	}
	// DbTransportRecipientsTable holds the schema information for the "db_transport_recipients" table.
	DbTransportRecipientsTable = &schema.Table{
		Name:       "db_transport_recipients",
		Columns:    DbTransportRecipientsColumns,
		PrimaryKey: []*schema.Column{DbTransportRecipientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_transport_recipients_db_groups_TransportRecipients",
				Columns:    []*schema.Column{DbTransportRecipientsColumns[5]},
				RefColumns: []*schema.Column{DbGroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "db_transport_recipients_db_transport_instances_TransportRecipients",
				Columns:    []*schema.Column{DbTransportRecipientsColumns[6]},
				RefColumns: []*schema.Column{DbTransportInstancesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_transport_recipients_tenants_tenant",
				Columns:    []*schema.Column{DbTransportRecipientsColumns[7]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "db_transport_recipients_db_users_TransportRecipients",
				Columns:    []*schema.Column{DbTransportRecipientsColumns[8]},
				RefColumns: []*schema.Column{DbUsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DbUsersColumns holds the columns for the "db_users" table.
	DbUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbUsersTable holds the schema information for the "db_users" table.
	DbUsersTable = &schema.Table{
		Name:       "db_users",
		Columns:    DbUsersColumns,
		PrimaryKey: []*schema.Column{DbUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_users_tenants_tenant",
				Columns:    []*schema.Column{DbUsersColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "dbuser_email_tenant_id",
				Unique:  true,
				Columns: []*schema.Column{DbUsersColumns[2], DbUsersColumns[5]},
			},
		},
	}
	// DbUserMetaDataColumns holds the columns for the "db_user_meta_data" table.
	DbUserMetaDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "app_data", Type: field.TypeJSON, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "value", Type: field.TypeString, Size: 2147483647},
		{Name: "db_user_metadata", Type: field.TypeInt},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// DbUserMetaDataTable holds the schema information for the "db_user_meta_data" table.
	DbUserMetaDataTable = &schema.Table{
		Name:       "db_user_meta_data",
		Columns:    DbUserMetaDataColumns,
		PrimaryKey: []*schema.Column{DbUserMetaDataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_user_meta_data_db_users_metadata",
				Columns:    []*schema.Column{DbUserMetaDataColumns[4]},
				RefColumns: []*schema.Column{DbUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_user_meta_data_tenants_tenant",
				Columns:    []*schema.Column{DbUserMetaDataColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
	}
	// DbAppFiltersColumns holds the columns for the "db_app_filters" table.
	DbAppFiltersColumns = []*schema.Column{
		{Name: "db_app_id", Type: field.TypeInt},
		{Name: "db_filter_id", Type: field.TypeInt},
	}
	// DbAppFiltersTable holds the schema information for the "db_app_filters" table.
	DbAppFiltersTable = &schema.Table{
		Name:       "db_app_filters",
		Columns:    DbAppFiltersColumns,
		PrimaryKey: []*schema.Column{DbAppFiltersColumns[0], DbAppFiltersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_app_filters_db_app_id",
				Columns:    []*schema.Column{DbAppFiltersColumns[0]},
				RefColumns: []*schema.Column{DbAppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_app_filters_db_filter_id",
				Columns:    []*schema.Column{DbAppFiltersColumns[1]},
				RefColumns: []*schema.Column{DbFiltersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DbAppGroupsColumns holds the columns for the "db_app_groups" table.
	DbAppGroupsColumns = []*schema.Column{
		{Name: "db_app_id", Type: field.TypeInt},
		{Name: "db_group_id", Type: field.TypeInt},
	}
	// DbAppGroupsTable holds the schema information for the "db_app_groups" table.
	DbAppGroupsTable = &schema.Table{
		Name:       "db_app_groups",
		Columns:    DbAppGroupsColumns,
		PrimaryKey: []*schema.Column{DbAppGroupsColumns[0], DbAppGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_app_groups_db_app_id",
				Columns:    []*schema.Column{DbAppGroupsColumns[0]},
				RefColumns: []*schema.Column{DbAppsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_app_groups_db_group_id",
				Columns:    []*schema.Column{DbAppGroupsColumns[1]},
				RefColumns: []*schema.Column{DbGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DbFilterGroupsColumns holds the columns for the "db_filter_groups" table.
	DbFilterGroupsColumns = []*schema.Column{
		{Name: "db_filter_id", Type: field.TypeInt},
		{Name: "db_group_id", Type: field.TypeInt},
	}
	// DbFilterGroupsTable holds the schema information for the "db_filter_groups" table.
	DbFilterGroupsTable = &schema.Table{
		Name:       "db_filter_groups",
		Columns:    DbFilterGroupsColumns,
		PrimaryKey: []*schema.Column{DbFilterGroupsColumns[0], DbFilterGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_filter_groups_db_filter_id",
				Columns:    []*schema.Column{DbFilterGroupsColumns[0]},
				RefColumns: []*schema.Column{DbFiltersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_filter_groups_db_group_id",
				Columns:    []*schema.Column{DbFilterGroupsColumns[1]},
				RefColumns: []*schema.Column{DbGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DbUserFiltersColumns holds the columns for the "db_user_filters" table.
	DbUserFiltersColumns = []*schema.Column{
		{Name: "db_user_id", Type: field.TypeInt},
		{Name: "db_filter_id", Type: field.TypeInt},
	}
	// DbUserFiltersTable holds the schema information for the "db_user_filters" table.
	DbUserFiltersTable = &schema.Table{
		Name:       "db_user_filters",
		Columns:    DbUserFiltersColumns,
		PrimaryKey: []*schema.Column{DbUserFiltersColumns[0], DbUserFiltersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_user_filters_db_user_id",
				Columns:    []*schema.Column{DbUserFiltersColumns[0]},
				RefColumns: []*schema.Column{DbUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_user_filters_db_filter_id",
				Columns:    []*schema.Column{DbUserFiltersColumns[1]},
				RefColumns: []*schema.Column{DbFiltersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DbUserGroupsColumns holds the columns for the "db_user_groups" table.
	DbUserGroupsColumns = []*schema.Column{
		{Name: "db_user_id", Type: field.TypeInt},
		{Name: "db_group_id", Type: field.TypeInt},
	}
	// DbUserGroupsTable holds the schema information for the "db_user_groups" table.
	DbUserGroupsTable = &schema.Table{
		Name:       "db_user_groups",
		Columns:    DbUserGroupsColumns,
		PrimaryKey: []*schema.Column{DbUserGroupsColumns[0], DbUserGroupsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "db_user_groups_db_user_id",
				Columns:    []*schema.Column{DbUserGroupsColumns[0]},
				RefColumns: []*schema.Column{DbUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "db_user_groups_db_group_id",
				Columns:    []*schema.Column{DbUserGroupsColumns[1]},
				RefColumns: []*schema.Column{DbGroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DbAppsTable,
		DbFiltersTable,
		DbGroupsTable,
		DbMessagesTable,
		DbMessageFieldsTable,
		DbTransportInstancesTable,
		DbTransportRecipientsTable,
		DbUsersTable,
		DbUserMetaDataTable,
		TenantsTable,
		DbAppFiltersTable,
		DbAppGroupsTable,
		DbFilterGroupsTable,
		DbUserFiltersTable,
		DbUserGroupsTable,
	}
)

func init() {
	DbAppsTable.ForeignKeys[0].RefTable = TenantsTable
	DbFiltersTable.ForeignKeys[0].RefTable = TenantsTable
	DbGroupsTable.ForeignKeys[0].RefTable = TenantsTable
	DbMessagesTable.ForeignKeys[0].RefTable = DbAppsTable
	DbMessagesTable.ForeignKeys[1].RefTable = TenantsTable
	DbMessageFieldsTable.ForeignKeys[0].RefTable = DbMessagesTable
	DbMessageFieldsTable.ForeignKeys[1].RefTable = TenantsTable
	DbTransportInstancesTable.ForeignKeys[0].RefTable = TenantsTable
	DbTransportRecipientsTable.ForeignKeys[0].RefTable = DbGroupsTable
	DbTransportRecipientsTable.ForeignKeys[1].RefTable = DbTransportInstancesTable
	DbTransportRecipientsTable.ForeignKeys[2].RefTable = TenantsTable
	DbTransportRecipientsTable.ForeignKeys[3].RefTable = DbUsersTable
	DbUsersTable.ForeignKeys[0].RefTable = TenantsTable
	DbUserMetaDataTable.ForeignKeys[0].RefTable = DbUsersTable
	DbUserMetaDataTable.ForeignKeys[1].RefTable = TenantsTable
	DbAppFiltersTable.ForeignKeys[0].RefTable = DbAppsTable
	DbAppFiltersTable.ForeignKeys[1].RefTable = DbFiltersTable
	DbAppGroupsTable.ForeignKeys[0].RefTable = DbAppsTable
	DbAppGroupsTable.ForeignKeys[1].RefTable = DbGroupsTable
	DbFilterGroupsTable.ForeignKeys[0].RefTable = DbFiltersTable
	DbFilterGroupsTable.ForeignKeys[1].RefTable = DbGroupsTable
	DbUserFiltersTable.ForeignKeys[0].RefTable = DbUsersTable
	DbUserFiltersTable.ForeignKeys[1].RefTable = DbFiltersTable
	DbUserGroupsTable.ForeignKeys[0].RefTable = DbUsersTable
	DbUserGroupsTable.ForeignKeys[1].RefTable = DbGroupsTable
}
