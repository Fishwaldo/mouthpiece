/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/user"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/usermetadata"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// UserMetaData is the model entity for the UserMetaData schema.
type UserMetaData struct {
	config `doc:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the Field"`
	// Value holds the value of the "Value" field.
	Value string `json:"Value,omitempty" doc:"Value of the Field"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserMetaDataQuery when eager-loading is set.
	Edges         UserMetaDataEdges `json:"edges"`
	user_metadata *int
}

// UserMetaDataEdges holds the relations/edges for other nodes in the graph.
type UserMetaDataEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMetaDataEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserMetaDataEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMetaData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermetadata.FieldID, usermetadata.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case usermetadata.FieldName, usermetadata.FieldValue:
			values[i] = new(sql.NullString)
		case usermetadata.ForeignKeys[0]: // user_metadata
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserMetaData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMetaData fields.
func (umd *UserMetaData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			umd.ID = int(value.Int64)
		case usermetadata.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				umd.TenantID = int(value.Int64)
			}
		case usermetadata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				umd.Name = value.String
			}
		case usermetadata.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Value", values[i])
			} else if value.Valid {
				umd.Value = value.String
			}
		case usermetadata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_metadata", value)
			} else if value.Valid {
				umd.user_metadata = new(int)
				*umd.user_metadata = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the UserMetaData entity.
func (umd *UserMetaData) QueryTenant() *TenantQuery {
	return (&UserMetaDataClient{config: umd.config}).QueryTenant(umd)
}

// QueryUser queries the "user" edge of the UserMetaData entity.
func (umd *UserMetaData) QueryUser() *UserQuery {
	return (&UserMetaDataClient{config: umd.config}).QueryUser(umd)
}

// Update returns a builder for updating this UserMetaData.
// Note that you need to call UserMetaData.Unwrap() before calling this method if this UserMetaData
// was returned from a transaction, and the transaction was committed or rolled back.
func (umd *UserMetaData) Update() *UserMetaDataUpdateOne {
	return (&UserMetaDataClient{config: umd.config}).UpdateOne(umd)
}

// Unwrap unwraps the UserMetaData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (umd *UserMetaData) Unwrap() *UserMetaData {
	_tx, ok := umd.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMetaData is not a transactional entity")
	}
	umd.config.driver = _tx.drv
	return umd
}

// String implements the fmt.Stringer.
func (umd *UserMetaData) String() string {
	var builder strings.Builder
	builder.WriteString("UserMetaData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", umd.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", umd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(umd.Name)
	builder.WriteString(", ")
	builder.WriteString("Value=")
	builder.WriteString(umd.Value)
	builder.WriteByte(')')
	return builder.String()
}

func (umd *UserMetaData) ValidateUserMetaData() error {
	if err := validate.Get().Struct(umd); err != nil {
		return err
	}
	return nil
}

// UserMetaDataSlice is a parsable slice of UserMetaData.
type UserMetaDataSlice []*UserMetaData

func (umd UserMetaDataSlice) config(cfg config) {
	for _i := range umd {
		umd[_i].config = cfg
	}
}
