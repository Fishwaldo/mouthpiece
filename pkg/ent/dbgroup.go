/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// DbGroup is the model entity for the DbGroup schema.
type DbGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// AppData holds the value of the "AppData" field.
	AppData interfaces.AppData `json:"-"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the Group`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty" doc:"Description of the Group`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbGroupQuery when eager-loading is set.
	Edges DbGroupEdges `json:"edges"`
}

// DbGroupEdges holds the relations/edges for other nodes in the graph.
type DbGroupEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// TransportRecipients holds the value of the TransportRecipients edge.
	TransportRecipients []*DbTransportRecipients `json:"TransportRecipients,omitempty"`
	// Users holds the value of the users edge.
	Users []*DbUser `json:"users,omitempty"`
	// Filters holds the value of the filters edge.
	Filters []*DbFilter `json:"filters,omitempty"`
	// Apps holds the value of the apps edge.
	Apps []*DbApp `json:"apps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbGroupEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// TransportRecipientsOrErr returns the TransportRecipients value or an error if the edge
// was not loaded in eager-loading.
func (e DbGroupEdges) TransportRecipientsOrErr() ([]*DbTransportRecipients, error) {
	if e.loadedTypes[1] {
		return e.TransportRecipients, nil
	}
	return nil, &NotLoadedError{edge: "TransportRecipients"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e DbGroupEdges) UsersOrErr() ([]*DbUser, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// FiltersOrErr returns the Filters value or an error if the edge
// was not loaded in eager-loading.
func (e DbGroupEdges) FiltersOrErr() ([]*DbFilter, error) {
	if e.loadedTypes[3] {
		return e.Filters, nil
	}
	return nil, &NotLoadedError{edge: "filters"}
}

// AppsOrErr returns the Apps value or an error if the edge
// was not loaded in eager-loading.
func (e DbGroupEdges) AppsOrErr() ([]*DbApp, error) {
	if e.loadedTypes[4] {
		return e.Apps, nil
	}
	return nil, &NotLoadedError{edge: "apps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbgroup.FieldAppData:
			values[i] = new([]byte)
		case dbgroup.FieldID, dbgroup.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case dbgroup.FieldName, dbgroup.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbGroup fields.
func (dg *DbGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbgroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dg.ID = int(value.Int64)
		case dbgroup.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dg.TenantID = int(value.Int64)
			}
		case dbgroup.FieldAppData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field AppData", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dg.AppData); err != nil {
					return fmt.Errorf("unmarshal field AppData: %w", err)
				}
			}
		case dbgroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				dg.Name = value.String
			}
		case dbgroup.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				dg.Description = value.String
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the DbGroup entity.
func (dg *DbGroup) QueryTenant() *TenantQuery {
	return (&DbGroupClient{config: dg.config}).QueryTenant(dg)
}

// QueryTransportRecipients queries the "TransportRecipients" edge of the DbGroup entity.
func (dg *DbGroup) QueryTransportRecipients() *DbTransportRecipientsQuery {
	return (&DbGroupClient{config: dg.config}).QueryTransportRecipients(dg)
}

// QueryUsers queries the "users" edge of the DbGroup entity.
func (dg *DbGroup) QueryUsers() *DbUserQuery {
	return (&DbGroupClient{config: dg.config}).QueryUsers(dg)
}

// QueryFilters queries the "filters" edge of the DbGroup entity.
func (dg *DbGroup) QueryFilters() *DbFilterQuery {
	return (&DbGroupClient{config: dg.config}).QueryFilters(dg)
}

// QueryApps queries the "apps" edge of the DbGroup entity.
func (dg *DbGroup) QueryApps() *DbAppQuery {
	return (&DbGroupClient{config: dg.config}).QueryApps(dg)
}

// Update returns a builder for updating this DbGroup.
// Note that you need to call DbGroup.Unwrap() before calling this method if this DbGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (dg *DbGroup) Update() *DbGroupUpdateOne {
	return (&DbGroupClient{config: dg.config}).UpdateOne(dg)
}

// Unwrap unwraps the DbGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dg *DbGroup) Unwrap() *DbGroup {
	_tx, ok := dg.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbGroup is not a transactional entity")
	}
	dg.config.driver = _tx.drv
	return dg
}

// String implements the fmt.Stringer.
func (dg *DbGroup) String() string {
	var builder strings.Builder
	builder.WriteString("DbGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dg.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dg.TenantID))
	builder.WriteString(", ")
	builder.WriteString("AppData=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(dg.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(dg.Description)
	builder.WriteByte(')')
	return builder.String()
}

func (dg *DbGroup) ValidateDbGroup() error {
	if err := validate.Get().Struct(dg); err != nil {
		return err
	}
	return nil
}

// DbGroups is a parsable slice of DbGroup.
type DbGroups []*DbGroup

func (dg DbGroups) config(cfg config) {
	for _i := range dg {
		dg[_i].config = cfg
	}
}
