/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/app"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/message"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
	"github.com/google/uuid"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `default:"-" doc:"-" json:"-" maximum:"-" minimum:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Message holds the value of the "Message" field.
	Message string `json:"Message,omitempty" doc:"Message to be Sent"`
	// ShortMsg holds the value of the "ShortMsg" field.
	ShortMsg *string `json:"ShortMsg,omitempty" doc:"Short Message to be Sent" `
	// Topic holds the value of the "Topic" field.
	Topic *string `json:"Topic,omitempty" doc:"Topic of Message"`
	// Severity holds the value of the "Severity" field.
	Severity int `json:"Severity,omitempty" doc:"Severity of Message" minimum:"1" maximum:"5" default:"3" validate:"min=1,max=5"`
	// Timestamp holds the value of the "Timestamp" field.
	Timestamp time.Time `json:"Timestamp,omitempty" doc:"Timestamp of Message"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"edges"`
	app_messages *int
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Vars holds the value of the vars edge.
	Vars []*MsgVar `json:"vars,omitempty"`
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// VarsOrErr returns the Vars value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) VarsOrErr() ([]*MsgVar, error) {
	if e.loadedTypes[1] {
		return e.Vars, nil
	}
	return nil, &NotLoadedError{edge: "vars"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) AppOrErr() (*App, error) {
	if e.loadedTypes[2] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: app.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldTenantID, message.FieldSeverity:
			values[i] = new(sql.NullInt64)
		case message.FieldMessage, message.FieldShortMsg, message.FieldTopic:
			values[i] = new(sql.NullString)
		case message.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case message.FieldID:
			values[i] = new(uuid.UUID)
		case message.ForeignKeys[0]: // app_messages
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				m.TenantID = int(value.Int64)
			}
		case message.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Message", values[i])
			} else if value.Valid {
				m.Message = value.String
			}
		case message.FieldShortMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ShortMsg", values[i])
			} else if value.Valid {
				m.ShortMsg = new(string)
				*m.ShortMsg = value.String
			}
		case message.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Topic", values[i])
			} else if value.Valid {
				m.Topic = new(string)
				*m.Topic = value.String
			}
		case message.FieldSeverity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Severity", values[i])
			} else if value.Valid {
				m.Severity = int(value.Int64)
			}
		case message.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Timestamp", values[i])
			} else if value.Valid {
				m.Timestamp = value.Time
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field app_messages", value)
			} else if value.Valid {
				m.app_messages = new(int)
				*m.app_messages = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Message entity.
func (m *Message) QueryTenant() *TenantQuery {
	return (&MessageClient{config: m.config}).QueryTenant(m)
}

// QueryVars queries the "vars" edge of the Message entity.
func (m *Message) QueryVars() *MsgVarQuery {
	return (&MessageClient{config: m.config}).QueryVars(m)
}

// QueryApp queries the "app" edge of the Message entity.
func (m *Message) QueryApp() *AppQuery {
	return (&MessageClient{config: m.config}).QueryApp(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", m.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Message=")
	builder.WriteString(m.Message)
	builder.WriteString(", ")
	if v := m.ShortMsg; v != nil {
		builder.WriteString("ShortMsg=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Topic; v != nil {
		builder.WriteString("Topic=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("Severity=")
	builder.WriteString(fmt.Sprintf("%v", m.Severity))
	builder.WriteString(", ")
	builder.WriteString("Timestamp=")
	builder.WriteString(m.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

func (m *Message) ValidateMessage() error {
	if err := validate.Get().Struct(m); err != nil {
		return err
	}
	return nil
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
