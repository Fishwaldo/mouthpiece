/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportinstances"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportrecipients"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// DbTransportRecipients is the model entity for the DbTransportRecipients schema.
type DbTransportRecipients struct {
	config `doc:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the Transport Recipient"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty" doc:"Description of the Transport Recipient"`
	// Config holds the value of the "config" field.
	Config string `json:"config,omitempty" doc:"Config of the Transport Recipient"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbTransportRecipientsQuery when eager-loading is set.
	Edges                                       DbTransportRecipientsEdges `json:"edges"`
	db_group_transport_recipients               *int
	db_transport_instances_transport_recipients *int
	db_user_transport_recipients                *int
}

// DbTransportRecipientsEdges holds the relations/edges for other nodes in the graph.
type DbTransportRecipientsEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// TransportInstance holds the value of the TransportInstance edge.
	TransportInstance *DbTransportInstances `json:"TransportInstance,omitempty"`
	// GroupRecipient holds the value of the GroupRecipient edge.
	GroupRecipient *DbGroup `json:"GroupRecipient,omitempty"`
	// UserRecipient holds the value of the UserRecipient edge.
	UserRecipient *DbUser `json:"UserRecipient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbTransportRecipientsEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// TransportInstanceOrErr returns the TransportInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbTransportRecipientsEdges) TransportInstanceOrErr() (*DbTransportInstances, error) {
	if e.loadedTypes[1] {
		if e.TransportInstance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dbtransportinstances.Label}
		}
		return e.TransportInstance, nil
	}
	return nil, &NotLoadedError{edge: "TransportInstance"}
}

// GroupRecipientOrErr returns the GroupRecipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbTransportRecipientsEdges) GroupRecipientOrErr() (*DbGroup, error) {
	if e.loadedTypes[2] {
		if e.GroupRecipient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dbgroup.Label}
		}
		return e.GroupRecipient, nil
	}
	return nil, &NotLoadedError{edge: "GroupRecipient"}
}

// UserRecipientOrErr returns the UserRecipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbTransportRecipientsEdges) UserRecipientOrErr() (*DbUser, error) {
	if e.loadedTypes[3] {
		if e.UserRecipient == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dbuser.Label}
		}
		return e.UserRecipient, nil
	}
	return nil, &NotLoadedError{edge: "UserRecipient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbTransportRecipients) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbtransportrecipients.FieldID, dbtransportrecipients.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case dbtransportrecipients.FieldName, dbtransportrecipients.FieldDescription, dbtransportrecipients.FieldConfig:
			values[i] = new(sql.NullString)
		case dbtransportrecipients.ForeignKeys[0]: // db_group_transport_recipients
			values[i] = new(sql.NullInt64)
		case dbtransportrecipients.ForeignKeys[1]: // db_transport_instances_transport_recipients
			values[i] = new(sql.NullInt64)
		case dbtransportrecipients.ForeignKeys[2]: // db_user_transport_recipients
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbTransportRecipients", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbTransportRecipients fields.
func (dtr *DbTransportRecipients) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbtransportrecipients.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dtr.ID = int(value.Int64)
		case dbtransportrecipients.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dtr.TenantID = int(value.Int64)
			}
		case dbtransportrecipients.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				dtr.Name = value.String
			}
		case dbtransportrecipients.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				dtr.Description = value.String
			}
		case dbtransportrecipients.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				dtr.Config = value.String
			}
		case dbtransportrecipients.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field db_group_transport_recipients", value)
			} else if value.Valid {
				dtr.db_group_transport_recipients = new(int)
				*dtr.db_group_transport_recipients = int(value.Int64)
			}
		case dbtransportrecipients.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field db_transport_instances_transport_recipients", value)
			} else if value.Valid {
				dtr.db_transport_instances_transport_recipients = new(int)
				*dtr.db_transport_instances_transport_recipients = int(value.Int64)
			}
		case dbtransportrecipients.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field db_user_transport_recipients", value)
			} else if value.Valid {
				dtr.db_user_transport_recipients = new(int)
				*dtr.db_user_transport_recipients = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the DbTransportRecipients entity.
func (dtr *DbTransportRecipients) QueryTenant() *TenantQuery {
	return (&DbTransportRecipientsClient{config: dtr.config}).QueryTenant(dtr)
}

// QueryTransportInstance queries the "TransportInstance" edge of the DbTransportRecipients entity.
func (dtr *DbTransportRecipients) QueryTransportInstance() *DbTransportInstancesQuery {
	return (&DbTransportRecipientsClient{config: dtr.config}).QueryTransportInstance(dtr)
}

// QueryGroupRecipient queries the "GroupRecipient" edge of the DbTransportRecipients entity.
func (dtr *DbTransportRecipients) QueryGroupRecipient() *DbGroupQuery {
	return (&DbTransportRecipientsClient{config: dtr.config}).QueryGroupRecipient(dtr)
}

// QueryUserRecipient queries the "UserRecipient" edge of the DbTransportRecipients entity.
func (dtr *DbTransportRecipients) QueryUserRecipient() *DbUserQuery {
	return (&DbTransportRecipientsClient{config: dtr.config}).QueryUserRecipient(dtr)
}

// Update returns a builder for updating this DbTransportRecipients.
// Note that you need to call DbTransportRecipients.Unwrap() before calling this method if this DbTransportRecipients
// was returned from a transaction, and the transaction was committed or rolled back.
func (dtr *DbTransportRecipients) Update() *DbTransportRecipientsUpdateOne {
	return (&DbTransportRecipientsClient{config: dtr.config}).UpdateOne(dtr)
}

// Unwrap unwraps the DbTransportRecipients entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dtr *DbTransportRecipients) Unwrap() *DbTransportRecipients {
	_tx, ok := dtr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbTransportRecipients is not a transactional entity")
	}
	dtr.config.driver = _tx.drv
	return dtr
}

// String implements the fmt.Stringer.
func (dtr *DbTransportRecipients) String() string {
	var builder strings.Builder
	builder.WriteString("DbTransportRecipients(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dtr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dtr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(dtr.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(dtr.Description)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(dtr.Config)
	builder.WriteByte(')')
	return builder.String()
}

func (dtr *DbTransportRecipients) ValidateDbTransportRecipients() error {
	if err := validate.Get().Struct(dtr); err != nil {
		return err
	}
	return nil
}

// DbTransportRecipientsSlice is a parsable slice of DbTransportRecipients.
type DbTransportRecipientsSlice []*DbTransportRecipients

func (dtr DbTransportRecipientsSlice) config(cfg config) {
	for _i := range dtr {
		dtr[_i].config = cfg
	}
}
