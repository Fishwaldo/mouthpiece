/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/Fishwaldo/mouthpiece/pkg/ent/migrate"
	"github.com/google/uuid"

	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbmessage"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbmessagefields"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportinstances"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportrecipients"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbusermetadata"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DbApp is the client for interacting with the DbApp builders.
	DbApp *DbAppClient
	// DbFilter is the client for interacting with the DbFilter builders.
	DbFilter *DbFilterClient
	// DbGroup is the client for interacting with the DbGroup builders.
	DbGroup *DbGroupClient
	// DbMessage is the client for interacting with the DbMessage builders.
	DbMessage *DbMessageClient
	// DbMessageFields is the client for interacting with the DbMessageFields builders.
	DbMessageFields *DbMessageFieldsClient
	// DbTransportInstances is the client for interacting with the DbTransportInstances builders.
	DbTransportInstances *DbTransportInstancesClient
	// DbTransportRecipients is the client for interacting with the DbTransportRecipients builders.
	DbTransportRecipients *DbTransportRecipientsClient
	// DbUser is the client for interacting with the DbUser builders.
	DbUser *DbUserClient
	// DbUserMetaData is the client for interacting with the DbUserMetaData builders.
	DbUserMetaData *DbUserMetaDataClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DbApp = NewDbAppClient(c.config)
	c.DbFilter = NewDbFilterClient(c.config)
	c.DbGroup = NewDbGroupClient(c.config)
	c.DbMessage = NewDbMessageClient(c.config)
	c.DbMessageFields = NewDbMessageFieldsClient(c.config)
	c.DbTransportInstances = NewDbTransportInstancesClient(c.config)
	c.DbTransportRecipients = NewDbTransportRecipientsClient(c.config)
	c.DbUser = NewDbUserClient(c.config)
	c.DbUserMetaData = NewDbUserMetaDataClient(c.config)
	c.Tenant = NewTenantClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		DbApp:                 NewDbAppClient(cfg),
		DbFilter:              NewDbFilterClient(cfg),
		DbGroup:               NewDbGroupClient(cfg),
		DbMessage:             NewDbMessageClient(cfg),
		DbMessageFields:       NewDbMessageFieldsClient(cfg),
		DbTransportInstances:  NewDbTransportInstancesClient(cfg),
		DbTransportRecipients: NewDbTransportRecipientsClient(cfg),
		DbUser:                NewDbUserClient(cfg),
		DbUserMetaData:        NewDbUserMetaDataClient(cfg),
		Tenant:                NewTenantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		DbApp:                 NewDbAppClient(cfg),
		DbFilter:              NewDbFilterClient(cfg),
		DbGroup:               NewDbGroupClient(cfg),
		DbMessage:             NewDbMessageClient(cfg),
		DbMessageFields:       NewDbMessageFieldsClient(cfg),
		DbTransportInstances:  NewDbTransportInstancesClient(cfg),
		DbTransportRecipients: NewDbTransportRecipientsClient(cfg),
		DbUser:                NewDbUserClient(cfg),
		DbUserMetaData:        NewDbUserMetaDataClient(cfg),
		Tenant:                NewTenantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DbApp.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DbApp.Use(hooks...)
	c.DbFilter.Use(hooks...)
	c.DbGroup.Use(hooks...)
	c.DbMessage.Use(hooks...)
	c.DbMessageFields.Use(hooks...)
	c.DbTransportInstances.Use(hooks...)
	c.DbTransportRecipients.Use(hooks...)
	c.DbUser.Use(hooks...)
	c.DbUserMetaData.Use(hooks...)
	c.Tenant.Use(hooks...)
}

// DbAppClient is a client for the DbApp schema.
type DbAppClient struct {
	config
}

// NewDbAppClient returns a client for the DbApp from the given config.
func NewDbAppClient(c config) *DbAppClient {
	return &DbAppClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbapp.Hooks(f(g(h())))`.
func (c *DbAppClient) Use(hooks ...Hook) {
	c.hooks.DbApp = append(c.hooks.DbApp, hooks...)
}

// Create returns a builder for creating a DbApp entity.
func (c *DbAppClient) Create() *DbAppCreate {
	mutation := newDbAppMutation(c.config, OpCreate)
	return &DbAppCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbApp entities.
func (c *DbAppClient) CreateBulk(builders ...*DbAppCreate) *DbAppCreateBulk {
	return &DbAppCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbApp.
func (c *DbAppClient) Update() *DbAppUpdate {
	mutation := newDbAppMutation(c.config, OpUpdate)
	return &DbAppUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbAppClient) UpdateOne(da *DbApp) *DbAppUpdateOne {
	mutation := newDbAppMutation(c.config, OpUpdateOne, withDbApp(da))
	return &DbAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbAppClient) UpdateOneID(id int) *DbAppUpdateOne {
	mutation := newDbAppMutation(c.config, OpUpdateOne, withDbAppID(id))
	return &DbAppUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbApp.
func (c *DbAppClient) Delete() *DbAppDelete {
	mutation := newDbAppMutation(c.config, OpDelete)
	return &DbAppDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbAppClient) DeleteOne(da *DbApp) *DbAppDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbAppClient) DeleteOneID(id int) *DbAppDeleteOne {
	builder := c.Delete().Where(dbapp.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbAppDeleteOne{builder}
}

// Query returns a query builder for DbApp.
func (c *DbAppClient) Query() *DbAppQuery {
	return &DbAppQuery{
		config: c.config,
	}
}

// Get returns a DbApp entity by its id.
func (c *DbAppClient) Get(ctx context.Context, id int) (*DbApp, error) {
	return c.Query().Where(dbapp.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbAppClient) GetX(ctx context.Context, id int) *DbApp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbApp.
func (c *DbAppClient) QueryTenant(da *DbApp) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbapp.TenantTable, dbapp.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a DbApp.
func (c *DbAppClient) QueryMessages(da *DbApp) *DbMessageQuery {
	query := &DbMessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(dbmessage.Table, dbmessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbapp.MessagesTable, dbapp.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFilters queries the filters edge of a DbApp.
func (c *DbAppClient) QueryFilters(da *DbApp) *DbFilterQuery {
	query := &DbFilterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(dbfilter.Table, dbfilter.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dbapp.FiltersTable, dbapp.FiltersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a DbApp.
func (c *DbAppClient) QueryGroups(da *DbApp) *DbGroupQuery {
	query := &DbGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbapp.Table, dbapp.FieldID, id),
			sqlgraph.To(dbgroup.Table, dbgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dbapp.GroupsTable, dbapp.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbAppClient) Hooks() []Hook {
	hooks := c.hooks.DbApp
	return append(hooks[:len(hooks):len(hooks)], dbapp.Hooks[:]...)
}

// DbFilterClient is a client for the DbFilter schema.
type DbFilterClient struct {
	config
}

// NewDbFilterClient returns a client for the DbFilter from the given config.
func NewDbFilterClient(c config) *DbFilterClient {
	return &DbFilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbfilter.Hooks(f(g(h())))`.
func (c *DbFilterClient) Use(hooks ...Hook) {
	c.hooks.DbFilter = append(c.hooks.DbFilter, hooks...)
}

// Create returns a builder for creating a DbFilter entity.
func (c *DbFilterClient) Create() *DbFilterCreate {
	mutation := newDbFilterMutation(c.config, OpCreate)
	return &DbFilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbFilter entities.
func (c *DbFilterClient) CreateBulk(builders ...*DbFilterCreate) *DbFilterCreateBulk {
	return &DbFilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbFilter.
func (c *DbFilterClient) Update() *DbFilterUpdate {
	mutation := newDbFilterMutation(c.config, OpUpdate)
	return &DbFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbFilterClient) UpdateOne(df *DbFilter) *DbFilterUpdateOne {
	mutation := newDbFilterMutation(c.config, OpUpdateOne, withDbFilter(df))
	return &DbFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbFilterClient) UpdateOneID(id int) *DbFilterUpdateOne {
	mutation := newDbFilterMutation(c.config, OpUpdateOne, withDbFilterID(id))
	return &DbFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbFilter.
func (c *DbFilterClient) Delete() *DbFilterDelete {
	mutation := newDbFilterMutation(c.config, OpDelete)
	return &DbFilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbFilterClient) DeleteOne(df *DbFilter) *DbFilterDeleteOne {
	return c.DeleteOneID(df.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbFilterClient) DeleteOneID(id int) *DbFilterDeleteOne {
	builder := c.Delete().Where(dbfilter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbFilterDeleteOne{builder}
}

// Query returns a query builder for DbFilter.
func (c *DbFilterClient) Query() *DbFilterQuery {
	return &DbFilterQuery{
		config: c.config,
	}
}

// Get returns a DbFilter entity by its id.
func (c *DbFilterClient) Get(ctx context.Context, id int) (*DbFilter, error) {
	return c.Query().Where(dbfilter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbFilterClient) GetX(ctx context.Context, id int) *DbFilter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbFilter.
func (c *DbFilterClient) QueryTenant(df *DbFilter) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbfilter.Table, dbfilter.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbfilter.TenantTable, dbfilter.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a DbFilter.
func (c *DbFilterClient) QueryGroups(df *DbFilter) *DbGroupQuery {
	query := &DbGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbfilter.Table, dbfilter.FieldID, id),
			sqlgraph.To(dbgroup.Table, dbgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dbfilter.GroupsTable, dbfilter.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a DbFilter.
func (c *DbFilterClient) QueryApp(df *DbFilter) *DbAppQuery {
	query := &DbAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbfilter.Table, dbfilter.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbfilter.AppTable, dbfilter.AppPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a DbFilter.
func (c *DbFilterClient) QueryUser(df *DbFilter) *DbUserQuery {
	query := &DbUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbfilter.Table, dbfilter.FieldID, id),
			sqlgraph.To(dbuser.Table, dbuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbfilter.UserTable, dbfilter.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbFilterClient) Hooks() []Hook {
	hooks := c.hooks.DbFilter
	return append(hooks[:len(hooks):len(hooks)], dbfilter.Hooks[:]...)
}

// DbGroupClient is a client for the DbGroup schema.
type DbGroupClient struct {
	config
}

// NewDbGroupClient returns a client for the DbGroup from the given config.
func NewDbGroupClient(c config) *DbGroupClient {
	return &DbGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbgroup.Hooks(f(g(h())))`.
func (c *DbGroupClient) Use(hooks ...Hook) {
	c.hooks.DbGroup = append(c.hooks.DbGroup, hooks...)
}

// Create returns a builder for creating a DbGroup entity.
func (c *DbGroupClient) Create() *DbGroupCreate {
	mutation := newDbGroupMutation(c.config, OpCreate)
	return &DbGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbGroup entities.
func (c *DbGroupClient) CreateBulk(builders ...*DbGroupCreate) *DbGroupCreateBulk {
	return &DbGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbGroup.
func (c *DbGroupClient) Update() *DbGroupUpdate {
	mutation := newDbGroupMutation(c.config, OpUpdate)
	return &DbGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbGroupClient) UpdateOne(dg *DbGroup) *DbGroupUpdateOne {
	mutation := newDbGroupMutation(c.config, OpUpdateOne, withDbGroup(dg))
	return &DbGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbGroupClient) UpdateOneID(id int) *DbGroupUpdateOne {
	mutation := newDbGroupMutation(c.config, OpUpdateOne, withDbGroupID(id))
	return &DbGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbGroup.
func (c *DbGroupClient) Delete() *DbGroupDelete {
	mutation := newDbGroupMutation(c.config, OpDelete)
	return &DbGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbGroupClient) DeleteOne(dg *DbGroup) *DbGroupDeleteOne {
	return c.DeleteOneID(dg.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbGroupClient) DeleteOneID(id int) *DbGroupDeleteOne {
	builder := c.Delete().Where(dbgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbGroupDeleteOne{builder}
}

// Query returns a query builder for DbGroup.
func (c *DbGroupClient) Query() *DbGroupQuery {
	return &DbGroupQuery{
		config: c.config,
	}
}

// Get returns a DbGroup entity by its id.
func (c *DbGroupClient) Get(ctx context.Context, id int) (*DbGroup, error) {
	return c.Query().Where(dbgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbGroupClient) GetX(ctx context.Context, id int) *DbGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbGroup.
func (c *DbGroupClient) QueryTenant(dg *DbGroup) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgroup.Table, dbgroup.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbgroup.TenantTable, dbgroup.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransportRecipients queries the TransportRecipients edge of a DbGroup.
func (c *DbGroupClient) QueryTransportRecipients(dg *DbGroup) *DbTransportRecipientsQuery {
	query := &DbTransportRecipientsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgroup.Table, dbgroup.FieldID, id),
			sqlgraph.To(dbtransportrecipients.Table, dbtransportrecipients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbgroup.TransportRecipientsTable, dbgroup.TransportRecipientsColumn),
		)
		fromV = sqlgraph.Neighbors(dg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a DbGroup.
func (c *DbGroupClient) QueryUsers(dg *DbGroup) *DbUserQuery {
	query := &DbUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgroup.Table, dbgroup.FieldID, id),
			sqlgraph.To(dbuser.Table, dbuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbgroup.UsersTable, dbgroup.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFilters queries the filters edge of a DbGroup.
func (c *DbGroupClient) QueryFilters(dg *DbGroup) *DbFilterQuery {
	query := &DbFilterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgroup.Table, dbgroup.FieldID, id),
			sqlgraph.To(dbfilter.Table, dbfilter.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbgroup.FiltersTable, dbgroup.FiltersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApps queries the apps edge of a DbGroup.
func (c *DbGroupClient) QueryApps(dg *DbGroup) *DbAppQuery {
	query := &DbAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbgroup.Table, dbgroup.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dbgroup.AppsTable, dbgroup.AppsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbGroupClient) Hooks() []Hook {
	hooks := c.hooks.DbGroup
	return append(hooks[:len(hooks):len(hooks)], dbgroup.Hooks[:]...)
}

// DbMessageClient is a client for the DbMessage schema.
type DbMessageClient struct {
	config
}

// NewDbMessageClient returns a client for the DbMessage from the given config.
func NewDbMessageClient(c config) *DbMessageClient {
	return &DbMessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbmessage.Hooks(f(g(h())))`.
func (c *DbMessageClient) Use(hooks ...Hook) {
	c.hooks.DbMessage = append(c.hooks.DbMessage, hooks...)
}

// Create returns a builder for creating a DbMessage entity.
func (c *DbMessageClient) Create() *DbMessageCreate {
	mutation := newDbMessageMutation(c.config, OpCreate)
	return &DbMessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbMessage entities.
func (c *DbMessageClient) CreateBulk(builders ...*DbMessageCreate) *DbMessageCreateBulk {
	return &DbMessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbMessage.
func (c *DbMessageClient) Update() *DbMessageUpdate {
	mutation := newDbMessageMutation(c.config, OpUpdate)
	return &DbMessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbMessageClient) UpdateOne(dm *DbMessage) *DbMessageUpdateOne {
	mutation := newDbMessageMutation(c.config, OpUpdateOne, withDbMessage(dm))
	return &DbMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbMessageClient) UpdateOneID(id uuid.UUID) *DbMessageUpdateOne {
	mutation := newDbMessageMutation(c.config, OpUpdateOne, withDbMessageID(id))
	return &DbMessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbMessage.
func (c *DbMessageClient) Delete() *DbMessageDelete {
	mutation := newDbMessageMutation(c.config, OpDelete)
	return &DbMessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbMessageClient) DeleteOne(dm *DbMessage) *DbMessageDeleteOne {
	return c.DeleteOneID(dm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbMessageClient) DeleteOneID(id uuid.UUID) *DbMessageDeleteOne {
	builder := c.Delete().Where(dbmessage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbMessageDeleteOne{builder}
}

// Query returns a query builder for DbMessage.
func (c *DbMessageClient) Query() *DbMessageQuery {
	return &DbMessageQuery{
		config: c.config,
	}
}

// Get returns a DbMessage entity by its id.
func (c *DbMessageClient) Get(ctx context.Context, id uuid.UUID) (*DbMessage, error) {
	return c.Query().Where(dbmessage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbMessageClient) GetX(ctx context.Context, id uuid.UUID) *DbMessage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbMessage.
func (c *DbMessageClient) QueryTenant(dm *DbMessage) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbmessage.Table, dbmessage.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbmessage.TenantTable, dbmessage.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFields queries the fields edge of a DbMessage.
func (c *DbMessageClient) QueryFields(dm *DbMessage) *DbMessageFieldsQuery {
	query := &DbMessageFieldsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbmessage.Table, dbmessage.FieldID, id),
			sqlgraph.To(dbmessagefields.Table, dbmessagefields.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbmessage.FieldsTable, dbmessage.FieldsColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApp queries the app edge of a DbMessage.
func (c *DbMessageClient) QueryApp(dm *DbMessage) *DbAppQuery {
	query := &DbAppQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbmessage.Table, dbmessage.FieldID, id),
			sqlgraph.To(dbapp.Table, dbapp.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbmessage.AppTable, dbmessage.AppColumn),
		)
		fromV = sqlgraph.Neighbors(dm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbMessageClient) Hooks() []Hook {
	hooks := c.hooks.DbMessage
	return append(hooks[:len(hooks):len(hooks)], dbmessage.Hooks[:]...)
}

// DbMessageFieldsClient is a client for the DbMessageFields schema.
type DbMessageFieldsClient struct {
	config
}

// NewDbMessageFieldsClient returns a client for the DbMessageFields from the given config.
func NewDbMessageFieldsClient(c config) *DbMessageFieldsClient {
	return &DbMessageFieldsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbmessagefields.Hooks(f(g(h())))`.
func (c *DbMessageFieldsClient) Use(hooks ...Hook) {
	c.hooks.DbMessageFields = append(c.hooks.DbMessageFields, hooks...)
}

// Create returns a builder for creating a DbMessageFields entity.
func (c *DbMessageFieldsClient) Create() *DbMessageFieldsCreate {
	mutation := newDbMessageFieldsMutation(c.config, OpCreate)
	return &DbMessageFieldsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbMessageFields entities.
func (c *DbMessageFieldsClient) CreateBulk(builders ...*DbMessageFieldsCreate) *DbMessageFieldsCreateBulk {
	return &DbMessageFieldsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbMessageFields.
func (c *DbMessageFieldsClient) Update() *DbMessageFieldsUpdate {
	mutation := newDbMessageFieldsMutation(c.config, OpUpdate)
	return &DbMessageFieldsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbMessageFieldsClient) UpdateOne(dmf *DbMessageFields) *DbMessageFieldsUpdateOne {
	mutation := newDbMessageFieldsMutation(c.config, OpUpdateOne, withDbMessageFields(dmf))
	return &DbMessageFieldsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbMessageFieldsClient) UpdateOneID(id int) *DbMessageFieldsUpdateOne {
	mutation := newDbMessageFieldsMutation(c.config, OpUpdateOne, withDbMessageFieldsID(id))
	return &DbMessageFieldsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbMessageFields.
func (c *DbMessageFieldsClient) Delete() *DbMessageFieldsDelete {
	mutation := newDbMessageFieldsMutation(c.config, OpDelete)
	return &DbMessageFieldsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbMessageFieldsClient) DeleteOne(dmf *DbMessageFields) *DbMessageFieldsDeleteOne {
	return c.DeleteOneID(dmf.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbMessageFieldsClient) DeleteOneID(id int) *DbMessageFieldsDeleteOne {
	builder := c.Delete().Where(dbmessagefields.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbMessageFieldsDeleteOne{builder}
}

// Query returns a query builder for DbMessageFields.
func (c *DbMessageFieldsClient) Query() *DbMessageFieldsQuery {
	return &DbMessageFieldsQuery{
		config: c.config,
	}
}

// Get returns a DbMessageFields entity by its id.
func (c *DbMessageFieldsClient) Get(ctx context.Context, id int) (*DbMessageFields, error) {
	return c.Query().Where(dbmessagefields.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbMessageFieldsClient) GetX(ctx context.Context, id int) *DbMessageFields {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbMessageFields.
func (c *DbMessageFieldsClient) QueryTenant(dmf *DbMessageFields) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dmf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbmessagefields.Table, dbmessagefields.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbmessagefields.TenantTable, dbmessagefields.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dmf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a DbMessageFields.
func (c *DbMessageFieldsClient) QueryOwner(dmf *DbMessageFields) *DbMessageQuery {
	query := &DbMessageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dmf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbmessagefields.Table, dbmessagefields.FieldID, id),
			sqlgraph.To(dbmessage.Table, dbmessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbmessagefields.OwnerTable, dbmessagefields.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(dmf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbMessageFieldsClient) Hooks() []Hook {
	hooks := c.hooks.DbMessageFields
	return append(hooks[:len(hooks):len(hooks)], dbmessagefields.Hooks[:]...)
}

// DbTransportInstancesClient is a client for the DbTransportInstances schema.
type DbTransportInstancesClient struct {
	config
}

// NewDbTransportInstancesClient returns a client for the DbTransportInstances from the given config.
func NewDbTransportInstancesClient(c config) *DbTransportInstancesClient {
	return &DbTransportInstancesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbtransportinstances.Hooks(f(g(h())))`.
func (c *DbTransportInstancesClient) Use(hooks ...Hook) {
	c.hooks.DbTransportInstances = append(c.hooks.DbTransportInstances, hooks...)
}

// Create returns a builder for creating a DbTransportInstances entity.
func (c *DbTransportInstancesClient) Create() *DbTransportInstancesCreate {
	mutation := newDbTransportInstancesMutation(c.config, OpCreate)
	return &DbTransportInstancesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbTransportInstances entities.
func (c *DbTransportInstancesClient) CreateBulk(builders ...*DbTransportInstancesCreate) *DbTransportInstancesCreateBulk {
	return &DbTransportInstancesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbTransportInstances.
func (c *DbTransportInstancesClient) Update() *DbTransportInstancesUpdate {
	mutation := newDbTransportInstancesMutation(c.config, OpUpdate)
	return &DbTransportInstancesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbTransportInstancesClient) UpdateOne(dti *DbTransportInstances) *DbTransportInstancesUpdateOne {
	mutation := newDbTransportInstancesMutation(c.config, OpUpdateOne, withDbTransportInstances(dti))
	return &DbTransportInstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbTransportInstancesClient) UpdateOneID(id int) *DbTransportInstancesUpdateOne {
	mutation := newDbTransportInstancesMutation(c.config, OpUpdateOne, withDbTransportInstancesID(id))
	return &DbTransportInstancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbTransportInstances.
func (c *DbTransportInstancesClient) Delete() *DbTransportInstancesDelete {
	mutation := newDbTransportInstancesMutation(c.config, OpDelete)
	return &DbTransportInstancesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbTransportInstancesClient) DeleteOne(dti *DbTransportInstances) *DbTransportInstancesDeleteOne {
	return c.DeleteOneID(dti.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbTransportInstancesClient) DeleteOneID(id int) *DbTransportInstancesDeleteOne {
	builder := c.Delete().Where(dbtransportinstances.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbTransportInstancesDeleteOne{builder}
}

// Query returns a query builder for DbTransportInstances.
func (c *DbTransportInstancesClient) Query() *DbTransportInstancesQuery {
	return &DbTransportInstancesQuery{
		config: c.config,
	}
}

// Get returns a DbTransportInstances entity by its id.
func (c *DbTransportInstancesClient) Get(ctx context.Context, id int) (*DbTransportInstances, error) {
	return c.Query().Where(dbtransportinstances.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbTransportInstancesClient) GetX(ctx context.Context, id int) *DbTransportInstances {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbTransportInstances.
func (c *DbTransportInstancesClient) QueryTenant(dti *DbTransportInstances) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dti.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtransportinstances.Table, dbtransportinstances.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbtransportinstances.TenantTable, dbtransportinstances.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dti.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransportRecipients queries the TransportRecipients edge of a DbTransportInstances.
func (c *DbTransportInstancesClient) QueryTransportRecipients(dti *DbTransportInstances) *DbTransportRecipientsQuery {
	query := &DbTransportRecipientsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dti.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtransportinstances.Table, dbtransportinstances.FieldID, id),
			sqlgraph.To(dbtransportrecipients.Table, dbtransportrecipients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbtransportinstances.TransportRecipientsTable, dbtransportinstances.TransportRecipientsColumn),
		)
		fromV = sqlgraph.Neighbors(dti.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbTransportInstancesClient) Hooks() []Hook {
	hooks := c.hooks.DbTransportInstances
	return append(hooks[:len(hooks):len(hooks)], dbtransportinstances.Hooks[:]...)
}

// DbTransportRecipientsClient is a client for the DbTransportRecipients schema.
type DbTransportRecipientsClient struct {
	config
}

// NewDbTransportRecipientsClient returns a client for the DbTransportRecipients from the given config.
func NewDbTransportRecipientsClient(c config) *DbTransportRecipientsClient {
	return &DbTransportRecipientsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbtransportrecipients.Hooks(f(g(h())))`.
func (c *DbTransportRecipientsClient) Use(hooks ...Hook) {
	c.hooks.DbTransportRecipients = append(c.hooks.DbTransportRecipients, hooks...)
}

// Create returns a builder for creating a DbTransportRecipients entity.
func (c *DbTransportRecipientsClient) Create() *DbTransportRecipientsCreate {
	mutation := newDbTransportRecipientsMutation(c.config, OpCreate)
	return &DbTransportRecipientsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbTransportRecipients entities.
func (c *DbTransportRecipientsClient) CreateBulk(builders ...*DbTransportRecipientsCreate) *DbTransportRecipientsCreateBulk {
	return &DbTransportRecipientsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbTransportRecipients.
func (c *DbTransportRecipientsClient) Update() *DbTransportRecipientsUpdate {
	mutation := newDbTransportRecipientsMutation(c.config, OpUpdate)
	return &DbTransportRecipientsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbTransportRecipientsClient) UpdateOne(dtr *DbTransportRecipients) *DbTransportRecipientsUpdateOne {
	mutation := newDbTransportRecipientsMutation(c.config, OpUpdateOne, withDbTransportRecipients(dtr))
	return &DbTransportRecipientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbTransportRecipientsClient) UpdateOneID(id int) *DbTransportRecipientsUpdateOne {
	mutation := newDbTransportRecipientsMutation(c.config, OpUpdateOne, withDbTransportRecipientsID(id))
	return &DbTransportRecipientsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbTransportRecipients.
func (c *DbTransportRecipientsClient) Delete() *DbTransportRecipientsDelete {
	mutation := newDbTransportRecipientsMutation(c.config, OpDelete)
	return &DbTransportRecipientsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbTransportRecipientsClient) DeleteOne(dtr *DbTransportRecipients) *DbTransportRecipientsDeleteOne {
	return c.DeleteOneID(dtr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbTransportRecipientsClient) DeleteOneID(id int) *DbTransportRecipientsDeleteOne {
	builder := c.Delete().Where(dbtransportrecipients.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbTransportRecipientsDeleteOne{builder}
}

// Query returns a query builder for DbTransportRecipients.
func (c *DbTransportRecipientsClient) Query() *DbTransportRecipientsQuery {
	return &DbTransportRecipientsQuery{
		config: c.config,
	}
}

// Get returns a DbTransportRecipients entity by its id.
func (c *DbTransportRecipientsClient) Get(ctx context.Context, id int) (*DbTransportRecipients, error) {
	return c.Query().Where(dbtransportrecipients.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbTransportRecipientsClient) GetX(ctx context.Context, id int) *DbTransportRecipients {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbTransportRecipients.
func (c *DbTransportRecipientsClient) QueryTenant(dtr *DbTransportRecipients) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtransportrecipients.Table, dbtransportrecipients.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbtransportrecipients.TenantTable, dbtransportrecipients.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransportInstance queries the TransportInstance edge of a DbTransportRecipients.
func (c *DbTransportRecipientsClient) QueryTransportInstance(dtr *DbTransportRecipients) *DbTransportInstancesQuery {
	query := &DbTransportInstancesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtransportrecipients.Table, dbtransportrecipients.FieldID, id),
			sqlgraph.To(dbtransportinstances.Table, dbtransportinstances.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbtransportrecipients.TransportInstanceTable, dbtransportrecipients.TransportInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(dtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupRecipient queries the GroupRecipient edge of a DbTransportRecipients.
func (c *DbTransportRecipientsClient) QueryGroupRecipient(dtr *DbTransportRecipients) *DbGroupQuery {
	query := &DbGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtransportrecipients.Table, dbtransportrecipients.FieldID, id),
			sqlgraph.To(dbgroup.Table, dbgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbtransportrecipients.GroupRecipientTable, dbtransportrecipients.GroupRecipientColumn),
		)
		fromV = sqlgraph.Neighbors(dtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserRecipient queries the UserRecipient edge of a DbTransportRecipients.
func (c *DbTransportRecipientsClient) QueryUserRecipient(dtr *DbTransportRecipients) *DbUserQuery {
	query := &DbUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dtr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbtransportrecipients.Table, dbtransportrecipients.FieldID, id),
			sqlgraph.To(dbuser.Table, dbuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbtransportrecipients.UserRecipientTable, dbtransportrecipients.UserRecipientColumn),
		)
		fromV = sqlgraph.Neighbors(dtr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbTransportRecipientsClient) Hooks() []Hook {
	hooks := c.hooks.DbTransportRecipients
	return append(hooks[:len(hooks):len(hooks)], dbtransportrecipients.Hooks[:]...)
}

// DbUserClient is a client for the DbUser schema.
type DbUserClient struct {
	config
}

// NewDbUserClient returns a client for the DbUser from the given config.
func NewDbUserClient(c config) *DbUserClient {
	return &DbUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbuser.Hooks(f(g(h())))`.
func (c *DbUserClient) Use(hooks ...Hook) {
	c.hooks.DbUser = append(c.hooks.DbUser, hooks...)
}

// Create returns a builder for creating a DbUser entity.
func (c *DbUserClient) Create() *DbUserCreate {
	mutation := newDbUserMutation(c.config, OpCreate)
	return &DbUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbUser entities.
func (c *DbUserClient) CreateBulk(builders ...*DbUserCreate) *DbUserCreateBulk {
	return &DbUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbUser.
func (c *DbUserClient) Update() *DbUserUpdate {
	mutation := newDbUserMutation(c.config, OpUpdate)
	return &DbUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbUserClient) UpdateOne(du *DbUser) *DbUserUpdateOne {
	mutation := newDbUserMutation(c.config, OpUpdateOne, withDbUser(du))
	return &DbUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbUserClient) UpdateOneID(id int) *DbUserUpdateOne {
	mutation := newDbUserMutation(c.config, OpUpdateOne, withDbUserID(id))
	return &DbUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbUser.
func (c *DbUserClient) Delete() *DbUserDelete {
	mutation := newDbUserMutation(c.config, OpDelete)
	return &DbUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbUserClient) DeleteOne(du *DbUser) *DbUserDeleteOne {
	return c.DeleteOneID(du.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbUserClient) DeleteOneID(id int) *DbUserDeleteOne {
	builder := c.Delete().Where(dbuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbUserDeleteOne{builder}
}

// Query returns a query builder for DbUser.
func (c *DbUserClient) Query() *DbUserQuery {
	return &DbUserQuery{
		config: c.config,
	}
}

// Get returns a DbUser entity by its id.
func (c *DbUserClient) Get(ctx context.Context, id int) (*DbUser, error) {
	return c.Query().Where(dbuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbUserClient) GetX(ctx context.Context, id int) *DbUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbUser.
func (c *DbUserClient) QueryTenant(du *DbUser) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbuser.Table, dbuser.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbuser.TenantTable, dbuser.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMetadata queries the metadata edge of a DbUser.
func (c *DbUserClient) QueryMetadata(du *DbUser) *DbUserMetaDataQuery {
	query := &DbUserMetaDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbuser.Table, dbuser.FieldID, id),
			sqlgraph.To(dbusermetadata.Table, dbusermetadata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbuser.MetadataTable, dbuser.MetadataColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFilters queries the filters edge of a DbUser.
func (c *DbUserClient) QueryFilters(du *DbUser) *DbFilterQuery {
	query := &DbFilterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbuser.Table, dbuser.FieldID, id),
			sqlgraph.To(dbfilter.Table, dbfilter.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dbuser.FiltersTable, dbuser.FiltersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a DbUser.
func (c *DbUserClient) QueryGroups(du *DbUser) *DbGroupQuery {
	query := &DbGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbuser.Table, dbuser.FieldID, id),
			sqlgraph.To(dbgroup.Table, dbgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, dbuser.GroupsTable, dbuser.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransportRecipients queries the TransportRecipients edge of a DbUser.
func (c *DbUserClient) QueryTransportRecipients(du *DbUser) *DbTransportRecipientsQuery {
	query := &DbTransportRecipientsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := du.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbuser.Table, dbuser.FieldID, id),
			sqlgraph.To(dbtransportrecipients.Table, dbtransportrecipients.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dbuser.TransportRecipientsTable, dbuser.TransportRecipientsColumn),
		)
		fromV = sqlgraph.Neighbors(du.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbUserClient) Hooks() []Hook {
	hooks := c.hooks.DbUser
	return append(hooks[:len(hooks):len(hooks)], dbuser.Hooks[:]...)
}

// DbUserMetaDataClient is a client for the DbUserMetaData schema.
type DbUserMetaDataClient struct {
	config
}

// NewDbUserMetaDataClient returns a client for the DbUserMetaData from the given config.
func NewDbUserMetaDataClient(c config) *DbUserMetaDataClient {
	return &DbUserMetaDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dbusermetadata.Hooks(f(g(h())))`.
func (c *DbUserMetaDataClient) Use(hooks ...Hook) {
	c.hooks.DbUserMetaData = append(c.hooks.DbUserMetaData, hooks...)
}

// Create returns a builder for creating a DbUserMetaData entity.
func (c *DbUserMetaDataClient) Create() *DbUserMetaDataCreate {
	mutation := newDbUserMetaDataMutation(c.config, OpCreate)
	return &DbUserMetaDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DbUserMetaData entities.
func (c *DbUserMetaDataClient) CreateBulk(builders ...*DbUserMetaDataCreate) *DbUserMetaDataCreateBulk {
	return &DbUserMetaDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DbUserMetaData.
func (c *DbUserMetaDataClient) Update() *DbUserMetaDataUpdate {
	mutation := newDbUserMetaDataMutation(c.config, OpUpdate)
	return &DbUserMetaDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DbUserMetaDataClient) UpdateOne(dumd *DbUserMetaData) *DbUserMetaDataUpdateOne {
	mutation := newDbUserMetaDataMutation(c.config, OpUpdateOne, withDbUserMetaData(dumd))
	return &DbUserMetaDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DbUserMetaDataClient) UpdateOneID(id int) *DbUserMetaDataUpdateOne {
	mutation := newDbUserMetaDataMutation(c.config, OpUpdateOne, withDbUserMetaDataID(id))
	return &DbUserMetaDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DbUserMetaData.
func (c *DbUserMetaDataClient) Delete() *DbUserMetaDataDelete {
	mutation := newDbUserMetaDataMutation(c.config, OpDelete)
	return &DbUserMetaDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DbUserMetaDataClient) DeleteOne(dumd *DbUserMetaData) *DbUserMetaDataDeleteOne {
	return c.DeleteOneID(dumd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DbUserMetaDataClient) DeleteOneID(id int) *DbUserMetaDataDeleteOne {
	builder := c.Delete().Where(dbusermetadata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DbUserMetaDataDeleteOne{builder}
}

// Query returns a query builder for DbUserMetaData.
func (c *DbUserMetaDataClient) Query() *DbUserMetaDataQuery {
	return &DbUserMetaDataQuery{
		config: c.config,
	}
}

// Get returns a DbUserMetaData entity by its id.
func (c *DbUserMetaDataClient) Get(ctx context.Context, id int) (*DbUserMetaData, error) {
	return c.Query().Where(dbusermetadata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DbUserMetaDataClient) GetX(ctx context.Context, id int) *DbUserMetaData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DbUserMetaData.
func (c *DbUserMetaDataClient) QueryTenant(dumd *DbUserMetaData) *TenantQuery {
	query := &TenantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dumd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbusermetadata.Table, dbusermetadata.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, dbusermetadata.TenantTable, dbusermetadata.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dumd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a DbUserMetaData.
func (c *DbUserMetaDataClient) QueryUser(dumd *DbUserMetaData) *DbUserQuery {
	query := &DbUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dumd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dbusermetadata.Table, dbusermetadata.FieldID, id),
			sqlgraph.To(dbuser.Table, dbuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dbusermetadata.UserTable, dbusermetadata.UserColumn),
		)
		fromV = sqlgraph.Neighbors(dumd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DbUserMetaDataClient) Hooks() []Hook {
	hooks := c.hooks.DbUserMetaData
	return append(hooks[:len(hooks):len(hooks)], dbusermetadata.Hooks[:]...)
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	hooks := c.hooks.Tenant
	return append(hooks[:len(hooks):len(hooks)], tenant.Hooks[:]...)
}
