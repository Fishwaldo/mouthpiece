/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbmessage"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
	"github.com/google/uuid"
)

// DbMessage is the model entity for the DbMessage schema.
type DbMessage struct {
	config `default:"-" doc:"-" json:"-" maximum:"-" minimum:"-" validate:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Message holds the value of the "Message" field.
	Message string `json:"Message,omitempty" doc:"Message to be Sent"`
	// ShortMsg holds the value of the "ShortMsg" field.
	ShortMsg *string `json:"ShortMsg,omitempty" doc:"Short Message to be Sent" `
	// Topic holds the value of the "Topic" field.
	Topic *string `json:"Topic,omitempty" doc:"Topic of Message"`
	// Severity holds the value of the "Severity" field.
	Severity int `json:"Severity,omitempty" doc:"Severity of Message" minimum:"1" maximum:"5" default:"3" validate:"min=1,max=5"`
	// Timestamp holds the value of the "Timestamp" field.
	Timestamp time.Time `json:"Timestamp,omitempty" doc:"Timestamp of Message"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbMessageQuery when eager-loading is set.
	Edges           DbMessageEdges `json:"edges"`
	db_app_messages *int
}

// DbMessageEdges holds the relations/edges for other nodes in the graph.
type DbMessageEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Fields holds the value of the fields edge.
	Fields []*DbMessageFields `json:"fields,omitempty"`
	// App holds the value of the app edge.
	App *DbApp `json:"app,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbMessageEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// FieldsOrErr returns the Fields value or an error if the edge
// was not loaded in eager-loading.
func (e DbMessageEdges) FieldsOrErr() ([]*DbMessageFields, error) {
	if e.loadedTypes[1] {
		return e.Fields, nil
	}
	return nil, &NotLoadedError{edge: "fields"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbMessageEdges) AppOrErr() (*DbApp, error) {
	if e.loadedTypes[2] {
		if e.App == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dbapp.Label}
		}
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbmessage.FieldTenantID, dbmessage.FieldSeverity:
			values[i] = new(sql.NullInt64)
		case dbmessage.FieldMessage, dbmessage.FieldShortMsg, dbmessage.FieldTopic:
			values[i] = new(sql.NullString)
		case dbmessage.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case dbmessage.FieldID:
			values[i] = new(uuid.UUID)
		case dbmessage.ForeignKeys[0]: // db_app_messages
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbMessage fields.
func (dm *DbMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbmessage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dm.ID = *value
			}
		case dbmessage.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dm.TenantID = int(value.Int64)
			}
		case dbmessage.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Message", values[i])
			} else if value.Valid {
				dm.Message = value.String
			}
		case dbmessage.FieldShortMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ShortMsg", values[i])
			} else if value.Valid {
				dm.ShortMsg = new(string)
				*dm.ShortMsg = value.String
			}
		case dbmessage.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Topic", values[i])
			} else if value.Valid {
				dm.Topic = new(string)
				*dm.Topic = value.String
			}
		case dbmessage.FieldSeverity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Severity", values[i])
			} else if value.Valid {
				dm.Severity = int(value.Int64)
			}
		case dbmessage.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Timestamp", values[i])
			} else if value.Valid {
				dm.Timestamp = value.Time
			}
		case dbmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field db_app_messages", value)
			} else if value.Valid {
				dm.db_app_messages = new(int)
				*dm.db_app_messages = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the DbMessage entity.
func (dm *DbMessage) QueryTenant() *TenantQuery {
	return (&DbMessageClient{config: dm.config}).QueryTenant(dm)
}

// QueryFields queries the "fields" edge of the DbMessage entity.
func (dm *DbMessage) QueryFields() *DbMessageFieldsQuery {
	return (&DbMessageClient{config: dm.config}).QueryFields(dm)
}

// QueryApp queries the "app" edge of the DbMessage entity.
func (dm *DbMessage) QueryApp() *DbAppQuery {
	return (&DbMessageClient{config: dm.config}).QueryApp(dm)
}

// Update returns a builder for updating this DbMessage.
// Note that you need to call DbMessage.Unwrap() before calling this method if this DbMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DbMessage) Update() *DbMessageUpdateOne {
	return (&DbMessageClient{config: dm.config}).UpdateOne(dm)
}

// Unwrap unwraps the DbMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DbMessage) Unwrap() *DbMessage {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbMessage is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DbMessage) String() string {
	var builder strings.Builder
	builder.WriteString("DbMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dm.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Message=")
	builder.WriteString(dm.Message)
	builder.WriteString(", ")
	if v := dm.ShortMsg; v != nil {
		builder.WriteString("ShortMsg=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := dm.Topic; v != nil {
		builder.WriteString("Topic=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("Severity=")
	builder.WriteString(fmt.Sprintf("%v", dm.Severity))
	builder.WriteString(", ")
	builder.WriteString("Timestamp=")
	builder.WriteString(dm.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

func (dm *DbMessage) ValidateDbMessage() error {
	if err := validate.Get().Struct(dm); err != nil {
		return err
	}
	return nil
}

// DbMessages is a parsable slice of DbMessage.
type DbMessages []*DbMessage

func (dm DbMessages) config(cfg config) {
	for _i := range dm {
		dm[_i].config = cfg
	}
}
