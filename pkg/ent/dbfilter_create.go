/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/interfaces"
)

// DbFilterCreate is the builder for creating a DbFilter entity.
type DbFilterCreate struct {
	config
	mutation *DbFilterMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (dfc *DbFilterCreate) SetTenantID(i int) *DbFilterCreate {
	dfc.mutation.SetTenantID(i)
	return dfc
}

// SetName sets the "Name" field.
func (dfc *DbFilterCreate) SetName(s string) *DbFilterCreate {
	dfc.mutation.SetName(s)
	return dfc
}

// SetDescription sets the "Description" field.
func (dfc *DbFilterCreate) SetDescription(s string) *DbFilterCreate {
	dfc.mutation.SetDescription(s)
	return dfc
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dfc *DbFilterCreate) SetNillableDescription(s *string) *DbFilterCreate {
	if s != nil {
		dfc.SetDescription(*s)
	}
	return dfc
}

// SetType sets the "Type" field.
func (dfc *DbFilterCreate) SetType(it interfaces.FilterType) *DbFilterCreate {
	dfc.mutation.SetType(it)
	return dfc
}

// SetEnabled sets the "Enabled" field.
func (dfc *DbFilterCreate) SetEnabled(b bool) *DbFilterCreate {
	dfc.mutation.SetEnabled(b)
	return dfc
}

// SetNillableEnabled sets the "Enabled" field if the given value is not nil.
func (dfc *DbFilterCreate) SetNillableEnabled(b *bool) *DbFilterCreate {
	if b != nil {
		dfc.SetEnabled(*b)
	}
	return dfc
}

// SetFilterImpl sets the "FilterImpl" field.
func (dfc *DbFilterCreate) SetFilterImpl(s string) *DbFilterCreate {
	dfc.mutation.SetFilterImpl(s)
	return dfc
}

// SetConfig sets the "Config" field.
func (dfc *DbFilterCreate) SetConfig(s string) *DbFilterCreate {
	dfc.mutation.SetConfig(s)
	return dfc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dfc *DbFilterCreate) SetTenant(t *Tenant) *DbFilterCreate {
	return dfc.SetTenantID(t.ID)
}

// AddGroupIDs adds the "groups" edge to the DbGroup entity by IDs.
func (dfc *DbFilterCreate) AddGroupIDs(ids ...int) *DbFilterCreate {
	dfc.mutation.AddGroupIDs(ids...)
	return dfc
}

// AddGroups adds the "groups" edges to the DbGroup entity.
func (dfc *DbFilterCreate) AddGroups(d ...*DbGroup) *DbFilterCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfc.AddGroupIDs(ids...)
}

// AddAppIDs adds the "app" edge to the DbApp entity by IDs.
func (dfc *DbFilterCreate) AddAppIDs(ids ...int) *DbFilterCreate {
	dfc.mutation.AddAppIDs(ids...)
	return dfc
}

// AddApp adds the "app" edges to the DbApp entity.
func (dfc *DbFilterCreate) AddApp(d ...*DbApp) *DbFilterCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfc.AddAppIDs(ids...)
}

// AddUserIDs adds the "user" edge to the DbUser entity by IDs.
func (dfc *DbFilterCreate) AddUserIDs(ids ...int) *DbFilterCreate {
	dfc.mutation.AddUserIDs(ids...)
	return dfc
}

// AddUser adds the "user" edges to the DbUser entity.
func (dfc *DbFilterCreate) AddUser(d ...*DbUser) *DbFilterCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfc.AddUserIDs(ids...)
}

// Mutation returns the DbFilterMutation object of the builder.
func (dfc *DbFilterCreate) Mutation() *DbFilterMutation {
	return dfc.mutation
}

// Save creates the DbFilter in the database.
func (dfc *DbFilterCreate) Save(ctx context.Context) (*DbFilter, error) {
	var (
		err  error
		node *DbFilter
	)
	if err := dfc.defaults(); err != nil {
		return nil, err
	}
	if len(dfc.hooks) == 0 {
		if err = dfc.check(); err != nil {
			return nil, err
		}
		node, err = dfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dfc.check(); err != nil {
				return nil, err
			}
			dfc.mutation = mutation
			if node, err = dfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dfc.hooks) - 1; i >= 0; i-- {
			if dfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbFilter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbFilterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dfc *DbFilterCreate) SaveX(ctx context.Context) *DbFilter {
	v, err := dfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dfc *DbFilterCreate) Exec(ctx context.Context) error {
	_, err := dfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfc *DbFilterCreate) ExecX(ctx context.Context) {
	if err := dfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dfc *DbFilterCreate) defaults() error {
	if _, ok := dfc.mutation.Enabled(); !ok {
		v := dbfilter.DefaultEnabled
		dfc.mutation.SetEnabled(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dfc *DbFilterCreate) check() error {
	if _, ok := dfc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DbFilter.tenant_id"`)}
	}
	if _, ok := dfc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "DbFilter.Name"`)}
	}
	if v, ok := dfc.mutation.Name(); ok {
		if err := dbfilter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbFilter.Name": %w`, err)}
		}
	}
	if _, ok := dfc.mutation.GetType(); !ok {
		return &ValidationError{Name: "Type", err: errors.New(`ent: missing required field "DbFilter.Type"`)}
	}
	if v, ok := dfc.mutation.GetType(); ok {
		if err := dbfilter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf(`ent: validator failed for field "DbFilter.Type": %w`, err)}
		}
	}
	if _, ok := dfc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "Enabled", err: errors.New(`ent: missing required field "DbFilter.Enabled"`)}
	}
	if _, ok := dfc.mutation.FilterImpl(); !ok {
		return &ValidationError{Name: "FilterImpl", err: errors.New(`ent: missing required field "DbFilter.FilterImpl"`)}
	}
	if v, ok := dfc.mutation.FilterImpl(); ok {
		if err := dbfilter.FilterImplValidator(v); err != nil {
			return &ValidationError{Name: "FilterImpl", err: fmt.Errorf(`ent: validator failed for field "DbFilter.FilterImpl": %w`, err)}
		}
	}
	if _, ok := dfc.mutation.Config(); !ok {
		return &ValidationError{Name: "Config", err: errors.New(`ent: missing required field "DbFilter.Config"`)}
	}
	if _, ok := dfc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DbFilter.tenant"`)}
	}
	return nil
}

func (dfc *DbFilterCreate) sqlSave(ctx context.Context) (*DbFilter, error) {
	_node, _spec := dfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dfc *DbFilterCreate) createSpec() (*DbFilter, *sqlgraph.CreateSpec) {
	var (
		_node = &DbFilter{config: dfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dbfilter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbfilter.FieldID,
			},
		}
	)
	if value, ok := dfc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dfc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := dfc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: dbfilter.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dfc.mutation.Enabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dbfilter.FieldEnabled,
		})
		_node.Enabled = value
	}
	if value, ok := dfc.mutation.FilterImpl(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldFilterImpl,
		})
		_node.FilterImpl = value
	}
	if value, ok := dfc.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldConfig,
		})
		_node.Config = value
	}
	if nodes := dfc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbfilter.TenantTable,
			Columns: []string{dbfilter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dfc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dfc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dfc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

func (dfc *DbFilterCreate) SetDbFilterFromStruct(input *DbFilter) *DbFilterCreate {

	dfc.SetTenantID(input.TenantID)

	dfc.SetName(input.Name)

	dfc.SetDescription(input.Description)

	dfc.SetType(input.Type)

	dfc.SetEnabled(input.Enabled)

	dfc.SetFilterImpl(input.FilterImpl)

	dfc.SetConfig(input.Config)

	return dfc
}

// DbFilterCreateBulk is the builder for creating many DbFilter entities in bulk.
type DbFilterCreateBulk struct {
	config
	builders []*DbFilterCreate
}

// Save creates the DbFilter entities in the database.
func (dfcb *DbFilterCreateBulk) Save(ctx context.Context) ([]*DbFilter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dfcb.builders))
	nodes := make([]*DbFilter, len(dfcb.builders))
	mutators := make([]Mutator, len(dfcb.builders))
	for i := range dfcb.builders {
		func(i int, root context.Context) {
			builder := dfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DbFilterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dfcb *DbFilterCreateBulk) SaveX(ctx context.Context) []*DbFilter {
	v, err := dfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dfcb *DbFilterCreateBulk) Exec(ctx context.Context) error {
	_, err := dfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfcb *DbFilterCreateBulk) ExecX(ctx context.Context) {
	if err := dfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
