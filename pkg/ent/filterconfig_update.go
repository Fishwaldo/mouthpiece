/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/filter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/filterconfig"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
)

// FilterConfigUpdate is the builder for updating FilterConfig entities.
type FilterConfigUpdate struct {
	config
	hooks    []Hook
	mutation *FilterConfigMutation
}

// Where appends a list predicates to the FilterConfigUpdate builder.
func (fcu *FilterConfigUpdate) Where(ps ...predicate.FilterConfig) *FilterConfigUpdate {
	fcu.mutation.Where(ps...)
	return fcu
}

// SetTenantID sets the "tenant_id" field.
func (fcu *FilterConfigUpdate) SetTenantID(i int) *FilterConfigUpdate {
	fcu.mutation.SetTenantID(i)
	return fcu
}

// SetName sets the "Name" field.
func (fcu *FilterConfigUpdate) SetName(s string) *FilterConfigUpdate {
	fcu.mutation.SetName(s)
	return fcu
}

// SetValue sets the "Value" field.
func (fcu *FilterConfigUpdate) SetValue(s string) *FilterConfigUpdate {
	fcu.mutation.SetValue(s)
	return fcu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (fcu *FilterConfigUpdate) SetTenant(t *Tenant) *FilterConfigUpdate {
	return fcu.SetTenantID(t.ID)
}

// SetFilterID sets the "filter" edge to the Filter entity by ID.
func (fcu *FilterConfigUpdate) SetFilterID(id int) *FilterConfigUpdate {
	fcu.mutation.SetFilterID(id)
	return fcu
}

// SetFilter sets the "filter" edge to the Filter entity.
func (fcu *FilterConfigUpdate) SetFilter(f *Filter) *FilterConfigUpdate {
	return fcu.SetFilterID(f.ID)
}

// Mutation returns the FilterConfigMutation object of the builder.
func (fcu *FilterConfigUpdate) Mutation() *FilterConfigMutation {
	return fcu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (fcu *FilterConfigUpdate) ClearTenant() *FilterConfigUpdate {
	fcu.mutation.ClearTenant()
	return fcu
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (fcu *FilterConfigUpdate) ClearFilter() *FilterConfigUpdate {
	fcu.mutation.ClearFilter()
	return fcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcu *FilterConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fcu.hooks) == 0 {
		if err = fcu.check(); err != nil {
			return 0, err
		}
		affected, err = fcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilterConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fcu.check(); err != nil {
				return 0, err
			}
			fcu.mutation = mutation
			affected, err = fcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fcu.hooks) - 1; i >= 0; i-- {
			if fcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fcu *FilterConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := fcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcu *FilterConfigUpdate) Exec(ctx context.Context) error {
	_, err := fcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcu *FilterConfigUpdate) ExecX(ctx context.Context) {
	if err := fcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcu *FilterConfigUpdate) check() error {
	if v, ok := fcu.mutation.Name(); ok {
		if err := filterconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "FilterConfig.Name": %w`, err)}
		}
	}
	if v, ok := fcu.mutation.Value(); ok {
		if err := filterconfig.ValueValidator(v); err != nil {
			return &ValidationError{Name: "Value", err: fmt.Errorf(`ent: validator failed for field "FilterConfig.Value": %w`, err)}
		}
	}
	if _, ok := fcu.mutation.TenantID(); fcu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FilterConfig.tenant"`)
	}
	if _, ok := fcu.mutation.FilterID(); fcu.mutation.FilterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FilterConfig.filter"`)
	}
	return nil
}

func (fcu *FilterConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filterconfig.Table,
			Columns: filterconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filterconfig.FieldID,
			},
		},
	}
	if ps := fcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filterconfig.FieldName,
		})
	}
	if value, ok := fcu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filterconfig.FieldValue,
		})
	}
	if fcu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filterconfig.TenantTable,
			Columns: []string{filterconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filterconfig.TenantTable,
			Columns: []string{filterconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcu.mutation.FilterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filterconfig.FilterTable,
			Columns: []string{filterconfig.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcu.mutation.FilterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filterconfig.FilterTable,
			Columns: []string{filterconfig.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filterconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FilterConfigUpdateOne is the builder for updating a single FilterConfig entity.
type FilterConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilterConfigMutation
}

// SetTenantID sets the "tenant_id" field.
func (fcuo *FilterConfigUpdateOne) SetTenantID(i int) *FilterConfigUpdateOne {
	fcuo.mutation.SetTenantID(i)
	return fcuo
}

// SetName sets the "Name" field.
func (fcuo *FilterConfigUpdateOne) SetName(s string) *FilterConfigUpdateOne {
	fcuo.mutation.SetName(s)
	return fcuo
}

// SetValue sets the "Value" field.
func (fcuo *FilterConfigUpdateOne) SetValue(s string) *FilterConfigUpdateOne {
	fcuo.mutation.SetValue(s)
	return fcuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (fcuo *FilterConfigUpdateOne) SetTenant(t *Tenant) *FilterConfigUpdateOne {
	return fcuo.SetTenantID(t.ID)
}

// SetFilterID sets the "filter" edge to the Filter entity by ID.
func (fcuo *FilterConfigUpdateOne) SetFilterID(id int) *FilterConfigUpdateOne {
	fcuo.mutation.SetFilterID(id)
	return fcuo
}

// SetFilter sets the "filter" edge to the Filter entity.
func (fcuo *FilterConfigUpdateOne) SetFilter(f *Filter) *FilterConfigUpdateOne {
	return fcuo.SetFilterID(f.ID)
}

// Mutation returns the FilterConfigMutation object of the builder.
func (fcuo *FilterConfigUpdateOne) Mutation() *FilterConfigMutation {
	return fcuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (fcuo *FilterConfigUpdateOne) ClearTenant() *FilterConfigUpdateOne {
	fcuo.mutation.ClearTenant()
	return fcuo
}

// ClearFilter clears the "filter" edge to the Filter entity.
func (fcuo *FilterConfigUpdateOne) ClearFilter() *FilterConfigUpdateOne {
	fcuo.mutation.ClearFilter()
	return fcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcuo *FilterConfigUpdateOne) Select(field string, fields ...string) *FilterConfigUpdateOne {
	fcuo.fields = append([]string{field}, fields...)
	return fcuo
}

// Save executes the query and returns the updated FilterConfig entity.
func (fcuo *FilterConfigUpdateOne) Save(ctx context.Context) (*FilterConfig, error) {
	var (
		err  error
		node *FilterConfig
	)
	if len(fcuo.hooks) == 0 {
		if err = fcuo.check(); err != nil {
			return nil, err
		}
		node, err = fcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilterConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fcuo.check(); err != nil {
				return nil, err
			}
			fcuo.mutation = mutation
			node, err = fcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fcuo.hooks) - 1; i >= 0; i-- {
			if fcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FilterConfig)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FilterConfigMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fcuo *FilterConfigUpdateOne) SaveX(ctx context.Context) *FilterConfig {
	node, err := fcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcuo *FilterConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := fcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcuo *FilterConfigUpdateOne) ExecX(ctx context.Context) {
	if err := fcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcuo *FilterConfigUpdateOne) check() error {
	if v, ok := fcuo.mutation.Name(); ok {
		if err := filterconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "FilterConfig.Name": %w`, err)}
		}
	}
	if v, ok := fcuo.mutation.Value(); ok {
		if err := filterconfig.ValueValidator(v); err != nil {
			return &ValidationError{Name: "Value", err: fmt.Errorf(`ent: validator failed for field "FilterConfig.Value": %w`, err)}
		}
	}
	if _, ok := fcuo.mutation.TenantID(); fcuo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FilterConfig.tenant"`)
	}
	if _, ok := fcuo.mutation.FilterID(); fcuo.mutation.FilterCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FilterConfig.filter"`)
	}
	return nil
}

func (fcuo *FilterConfigUpdateOne) sqlSave(ctx context.Context) (_node *FilterConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filterconfig.Table,
			Columns: filterconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filterconfig.FieldID,
			},
		},
	}
	id, ok := fcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FilterConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filterconfig.FieldID)
		for _, f := range fields {
			if !filterconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filterconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filterconfig.FieldName,
		})
	}
	if value, ok := fcuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filterconfig.FieldValue,
		})
	}
	if fcuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filterconfig.TenantTable,
			Columns: []string{filterconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filterconfig.TenantTable,
			Columns: []string{filterconfig.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fcuo.mutation.FilterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filterconfig.FilterTable,
			Columns: []string{filterconfig.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fcuo.mutation.FilterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filterconfig.FilterTable,
			Columns: []string{filterconfig.FilterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FilterConfig{config: fcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filterconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
