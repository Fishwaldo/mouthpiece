/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportrecipients"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
)

// DbGroupUpdate is the builder for updating DbGroup entities.
type DbGroupUpdate struct {
	config
	hooks    []Hook
	mutation *DbGroupMutation
}

// Where appends a list predicates to the DbGroupUpdate builder.
func (dgu *DbGroupUpdate) Where(ps ...predicate.DbGroup) *DbGroupUpdate {
	dgu.mutation.Where(ps...)
	return dgu
}

// SetTenantID sets the "tenant_id" field.
func (dgu *DbGroupUpdate) SetTenantID(i int) *DbGroupUpdate {
	dgu.mutation.SetTenantID(i)
	return dgu
}

// SetName sets the "Name" field.
func (dgu *DbGroupUpdate) SetName(s string) *DbGroupUpdate {
	dgu.mutation.SetName(s)
	return dgu
}

// SetDescription sets the "Description" field.
func (dgu *DbGroupUpdate) SetDescription(s string) *DbGroupUpdate {
	dgu.mutation.SetDescription(s)
	return dgu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dgu *DbGroupUpdate) SetNillableDescription(s *string) *DbGroupUpdate {
	if s != nil {
		dgu.SetDescription(*s)
	}
	return dgu
}

// ClearDescription clears the value of the "Description" field.
func (dgu *DbGroupUpdate) ClearDescription() *DbGroupUpdate {
	dgu.mutation.ClearDescription()
	return dgu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dgu *DbGroupUpdate) SetTenant(t *Tenant) *DbGroupUpdate {
	return dgu.SetTenantID(t.ID)
}

// AddTransportRecipientIDs adds the "TransportRecipients" edge to the DbTransportRecipients entity by IDs.
func (dgu *DbGroupUpdate) AddTransportRecipientIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.AddTransportRecipientIDs(ids...)
	return dgu
}

// AddTransportRecipients adds the "TransportRecipients" edges to the DbTransportRecipients entity.
func (dgu *DbGroupUpdate) AddTransportRecipients(d ...*DbTransportRecipients) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.AddTransportRecipientIDs(ids...)
}

// AddUserIDs adds the "users" edge to the DbUser entity by IDs.
func (dgu *DbGroupUpdate) AddUserIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.AddUserIDs(ids...)
	return dgu
}

// AddUsers adds the "users" edges to the DbUser entity.
func (dgu *DbGroupUpdate) AddUsers(d ...*DbUser) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.AddUserIDs(ids...)
}

// AddFilterIDs adds the "filters" edge to the DbFilter entity by IDs.
func (dgu *DbGroupUpdate) AddFilterIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.AddFilterIDs(ids...)
	return dgu
}

// AddFilters adds the "filters" edges to the DbFilter entity.
func (dgu *DbGroupUpdate) AddFilters(d ...*DbFilter) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.AddFilterIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the DbApp entity by IDs.
func (dgu *DbGroupUpdate) AddAppIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.AddAppIDs(ids...)
	return dgu
}

// AddApps adds the "apps" edges to the DbApp entity.
func (dgu *DbGroupUpdate) AddApps(d ...*DbApp) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.AddAppIDs(ids...)
}

// Mutation returns the DbGroupMutation object of the builder.
func (dgu *DbGroupUpdate) Mutation() *DbGroupMutation {
	return dgu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dgu *DbGroupUpdate) ClearTenant() *DbGroupUpdate {
	dgu.mutation.ClearTenant()
	return dgu
}

// ClearTransportRecipients clears all "TransportRecipients" edges to the DbTransportRecipients entity.
func (dgu *DbGroupUpdate) ClearTransportRecipients() *DbGroupUpdate {
	dgu.mutation.ClearTransportRecipients()
	return dgu
}

// RemoveTransportRecipientIDs removes the "TransportRecipients" edge to DbTransportRecipients entities by IDs.
func (dgu *DbGroupUpdate) RemoveTransportRecipientIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.RemoveTransportRecipientIDs(ids...)
	return dgu
}

// RemoveTransportRecipients removes "TransportRecipients" edges to DbTransportRecipients entities.
func (dgu *DbGroupUpdate) RemoveTransportRecipients(d ...*DbTransportRecipients) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.RemoveTransportRecipientIDs(ids...)
}

// ClearUsers clears all "users" edges to the DbUser entity.
func (dgu *DbGroupUpdate) ClearUsers() *DbGroupUpdate {
	dgu.mutation.ClearUsers()
	return dgu
}

// RemoveUserIDs removes the "users" edge to DbUser entities by IDs.
func (dgu *DbGroupUpdate) RemoveUserIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.RemoveUserIDs(ids...)
	return dgu
}

// RemoveUsers removes "users" edges to DbUser entities.
func (dgu *DbGroupUpdate) RemoveUsers(d ...*DbUser) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.RemoveUserIDs(ids...)
}

// ClearFilters clears all "filters" edges to the DbFilter entity.
func (dgu *DbGroupUpdate) ClearFilters() *DbGroupUpdate {
	dgu.mutation.ClearFilters()
	return dgu
}

// RemoveFilterIDs removes the "filters" edge to DbFilter entities by IDs.
func (dgu *DbGroupUpdate) RemoveFilterIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.RemoveFilterIDs(ids...)
	return dgu
}

// RemoveFilters removes "filters" edges to DbFilter entities.
func (dgu *DbGroupUpdate) RemoveFilters(d ...*DbFilter) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.RemoveFilterIDs(ids...)
}

// ClearApps clears all "apps" edges to the DbApp entity.
func (dgu *DbGroupUpdate) ClearApps() *DbGroupUpdate {
	dgu.mutation.ClearApps()
	return dgu
}

// RemoveAppIDs removes the "apps" edge to DbApp entities by IDs.
func (dgu *DbGroupUpdate) RemoveAppIDs(ids ...int) *DbGroupUpdate {
	dgu.mutation.RemoveAppIDs(ids...)
	return dgu
}

// RemoveApps removes "apps" edges to DbApp entities.
func (dgu *DbGroupUpdate) RemoveApps(d ...*DbApp) *DbGroupUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dgu.RemoveAppIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dgu *DbGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dgu.hooks) == 0 {
		if err = dgu.check(); err != nil {
			return 0, err
		}
		affected, err = dgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dgu.check(); err != nil {
				return 0, err
			}
			dgu.mutation = mutation
			affected, err = dgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dgu.hooks) - 1; i >= 0; i-- {
			if dgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dgu *DbGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := dgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dgu *DbGroupUpdate) Exec(ctx context.Context) error {
	_, err := dgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgu *DbGroupUpdate) ExecX(ctx context.Context) {
	if err := dgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dgu *DbGroupUpdate) check() error {
	if v, ok := dgu.mutation.Name(); ok {
		if err := dbgroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbGroup.Name": %w`, err)}
		}
	}
	if _, ok := dgu.mutation.TenantID(); dgu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbGroup.tenant"`)
	}
	return nil
}

func (dgu *DbGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbgroup.Table,
			Columns: dbgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbgroup.FieldID,
			},
		},
	}
	if ps := dgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dgu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbgroup.FieldName,
		})
	}
	if value, ok := dgu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbgroup.FieldDescription,
		})
	}
	if dgu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbgroup.FieldDescription,
		})
	}
	if dgu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbgroup.TenantTable,
			Columns: []string{dbgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbgroup.TenantTable,
			Columns: []string{dbgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dgu.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.RemovedTransportRecipientsIDs(); len(nodes) > 0 && !dgu.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.TransportRecipientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dgu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !dgu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dgu.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.RemovedFiltersIDs(); len(nodes) > 0 && !dgu.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dgu.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.RemovedAppsIDs(); len(nodes) > 0 && !dgu.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dgu.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DbGroupUpdateOne is the builder for updating a single DbGroup entity.
type DbGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbGroupMutation
}

// SetTenantID sets the "tenant_id" field.
func (dguo *DbGroupUpdateOne) SetTenantID(i int) *DbGroupUpdateOne {
	dguo.mutation.SetTenantID(i)
	return dguo
}

// SetName sets the "Name" field.
func (dguo *DbGroupUpdateOne) SetName(s string) *DbGroupUpdateOne {
	dguo.mutation.SetName(s)
	return dguo
}

// SetDescription sets the "Description" field.
func (dguo *DbGroupUpdateOne) SetDescription(s string) *DbGroupUpdateOne {
	dguo.mutation.SetDescription(s)
	return dguo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dguo *DbGroupUpdateOne) SetNillableDescription(s *string) *DbGroupUpdateOne {
	if s != nil {
		dguo.SetDescription(*s)
	}
	return dguo
}

// ClearDescription clears the value of the "Description" field.
func (dguo *DbGroupUpdateOne) ClearDescription() *DbGroupUpdateOne {
	dguo.mutation.ClearDescription()
	return dguo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dguo *DbGroupUpdateOne) SetTenant(t *Tenant) *DbGroupUpdateOne {
	return dguo.SetTenantID(t.ID)
}

// AddTransportRecipientIDs adds the "TransportRecipients" edge to the DbTransportRecipients entity by IDs.
func (dguo *DbGroupUpdateOne) AddTransportRecipientIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.AddTransportRecipientIDs(ids...)
	return dguo
}

// AddTransportRecipients adds the "TransportRecipients" edges to the DbTransportRecipients entity.
func (dguo *DbGroupUpdateOne) AddTransportRecipients(d ...*DbTransportRecipients) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.AddTransportRecipientIDs(ids...)
}

// AddUserIDs adds the "users" edge to the DbUser entity by IDs.
func (dguo *DbGroupUpdateOne) AddUserIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.AddUserIDs(ids...)
	return dguo
}

// AddUsers adds the "users" edges to the DbUser entity.
func (dguo *DbGroupUpdateOne) AddUsers(d ...*DbUser) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.AddUserIDs(ids...)
}

// AddFilterIDs adds the "filters" edge to the DbFilter entity by IDs.
func (dguo *DbGroupUpdateOne) AddFilterIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.AddFilterIDs(ids...)
	return dguo
}

// AddFilters adds the "filters" edges to the DbFilter entity.
func (dguo *DbGroupUpdateOne) AddFilters(d ...*DbFilter) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.AddFilterIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the DbApp entity by IDs.
func (dguo *DbGroupUpdateOne) AddAppIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.AddAppIDs(ids...)
	return dguo
}

// AddApps adds the "apps" edges to the DbApp entity.
func (dguo *DbGroupUpdateOne) AddApps(d ...*DbApp) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.AddAppIDs(ids...)
}

// Mutation returns the DbGroupMutation object of the builder.
func (dguo *DbGroupUpdateOne) Mutation() *DbGroupMutation {
	return dguo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dguo *DbGroupUpdateOne) ClearTenant() *DbGroupUpdateOne {
	dguo.mutation.ClearTenant()
	return dguo
}

// ClearTransportRecipients clears all "TransportRecipients" edges to the DbTransportRecipients entity.
func (dguo *DbGroupUpdateOne) ClearTransportRecipients() *DbGroupUpdateOne {
	dguo.mutation.ClearTransportRecipients()
	return dguo
}

// RemoveTransportRecipientIDs removes the "TransportRecipients" edge to DbTransportRecipients entities by IDs.
func (dguo *DbGroupUpdateOne) RemoveTransportRecipientIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.RemoveTransportRecipientIDs(ids...)
	return dguo
}

// RemoveTransportRecipients removes "TransportRecipients" edges to DbTransportRecipients entities.
func (dguo *DbGroupUpdateOne) RemoveTransportRecipients(d ...*DbTransportRecipients) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.RemoveTransportRecipientIDs(ids...)
}

// ClearUsers clears all "users" edges to the DbUser entity.
func (dguo *DbGroupUpdateOne) ClearUsers() *DbGroupUpdateOne {
	dguo.mutation.ClearUsers()
	return dguo
}

// RemoveUserIDs removes the "users" edge to DbUser entities by IDs.
func (dguo *DbGroupUpdateOne) RemoveUserIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.RemoveUserIDs(ids...)
	return dguo
}

// RemoveUsers removes "users" edges to DbUser entities.
func (dguo *DbGroupUpdateOne) RemoveUsers(d ...*DbUser) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.RemoveUserIDs(ids...)
}

// ClearFilters clears all "filters" edges to the DbFilter entity.
func (dguo *DbGroupUpdateOne) ClearFilters() *DbGroupUpdateOne {
	dguo.mutation.ClearFilters()
	return dguo
}

// RemoveFilterIDs removes the "filters" edge to DbFilter entities by IDs.
func (dguo *DbGroupUpdateOne) RemoveFilterIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.RemoveFilterIDs(ids...)
	return dguo
}

// RemoveFilters removes "filters" edges to DbFilter entities.
func (dguo *DbGroupUpdateOne) RemoveFilters(d ...*DbFilter) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.RemoveFilterIDs(ids...)
}

// ClearApps clears all "apps" edges to the DbApp entity.
func (dguo *DbGroupUpdateOne) ClearApps() *DbGroupUpdateOne {
	dguo.mutation.ClearApps()
	return dguo
}

// RemoveAppIDs removes the "apps" edge to DbApp entities by IDs.
func (dguo *DbGroupUpdateOne) RemoveAppIDs(ids ...int) *DbGroupUpdateOne {
	dguo.mutation.RemoveAppIDs(ids...)
	return dguo
}

// RemoveApps removes "apps" edges to DbApp entities.
func (dguo *DbGroupUpdateOne) RemoveApps(d ...*DbApp) *DbGroupUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dguo.RemoveAppIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dguo *DbGroupUpdateOne) Select(field string, fields ...string) *DbGroupUpdateOne {
	dguo.fields = append([]string{field}, fields...)
	return dguo
}

// Save executes the query and returns the updated DbGroup entity.
func (dguo *DbGroupUpdateOne) Save(ctx context.Context) (*DbGroup, error) {
	var (
		err  error
		node *DbGroup
	)
	if len(dguo.hooks) == 0 {
		if err = dguo.check(); err != nil {
			return nil, err
		}
		node, err = dguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dguo.check(); err != nil {
				return nil, err
			}
			dguo.mutation = mutation
			node, err = dguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dguo.hooks) - 1; i >= 0; i-- {
			if dguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dguo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dguo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbGroup)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbGroupMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dguo *DbGroupUpdateOne) SaveX(ctx context.Context) *DbGroup {
	node, err := dguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dguo *DbGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := dguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dguo *DbGroupUpdateOne) ExecX(ctx context.Context) {
	if err := dguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dguo *DbGroupUpdateOne) check() error {
	if v, ok := dguo.mutation.Name(); ok {
		if err := dbgroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbGroup.Name": %w`, err)}
		}
	}
	if _, ok := dguo.mutation.TenantID(); dguo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbGroup.tenant"`)
	}
	return nil
}

func (dguo *DbGroupUpdateOne) sqlSave(ctx context.Context) (_node *DbGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbgroup.Table,
			Columns: dbgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbgroup.FieldID,
			},
		},
	}
	id, ok := dguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbgroup.FieldID)
		for _, f := range fields {
			if !dbgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dguo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbgroup.FieldName,
		})
	}
	if value, ok := dguo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbgroup.FieldDescription,
		})
	}
	if dguo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbgroup.FieldDescription,
		})
	}
	if dguo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbgroup.TenantTable,
			Columns: []string{dbgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbgroup.TenantTable,
			Columns: []string{dbgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dguo.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.RemovedTransportRecipientsIDs(); len(nodes) > 0 && !dguo.mutation.TransportRecipientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.TransportRecipientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportrecipients.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dguo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !dguo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dguo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.RemovedFiltersIDs(); len(nodes) > 0 && !dguo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dguo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.RemovedAppsIDs(); len(nodes) > 0 && !dguo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dguo.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DbGroup{config: dguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
