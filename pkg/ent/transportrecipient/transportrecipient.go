/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package transportrecipient

import (
	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the transportrecipient type in the database.
	Label = "transport_recipient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeTransportInstance holds the string denoting the transportinstance edge name in mutations.
	EdgeTransportInstance = "TransportInstance"
	// EdgeAppRecipient holds the string denoting the apprecipient edge name in mutations.
	EdgeAppRecipient = "AppRecipient"
	// EdgeGroupRecipient holds the string denoting the grouprecipient edge name in mutations.
	EdgeGroupRecipient = "GroupRecipient"
	// EdgeUserRecipient holds the string denoting the userrecipient edge name in mutations.
	EdgeUserRecipient = "UserRecipient"
	// Table holds the table name of the transportrecipient in the database.
	Table = "transport_recipients"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "transport_recipients"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// TransportInstanceTable is the table that holds the TransportInstance relation/edge.
	TransportInstanceTable = "transport_recipients"
	// TransportInstanceInverseTable is the table name for the TransportInstance entity.
	// It exists in this package in order to avoid circular dependency with the "transportinstance" package.
	TransportInstanceInverseTable = "transport_instances"
	// TransportInstanceColumn is the table column denoting the TransportInstance relation/edge.
	TransportInstanceColumn = "transport_instance_transport_recipients"
	// AppRecipientTable is the table that holds the AppRecipient relation/edge. The primary key declared below.
	AppRecipientTable = "app_TransportRecipients"
	// AppRecipientInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppRecipientInverseTable = "apps"
	// GroupRecipientTable is the table that holds the GroupRecipient relation/edge. The primary key declared below.
	GroupRecipientTable = "group_TransportRecipients"
	// GroupRecipientInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupRecipientInverseTable = "groups"
	// UserRecipientTable is the table that holds the UserRecipient relation/edge. The primary key declared below.
	UserRecipientTable = "user_TransportRecipients"
	// UserRecipientInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserRecipientInverseTable = "users"
)

// Columns holds all SQL columns for transportrecipient fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transport_recipients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"transport_instance_transport_recipients",
}

var (
	// AppRecipientPrimaryKey and AppRecipientColumn2 are the table columns denoting the
	// primary key for the AppRecipient relation (M2M).
	AppRecipientPrimaryKey = []string{"app_id", "transport_recipient_id"}
	// GroupRecipientPrimaryKey and GroupRecipientColumn2 are the table columns denoting the
	// primary key for the GroupRecipient relation (M2M).
	GroupRecipientPrimaryKey = []string{"group_id", "transport_recipient_id"}
	// UserRecipientPrimaryKey and UserRecipientColumn2 are the table columns denoting the
	// primary key for the UserRecipient relation (M2M).
	UserRecipientPrimaryKey = []string{"user_id", "transport_recipient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/Fishwaldo/mouthpiece/pkg/ent/runtime"
//
var (
	Hooks  [3]ent.Hook
	Policy ent.Policy
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "Description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
)
