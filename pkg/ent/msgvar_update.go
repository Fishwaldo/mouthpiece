/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/message"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/msgvar"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/google/uuid"
)

// MsgVarUpdate is the builder for updating MsgVar entities.
type MsgVarUpdate struct {
	config
	hooks    []Hook
	mutation *MsgVarMutation
}

// Where appends a list predicates to the MsgVarUpdate builder.
func (mvu *MsgVarUpdate) Where(ps ...predicate.MsgVar) *MsgVarUpdate {
	mvu.mutation.Where(ps...)
	return mvu
}

// SetTenantID sets the "tenant_id" field.
func (mvu *MsgVarUpdate) SetTenantID(i int) *MsgVarUpdate {
	mvu.mutation.SetTenantID(i)
	return mvu
}

// SetName sets the "Name" field.
func (mvu *MsgVarUpdate) SetName(s string) *MsgVarUpdate {
	mvu.mutation.SetName(s)
	return mvu
}

// SetValue sets the "Value" field.
func (mvu *MsgVarUpdate) SetValue(s string) *MsgVarUpdate {
	mvu.mutation.SetValue(s)
	return mvu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (mvu *MsgVarUpdate) SetTenant(t *Tenant) *MsgVarUpdate {
	return mvu.SetTenantID(t.ID)
}

// SetOwnerID sets the "owner" edge to the Message entity by ID.
func (mvu *MsgVarUpdate) SetOwnerID(id uuid.UUID) *MsgVarUpdate {
	mvu.mutation.SetOwnerID(id)
	return mvu
}

// SetOwner sets the "owner" edge to the Message entity.
func (mvu *MsgVarUpdate) SetOwner(m *Message) *MsgVarUpdate {
	return mvu.SetOwnerID(m.ID)
}

// Mutation returns the MsgVarMutation object of the builder.
func (mvu *MsgVarUpdate) Mutation() *MsgVarMutation {
	return mvu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (mvu *MsgVarUpdate) ClearTenant() *MsgVarUpdate {
	mvu.mutation.ClearTenant()
	return mvu
}

// ClearOwner clears the "owner" edge to the Message entity.
func (mvu *MsgVarUpdate) ClearOwner() *MsgVarUpdate {
	mvu.mutation.ClearOwner()
	return mvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mvu *MsgVarUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mvu.hooks) == 0 {
		if err = mvu.check(); err != nil {
			return 0, err
		}
		affected, err = mvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MsgVarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mvu.check(); err != nil {
				return 0, err
			}
			mvu.mutation = mutation
			affected, err = mvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mvu.hooks) - 1; i >= 0; i-- {
			if mvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mvu *MsgVarUpdate) SaveX(ctx context.Context) int {
	affected, err := mvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mvu *MsgVarUpdate) Exec(ctx context.Context) error {
	_, err := mvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvu *MsgVarUpdate) ExecX(ctx context.Context) {
	if err := mvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvu *MsgVarUpdate) check() error {
	if v, ok := mvu.mutation.Name(); ok {
		if err := msgvar.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "MsgVar.Name": %w`, err)}
		}
	}
	if v, ok := mvu.mutation.Value(); ok {
		if err := msgvar.ValueValidator(v); err != nil {
			return &ValidationError{Name: "Value", err: fmt.Errorf(`ent: validator failed for field "MsgVar.Value": %w`, err)}
		}
	}
	if _, ok := mvu.mutation.TenantID(); mvu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MsgVar.tenant"`)
	}
	if _, ok := mvu.mutation.OwnerID(); mvu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MsgVar.owner"`)
	}
	return nil
}

func (mvu *MsgVarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   msgvar.Table,
			Columns: msgvar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: msgvar.FieldID,
			},
		},
	}
	if ps := mvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgvar.FieldName,
		})
	}
	if value, ok := mvu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgvar.FieldValue,
		})
	}
	if mvu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   msgvar.TenantTable,
			Columns: []string{msgvar.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   msgvar.TenantTable,
			Columns: []string{msgvar.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgvar.OwnerTable,
			Columns: []string{msgvar.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgvar.OwnerTable,
			Columns: []string{msgvar.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgvar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MsgVarUpdateOne is the builder for updating a single MsgVar entity.
type MsgVarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgVarMutation
}

// SetTenantID sets the "tenant_id" field.
func (mvuo *MsgVarUpdateOne) SetTenantID(i int) *MsgVarUpdateOne {
	mvuo.mutation.SetTenantID(i)
	return mvuo
}

// SetName sets the "Name" field.
func (mvuo *MsgVarUpdateOne) SetName(s string) *MsgVarUpdateOne {
	mvuo.mutation.SetName(s)
	return mvuo
}

// SetValue sets the "Value" field.
func (mvuo *MsgVarUpdateOne) SetValue(s string) *MsgVarUpdateOne {
	mvuo.mutation.SetValue(s)
	return mvuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (mvuo *MsgVarUpdateOne) SetTenant(t *Tenant) *MsgVarUpdateOne {
	return mvuo.SetTenantID(t.ID)
}

// SetOwnerID sets the "owner" edge to the Message entity by ID.
func (mvuo *MsgVarUpdateOne) SetOwnerID(id uuid.UUID) *MsgVarUpdateOne {
	mvuo.mutation.SetOwnerID(id)
	return mvuo
}

// SetOwner sets the "owner" edge to the Message entity.
func (mvuo *MsgVarUpdateOne) SetOwner(m *Message) *MsgVarUpdateOne {
	return mvuo.SetOwnerID(m.ID)
}

// Mutation returns the MsgVarMutation object of the builder.
func (mvuo *MsgVarUpdateOne) Mutation() *MsgVarMutation {
	return mvuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (mvuo *MsgVarUpdateOne) ClearTenant() *MsgVarUpdateOne {
	mvuo.mutation.ClearTenant()
	return mvuo
}

// ClearOwner clears the "owner" edge to the Message entity.
func (mvuo *MsgVarUpdateOne) ClearOwner() *MsgVarUpdateOne {
	mvuo.mutation.ClearOwner()
	return mvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mvuo *MsgVarUpdateOne) Select(field string, fields ...string) *MsgVarUpdateOne {
	mvuo.fields = append([]string{field}, fields...)
	return mvuo
}

// Save executes the query and returns the updated MsgVar entity.
func (mvuo *MsgVarUpdateOne) Save(ctx context.Context) (*MsgVar, error) {
	var (
		err  error
		node *MsgVar
	)
	if len(mvuo.hooks) == 0 {
		if err = mvuo.check(); err != nil {
			return nil, err
		}
		node, err = mvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MsgVarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mvuo.check(); err != nil {
				return nil, err
			}
			mvuo.mutation = mutation
			node, err = mvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mvuo.hooks) - 1; i >= 0; i-- {
			if mvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mvuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mvuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MsgVar)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MsgVarMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mvuo *MsgVarUpdateOne) SaveX(ctx context.Context) *MsgVar {
	node, err := mvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mvuo *MsgVarUpdateOne) Exec(ctx context.Context) error {
	_, err := mvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvuo *MsgVarUpdateOne) ExecX(ctx context.Context) {
	if err := mvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvuo *MsgVarUpdateOne) check() error {
	if v, ok := mvuo.mutation.Name(); ok {
		if err := msgvar.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "MsgVar.Name": %w`, err)}
		}
	}
	if v, ok := mvuo.mutation.Value(); ok {
		if err := msgvar.ValueValidator(v); err != nil {
			return &ValidationError{Name: "Value", err: fmt.Errorf(`ent: validator failed for field "MsgVar.Value": %w`, err)}
		}
	}
	if _, ok := mvuo.mutation.TenantID(); mvuo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MsgVar.tenant"`)
	}
	if _, ok := mvuo.mutation.OwnerID(); mvuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MsgVar.owner"`)
	}
	return nil
}

func (mvuo *MsgVarUpdateOne) sqlSave(ctx context.Context) (_node *MsgVar, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   msgvar.Table,
			Columns: msgvar.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: msgvar.FieldID,
			},
		},
	}
	id, ok := mvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgVar.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgvar.FieldID)
		for _, f := range fields {
			if !msgvar.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgvar.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgvar.FieldName,
		})
	}
	if value, ok := mvuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msgvar.FieldValue,
		})
	}
	if mvuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   msgvar.TenantTable,
			Columns: []string{msgvar.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   msgvar.TenantTable,
			Columns: []string{msgvar.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgvar.OwnerTable,
			Columns: []string{msgvar.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   msgvar.OwnerTable,
			Columns: []string{msgvar.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MsgVar{config: mvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgvar.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
