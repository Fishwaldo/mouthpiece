/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportinstances"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// DbTransportInstances is the model entity for the DbTransportInstances schema.
type DbTransportInstances struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the Transport Instance`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty" doc:"Description of the Transport Instance`
	// Config holds the value of the "Config" field.
	Config string `json:"Config,omitempty" doc:"Config of the Transport Instance`
	// TransportProvider holds the value of the "TransportProvider" field.
	TransportProvider string `json:"TransportProvider,omitempty" doc:"The Transport Provider`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbTransportInstancesQuery when eager-loading is set.
	Edges DbTransportInstancesEdges `json:"edges"`
}

// DbTransportInstancesEdges holds the relations/edges for other nodes in the graph.
type DbTransportInstancesEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// TransportRecipients holds the value of the TransportRecipients edge.
	TransportRecipients []*DbTransportRecipients `json:"TransportRecipients,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbTransportInstancesEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// TransportRecipientsOrErr returns the TransportRecipients value or an error if the edge
// was not loaded in eager-loading.
func (e DbTransportInstancesEdges) TransportRecipientsOrErr() ([]*DbTransportRecipients, error) {
	if e.loadedTypes[1] {
		return e.TransportRecipients, nil
	}
	return nil, &NotLoadedError{edge: "TransportRecipients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbTransportInstances) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbtransportinstances.FieldID, dbtransportinstances.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case dbtransportinstances.FieldName, dbtransportinstances.FieldDescription, dbtransportinstances.FieldConfig, dbtransportinstances.FieldTransportProvider:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbTransportInstances", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbTransportInstances fields.
func (dti *DbTransportInstances) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbtransportinstances.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dti.ID = int(value.Int64)
		case dbtransportinstances.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				dti.TenantID = int(value.Int64)
			}
		case dbtransportinstances.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				dti.Name = value.String
			}
		case dbtransportinstances.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				dti.Description = value.String
			}
		case dbtransportinstances.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Config", values[i])
			} else if value.Valid {
				dti.Config = value.String
			}
		case dbtransportinstances.FieldTransportProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TransportProvider", values[i])
			} else if value.Valid {
				dti.TransportProvider = value.String
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the DbTransportInstances entity.
func (dti *DbTransportInstances) QueryTenant() *TenantQuery {
	return (&DbTransportInstancesClient{config: dti.config}).QueryTenant(dti)
}

// QueryTransportRecipients queries the "TransportRecipients" edge of the DbTransportInstances entity.
func (dti *DbTransportInstances) QueryTransportRecipients() *DbTransportRecipientsQuery {
	return (&DbTransportInstancesClient{config: dti.config}).QueryTransportRecipients(dti)
}

// Update returns a builder for updating this DbTransportInstances.
// Note that you need to call DbTransportInstances.Unwrap() before calling this method if this DbTransportInstances
// was returned from a transaction, and the transaction was committed or rolled back.
func (dti *DbTransportInstances) Update() *DbTransportInstancesUpdateOne {
	return (&DbTransportInstancesClient{config: dti.config}).UpdateOne(dti)
}

// Unwrap unwraps the DbTransportInstances entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dti *DbTransportInstances) Unwrap() *DbTransportInstances {
	_tx, ok := dti.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbTransportInstances is not a transactional entity")
	}
	dti.config.driver = _tx.drv
	return dti
}

// String implements the fmt.Stringer.
func (dti *DbTransportInstances) String() string {
	var builder strings.Builder
	builder.WriteString("DbTransportInstances(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dti.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dti.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(dti.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(dti.Description)
	builder.WriteString(", ")
	builder.WriteString("Config=")
	builder.WriteString(dti.Config)
	builder.WriteString(", ")
	builder.WriteString("TransportProvider=")
	builder.WriteString(dti.TransportProvider)
	builder.WriteByte(')')
	return builder.String()
}

func (dti *DbTransportInstances) ValidateDbTransportInstances() error {
	if err := validate.Get().Struct(dti); err != nil {
		return err
	}
	return nil
}

// DbTransportInstancesSlice is a parsable slice of DbTransportInstances.
type DbTransportInstancesSlice []*DbTransportInstances

func (dti DbTransportInstancesSlice) config(cfg config) {
	for _i := range dti {
		dti[_i].config = cfg
	}
}
