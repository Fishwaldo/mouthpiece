/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbmessage"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	"github.com/google/uuid"
)

// DbAppUpdate is the builder for updating DbApp entities.
type DbAppUpdate struct {
	config
	hooks    []Hook
	mutation *DbAppMutation
}

// Where appends a list predicates to the DbAppUpdate builder.
func (dau *DbAppUpdate) Where(ps ...predicate.DbApp) *DbAppUpdate {
	dau.mutation.Where(ps...)
	return dau
}

// SetTenantID sets the "tenant_id" field.
func (dau *DbAppUpdate) SetTenantID(i int) *DbAppUpdate {
	dau.mutation.SetTenantID(i)
	return dau
}

// SetName sets the "Name" field.
func (dau *DbAppUpdate) SetName(s string) *DbAppUpdate {
	dau.mutation.SetName(s)
	return dau
}

// SetStatus sets the "Status" field.
func (dau *DbAppUpdate) SetStatus(is interfaces.AppStatus) *DbAppUpdate {
	dau.mutation.SetStatus(is)
	return dau
}

// SetDescription sets the "Description" field.
func (dau *DbAppUpdate) SetDescription(s string) *DbAppUpdate {
	dau.mutation.SetDescription(s)
	return dau
}

// SetIcon sets the "icon" field.
func (dau *DbAppUpdate) SetIcon(s string) *DbAppUpdate {
	dau.mutation.SetIcon(s)
	return dau
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (dau *DbAppUpdate) SetNillableIcon(s *string) *DbAppUpdate {
	if s != nil {
		dau.SetIcon(*s)
	}
	return dau
}

// ClearIcon clears the value of the "icon" field.
func (dau *DbAppUpdate) ClearIcon() *DbAppUpdate {
	dau.mutation.ClearIcon()
	return dau
}

// SetURL sets the "url" field.
func (dau *DbAppUpdate) SetURL(s string) *DbAppUpdate {
	dau.mutation.SetURL(s)
	return dau
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (dau *DbAppUpdate) SetNillableURL(s *string) *DbAppUpdate {
	if s != nil {
		dau.SetURL(*s)
	}
	return dau
}

// ClearURL clears the value of the "url" field.
func (dau *DbAppUpdate) ClearURL() *DbAppUpdate {
	dau.mutation.ClearURL()
	return dau
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dau *DbAppUpdate) SetTenant(t *Tenant) *DbAppUpdate {
	return dau.SetTenantID(t.ID)
}

// AddMessageIDs adds the "messages" edge to the DbMessage entity by IDs.
func (dau *DbAppUpdate) AddMessageIDs(ids ...uuid.UUID) *DbAppUpdate {
	dau.mutation.AddMessageIDs(ids...)
	return dau
}

// AddMessages adds the "messages" edges to the DbMessage entity.
func (dau *DbAppUpdate) AddMessages(d ...*DbMessage) *DbAppUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dau.AddMessageIDs(ids...)
}

// AddFilterIDs adds the "filters" edge to the DbFilter entity by IDs.
func (dau *DbAppUpdate) AddFilterIDs(ids ...int) *DbAppUpdate {
	dau.mutation.AddFilterIDs(ids...)
	return dau
}

// AddFilters adds the "filters" edges to the DbFilter entity.
func (dau *DbAppUpdate) AddFilters(d ...*DbFilter) *DbAppUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dau.AddFilterIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the DbGroup entity by IDs.
func (dau *DbAppUpdate) AddGroupIDs(ids ...int) *DbAppUpdate {
	dau.mutation.AddGroupIDs(ids...)
	return dau
}

// AddGroups adds the "groups" edges to the DbGroup entity.
func (dau *DbAppUpdate) AddGroups(d ...*DbGroup) *DbAppUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dau.AddGroupIDs(ids...)
}

// Mutation returns the DbAppMutation object of the builder.
func (dau *DbAppUpdate) Mutation() *DbAppMutation {
	return dau.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dau *DbAppUpdate) ClearTenant() *DbAppUpdate {
	dau.mutation.ClearTenant()
	return dau
}

// ClearMessages clears all "messages" edges to the DbMessage entity.
func (dau *DbAppUpdate) ClearMessages() *DbAppUpdate {
	dau.mutation.ClearMessages()
	return dau
}

// RemoveMessageIDs removes the "messages" edge to DbMessage entities by IDs.
func (dau *DbAppUpdate) RemoveMessageIDs(ids ...uuid.UUID) *DbAppUpdate {
	dau.mutation.RemoveMessageIDs(ids...)
	return dau
}

// RemoveMessages removes "messages" edges to DbMessage entities.
func (dau *DbAppUpdate) RemoveMessages(d ...*DbMessage) *DbAppUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dau.RemoveMessageIDs(ids...)
}

// ClearFilters clears all "filters" edges to the DbFilter entity.
func (dau *DbAppUpdate) ClearFilters() *DbAppUpdate {
	dau.mutation.ClearFilters()
	return dau
}

// RemoveFilterIDs removes the "filters" edge to DbFilter entities by IDs.
func (dau *DbAppUpdate) RemoveFilterIDs(ids ...int) *DbAppUpdate {
	dau.mutation.RemoveFilterIDs(ids...)
	return dau
}

// RemoveFilters removes "filters" edges to DbFilter entities.
func (dau *DbAppUpdate) RemoveFilters(d ...*DbFilter) *DbAppUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dau.RemoveFilterIDs(ids...)
}

// ClearGroups clears all "groups" edges to the DbGroup entity.
func (dau *DbAppUpdate) ClearGroups() *DbAppUpdate {
	dau.mutation.ClearGroups()
	return dau
}

// RemoveGroupIDs removes the "groups" edge to DbGroup entities by IDs.
func (dau *DbAppUpdate) RemoveGroupIDs(ids ...int) *DbAppUpdate {
	dau.mutation.RemoveGroupIDs(ids...)
	return dau
}

// RemoveGroups removes "groups" edges to DbGroup entities.
func (dau *DbAppUpdate) RemoveGroups(d ...*DbGroup) *DbAppUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dau.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DbAppUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dau.hooks) == 0 {
		if err = dau.check(); err != nil {
			return 0, err
		}
		affected, err = dau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dau.check(); err != nil {
				return 0, err
			}
			dau.mutation = mutation
			affected, err = dau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dau.hooks) - 1; i >= 0; i-- {
			if dau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DbAppUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DbAppUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DbAppUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dau *DbAppUpdate) check() error {
	if v, ok := dau.mutation.Name(); ok {
		if err := dbapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbApp.Name": %w`, err)}
		}
	}
	if v, ok := dau.mutation.Status(); ok {
		if err := dbapp.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`ent: validator failed for field "DbApp.Status": %w`, err)}
		}
	}
	if v, ok := dau.mutation.Description(); ok {
		if err := dbapp.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "DbApp.Description": %w`, err)}
		}
	}
	if v, ok := dau.mutation.Icon(); ok {
		if err := dbapp.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "DbApp.icon": %w`, err)}
		}
	}
	if v, ok := dau.mutation.URL(); ok {
		if err := dbapp.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "DbApp.url": %w`, err)}
		}
	}
	if _, ok := dau.mutation.TenantID(); dau.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbApp.tenant"`)
	}
	return nil
}

func (dau *DbAppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbapp.Table,
			Columns: dbapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbapp.FieldID,
			},
		},
	}
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldName,
		})
	}
	if value, ok := dau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: dbapp.FieldStatus,
		})
	}
	if value, ok := dau.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldDescription,
		})
	}
	if value, ok := dau.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldIcon,
		})
	}
	if dau.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbapp.FieldIcon,
		})
	}
	if value, ok := dau.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldURL,
		})
	}
	if dau.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbapp.FieldURL,
		})
	}
	if dau.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbapp.TenantTable,
			Columns: []string{dbapp.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbapp.TenantTable,
			Columns: []string{dbapp.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dau.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dbmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dau.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dbmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dbmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dau.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.RemovedFiltersIDs(); len(nodes) > 0 && !dau.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dau.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !dau.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DbAppUpdateOne is the builder for updating a single DbApp entity.
type DbAppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbAppMutation
}

// SetTenantID sets the "tenant_id" field.
func (dauo *DbAppUpdateOne) SetTenantID(i int) *DbAppUpdateOne {
	dauo.mutation.SetTenantID(i)
	return dauo
}

// SetName sets the "Name" field.
func (dauo *DbAppUpdateOne) SetName(s string) *DbAppUpdateOne {
	dauo.mutation.SetName(s)
	return dauo
}

// SetStatus sets the "Status" field.
func (dauo *DbAppUpdateOne) SetStatus(is interfaces.AppStatus) *DbAppUpdateOne {
	dauo.mutation.SetStatus(is)
	return dauo
}

// SetDescription sets the "Description" field.
func (dauo *DbAppUpdateOne) SetDescription(s string) *DbAppUpdateOne {
	dauo.mutation.SetDescription(s)
	return dauo
}

// SetIcon sets the "icon" field.
func (dauo *DbAppUpdateOne) SetIcon(s string) *DbAppUpdateOne {
	dauo.mutation.SetIcon(s)
	return dauo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (dauo *DbAppUpdateOne) SetNillableIcon(s *string) *DbAppUpdateOne {
	if s != nil {
		dauo.SetIcon(*s)
	}
	return dauo
}

// ClearIcon clears the value of the "icon" field.
func (dauo *DbAppUpdateOne) ClearIcon() *DbAppUpdateOne {
	dauo.mutation.ClearIcon()
	return dauo
}

// SetURL sets the "url" field.
func (dauo *DbAppUpdateOne) SetURL(s string) *DbAppUpdateOne {
	dauo.mutation.SetURL(s)
	return dauo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (dauo *DbAppUpdateOne) SetNillableURL(s *string) *DbAppUpdateOne {
	if s != nil {
		dauo.SetURL(*s)
	}
	return dauo
}

// ClearURL clears the value of the "url" field.
func (dauo *DbAppUpdateOne) ClearURL() *DbAppUpdateOne {
	dauo.mutation.ClearURL()
	return dauo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dauo *DbAppUpdateOne) SetTenant(t *Tenant) *DbAppUpdateOne {
	return dauo.SetTenantID(t.ID)
}

// AddMessageIDs adds the "messages" edge to the DbMessage entity by IDs.
func (dauo *DbAppUpdateOne) AddMessageIDs(ids ...uuid.UUID) *DbAppUpdateOne {
	dauo.mutation.AddMessageIDs(ids...)
	return dauo
}

// AddMessages adds the "messages" edges to the DbMessage entity.
func (dauo *DbAppUpdateOne) AddMessages(d ...*DbMessage) *DbAppUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dauo.AddMessageIDs(ids...)
}

// AddFilterIDs adds the "filters" edge to the DbFilter entity by IDs.
func (dauo *DbAppUpdateOne) AddFilterIDs(ids ...int) *DbAppUpdateOne {
	dauo.mutation.AddFilterIDs(ids...)
	return dauo
}

// AddFilters adds the "filters" edges to the DbFilter entity.
func (dauo *DbAppUpdateOne) AddFilters(d ...*DbFilter) *DbAppUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dauo.AddFilterIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the DbGroup entity by IDs.
func (dauo *DbAppUpdateOne) AddGroupIDs(ids ...int) *DbAppUpdateOne {
	dauo.mutation.AddGroupIDs(ids...)
	return dauo
}

// AddGroups adds the "groups" edges to the DbGroup entity.
func (dauo *DbAppUpdateOne) AddGroups(d ...*DbGroup) *DbAppUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dauo.AddGroupIDs(ids...)
}

// Mutation returns the DbAppMutation object of the builder.
func (dauo *DbAppUpdateOne) Mutation() *DbAppMutation {
	return dauo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dauo *DbAppUpdateOne) ClearTenant() *DbAppUpdateOne {
	dauo.mutation.ClearTenant()
	return dauo
}

// ClearMessages clears all "messages" edges to the DbMessage entity.
func (dauo *DbAppUpdateOne) ClearMessages() *DbAppUpdateOne {
	dauo.mutation.ClearMessages()
	return dauo
}

// RemoveMessageIDs removes the "messages" edge to DbMessage entities by IDs.
func (dauo *DbAppUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *DbAppUpdateOne {
	dauo.mutation.RemoveMessageIDs(ids...)
	return dauo
}

// RemoveMessages removes "messages" edges to DbMessage entities.
func (dauo *DbAppUpdateOne) RemoveMessages(d ...*DbMessage) *DbAppUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dauo.RemoveMessageIDs(ids...)
}

// ClearFilters clears all "filters" edges to the DbFilter entity.
func (dauo *DbAppUpdateOne) ClearFilters() *DbAppUpdateOne {
	dauo.mutation.ClearFilters()
	return dauo
}

// RemoveFilterIDs removes the "filters" edge to DbFilter entities by IDs.
func (dauo *DbAppUpdateOne) RemoveFilterIDs(ids ...int) *DbAppUpdateOne {
	dauo.mutation.RemoveFilterIDs(ids...)
	return dauo
}

// RemoveFilters removes "filters" edges to DbFilter entities.
func (dauo *DbAppUpdateOne) RemoveFilters(d ...*DbFilter) *DbAppUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dauo.RemoveFilterIDs(ids...)
}

// ClearGroups clears all "groups" edges to the DbGroup entity.
func (dauo *DbAppUpdateOne) ClearGroups() *DbAppUpdateOne {
	dauo.mutation.ClearGroups()
	return dauo
}

// RemoveGroupIDs removes the "groups" edge to DbGroup entities by IDs.
func (dauo *DbAppUpdateOne) RemoveGroupIDs(ids ...int) *DbAppUpdateOne {
	dauo.mutation.RemoveGroupIDs(ids...)
	return dauo
}

// RemoveGroups removes "groups" edges to DbGroup entities.
func (dauo *DbAppUpdateOne) RemoveGroups(d ...*DbGroup) *DbAppUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dauo.RemoveGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DbAppUpdateOne) Select(field string, fields ...string) *DbAppUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DbApp entity.
func (dauo *DbAppUpdateOne) Save(ctx context.Context) (*DbApp, error) {
	var (
		err  error
		node *DbApp
	)
	if len(dauo.hooks) == 0 {
		if err = dauo.check(); err != nil {
			return nil, err
		}
		node, err = dauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbAppMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dauo.check(); err != nil {
				return nil, err
			}
			dauo.mutation = mutation
			node, err = dauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dauo.hooks) - 1; i >= 0; i-- {
			if dauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbApp)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbAppMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DbAppUpdateOne) SaveX(ctx context.Context) *DbApp {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DbAppUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DbAppUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dauo *DbAppUpdateOne) check() error {
	if v, ok := dauo.mutation.Name(); ok {
		if err := dbapp.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbApp.Name": %w`, err)}
		}
	}
	if v, ok := dauo.mutation.Status(); ok {
		if err := dbapp.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`ent: validator failed for field "DbApp.Status": %w`, err)}
		}
	}
	if v, ok := dauo.mutation.Description(); ok {
		if err := dbapp.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "DbApp.Description": %w`, err)}
		}
	}
	if v, ok := dauo.mutation.Icon(); ok {
		if err := dbapp.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "DbApp.icon": %w`, err)}
		}
	}
	if v, ok := dauo.mutation.URL(); ok {
		if err := dbapp.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "DbApp.url": %w`, err)}
		}
	}
	if _, ok := dauo.mutation.TenantID(); dauo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbApp.tenant"`)
	}
	return nil
}

func (dauo *DbAppUpdateOne) sqlSave(ctx context.Context) (_node *DbApp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbapp.Table,
			Columns: dbapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbapp.FieldID,
			},
		},
	}
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbApp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbapp.FieldID)
		for _, f := range fields {
			if !dbapp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbapp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldName,
		})
	}
	if value, ok := dauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: dbapp.FieldStatus,
		})
	}
	if value, ok := dauo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldDescription,
		})
	}
	if value, ok := dauo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldIcon,
		})
	}
	if dauo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbapp.FieldIcon,
		})
	}
	if value, ok := dauo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbapp.FieldURL,
		})
	}
	if dauo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbapp.FieldURL,
		})
	}
	if dauo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbapp.TenantTable,
			Columns: []string{dbapp.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbapp.TenantTable,
			Columns: []string{dbapp.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dauo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dbmessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !dauo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dbmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dbmessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dauo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.RemovedFiltersIDs(); len(nodes) > 0 && !dauo.mutation.FiltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.FiltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbfilter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dauo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !dauo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DbApp{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbapp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
