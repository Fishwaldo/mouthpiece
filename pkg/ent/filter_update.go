/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/app"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/filter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/filterconfig"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/group"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/user"
)

// FilterUpdate is the builder for updating Filter entities.
type FilterUpdate struct {
	config
	hooks    []Hook
	mutation *FilterMutation
}

// Where appends a list predicates to the FilterUpdate builder.
func (fu *FilterUpdate) Where(ps ...predicate.Filter) *FilterUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetTenantID sets the "tenant_id" field.
func (fu *FilterUpdate) SetTenantID(i int) *FilterUpdate {
	fu.mutation.SetTenantID(i)
	return fu
}

// SetName sets the "Name" field.
func (fu *FilterUpdate) SetName(s string) *FilterUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetDescription sets the "Description" field.
func (fu *FilterUpdate) SetDescription(s string) *FilterUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetType sets the "Type" field.
func (fu *FilterUpdate) SetType(f filter.Type) *FilterUpdate {
	fu.mutation.SetType(f)
	return fu
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (fu *FilterUpdate) SetNillableType(f *filter.Type) *FilterUpdate {
	if f != nil {
		fu.SetType(*f)
	}
	return fu
}

// SetEnabled sets the "Enabled" field.
func (fu *FilterUpdate) SetEnabled(b bool) *FilterUpdate {
	fu.mutation.SetEnabled(b)
	return fu
}

// SetNillableEnabled sets the "Enabled" field if the given value is not nil.
func (fu *FilterUpdate) SetNillableEnabled(b *bool) *FilterUpdate {
	if b != nil {
		fu.SetEnabled(*b)
	}
	return fu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (fu *FilterUpdate) SetTenant(t *Tenant) *FilterUpdate {
	return fu.SetTenantID(t.ID)
}

// AddConfigIDs adds the "config" edge to the FilterConfig entity by IDs.
func (fu *FilterUpdate) AddConfigIDs(ids ...int) *FilterUpdate {
	fu.mutation.AddConfigIDs(ids...)
	return fu
}

// AddConfig adds the "config" edges to the FilterConfig entity.
func (fu *FilterUpdate) AddConfig(f ...*FilterConfig) *FilterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.AddConfigIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (fu *FilterUpdate) AddGroupIDs(ids ...int) *FilterUpdate {
	fu.mutation.AddGroupIDs(ids...)
	return fu
}

// AddGroups adds the "groups" edges to the Group entity.
func (fu *FilterUpdate) AddGroups(g ...*Group) *FilterUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fu.AddGroupIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (fu *FilterUpdate) AddAppIDs(ids ...int) *FilterUpdate {
	fu.mutation.AddAppIDs(ids...)
	return fu
}

// AddApp adds the "app" edges to the App entity.
func (fu *FilterUpdate) AddApp(a ...*App) *FilterUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fu.AddAppIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (fu *FilterUpdate) AddUserIDs(ids ...int) *FilterUpdate {
	fu.mutation.AddUserIDs(ids...)
	return fu
}

// AddUser adds the "user" edges to the User entity.
func (fu *FilterUpdate) AddUser(u ...*User) *FilterUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddUserIDs(ids...)
}

// Mutation returns the FilterMutation object of the builder.
func (fu *FilterUpdate) Mutation() *FilterMutation {
	return fu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (fu *FilterUpdate) ClearTenant() *FilterUpdate {
	fu.mutation.ClearTenant()
	return fu
}

// ClearConfig clears all "config" edges to the FilterConfig entity.
func (fu *FilterUpdate) ClearConfig() *FilterUpdate {
	fu.mutation.ClearConfig()
	return fu
}

// RemoveConfigIDs removes the "config" edge to FilterConfig entities by IDs.
func (fu *FilterUpdate) RemoveConfigIDs(ids ...int) *FilterUpdate {
	fu.mutation.RemoveConfigIDs(ids...)
	return fu
}

// RemoveConfig removes "config" edges to FilterConfig entities.
func (fu *FilterUpdate) RemoveConfig(f ...*FilterConfig) *FilterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fu.RemoveConfigIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (fu *FilterUpdate) ClearGroups() *FilterUpdate {
	fu.mutation.ClearGroups()
	return fu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (fu *FilterUpdate) RemoveGroupIDs(ids ...int) *FilterUpdate {
	fu.mutation.RemoveGroupIDs(ids...)
	return fu
}

// RemoveGroups removes "groups" edges to Group entities.
func (fu *FilterUpdate) RemoveGroups(g ...*Group) *FilterUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fu.RemoveGroupIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (fu *FilterUpdate) ClearApp() *FilterUpdate {
	fu.mutation.ClearApp()
	return fu
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (fu *FilterUpdate) RemoveAppIDs(ids ...int) *FilterUpdate {
	fu.mutation.RemoveAppIDs(ids...)
	return fu
}

// RemoveApp removes "app" edges to App entities.
func (fu *FilterUpdate) RemoveApp(a ...*App) *FilterUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fu.RemoveAppIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (fu *FilterUpdate) ClearUser() *FilterUpdate {
	fu.mutation.ClearUser()
	return fu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (fu *FilterUpdate) RemoveUserIDs(ids ...int) *FilterUpdate {
	fu.mutation.RemoveUserIDs(ids...)
	return fu
}

// RemoveUser removes "user" edges to User entities.
func (fu *FilterUpdate) RemoveUser(u ...*User) *FilterUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FilterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FilterUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FilterUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FilterUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FilterUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := filter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Filter.Name": %w`, err)}
		}
	}
	if v, ok := fu.mutation.Description(); ok {
		if err := filter.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Filter.Description": %w`, err)}
		}
	}
	if v, ok := fu.mutation.GetType(); ok {
		if err := filter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf(`ent: validator failed for field "Filter.Type": %w`, err)}
		}
	}
	if _, ok := fu.mutation.TenantID(); fu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Filter.tenant"`)
	}
	return nil
}

func (fu *FilterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filter.Table,
			Columns: filter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filter.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filter.FieldName,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filter.FieldDescription,
		})
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: filter.FieldType,
		})
	}
	if value, ok := fu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filter.FieldEnabled,
		})
	}
	if fu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filter.TenantTable,
			Columns: []string{filter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filter.TenantTable,
			Columns: []string{filter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ConfigTable,
			Columns: []string{filter.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filterconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedConfigIDs(); len(nodes) > 0 && !fu.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ConfigTable,
			Columns: []string{filter.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filterconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ConfigTable,
			Columns: []string{filter.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filterconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filter.GroupsTable,
			Columns: filter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !fu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filter.GroupsTable,
			Columns: filter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filter.GroupsTable,
			Columns: filter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.AppTable,
			Columns: filter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedAppIDs(); len(nodes) > 0 && !fu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.AppTable,
			Columns: filter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.AppTable,
			Columns: filter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.UserTable,
			Columns: filter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedUserIDs(); len(nodes) > 0 && !fu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.UserTable,
			Columns: filter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.UserTable,
			Columns: filter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FilterUpdateOne is the builder for updating a single Filter entity.
type FilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FilterMutation
}

// SetTenantID sets the "tenant_id" field.
func (fuo *FilterUpdateOne) SetTenantID(i int) *FilterUpdateOne {
	fuo.mutation.SetTenantID(i)
	return fuo
}

// SetName sets the "Name" field.
func (fuo *FilterUpdateOne) SetName(s string) *FilterUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetDescription sets the "Description" field.
func (fuo *FilterUpdateOne) SetDescription(s string) *FilterUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetType sets the "Type" field.
func (fuo *FilterUpdateOne) SetType(f filter.Type) *FilterUpdateOne {
	fuo.mutation.SetType(f)
	return fuo
}

// SetNillableType sets the "Type" field if the given value is not nil.
func (fuo *FilterUpdateOne) SetNillableType(f *filter.Type) *FilterUpdateOne {
	if f != nil {
		fuo.SetType(*f)
	}
	return fuo
}

// SetEnabled sets the "Enabled" field.
func (fuo *FilterUpdateOne) SetEnabled(b bool) *FilterUpdateOne {
	fuo.mutation.SetEnabled(b)
	return fuo
}

// SetNillableEnabled sets the "Enabled" field if the given value is not nil.
func (fuo *FilterUpdateOne) SetNillableEnabled(b *bool) *FilterUpdateOne {
	if b != nil {
		fuo.SetEnabled(*b)
	}
	return fuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (fuo *FilterUpdateOne) SetTenant(t *Tenant) *FilterUpdateOne {
	return fuo.SetTenantID(t.ID)
}

// AddConfigIDs adds the "config" edge to the FilterConfig entity by IDs.
func (fuo *FilterUpdateOne) AddConfigIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.AddConfigIDs(ids...)
	return fuo
}

// AddConfig adds the "config" edges to the FilterConfig entity.
func (fuo *FilterUpdateOne) AddConfig(f ...*FilterConfig) *FilterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.AddConfigIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (fuo *FilterUpdateOne) AddGroupIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.AddGroupIDs(ids...)
	return fuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (fuo *FilterUpdateOne) AddGroups(g ...*Group) *FilterUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fuo.AddGroupIDs(ids...)
}

// AddAppIDs adds the "app" edge to the App entity by IDs.
func (fuo *FilterUpdateOne) AddAppIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.AddAppIDs(ids...)
	return fuo
}

// AddApp adds the "app" edges to the App entity.
func (fuo *FilterUpdateOne) AddApp(a ...*App) *FilterUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fuo.AddAppIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (fuo *FilterUpdateOne) AddUserIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.AddUserIDs(ids...)
	return fuo
}

// AddUser adds the "user" edges to the User entity.
func (fuo *FilterUpdateOne) AddUser(u ...*User) *FilterUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddUserIDs(ids...)
}

// Mutation returns the FilterMutation object of the builder.
func (fuo *FilterUpdateOne) Mutation() *FilterMutation {
	return fuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (fuo *FilterUpdateOne) ClearTenant() *FilterUpdateOne {
	fuo.mutation.ClearTenant()
	return fuo
}

// ClearConfig clears all "config" edges to the FilterConfig entity.
func (fuo *FilterUpdateOne) ClearConfig() *FilterUpdateOne {
	fuo.mutation.ClearConfig()
	return fuo
}

// RemoveConfigIDs removes the "config" edge to FilterConfig entities by IDs.
func (fuo *FilterUpdateOne) RemoveConfigIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.RemoveConfigIDs(ids...)
	return fuo
}

// RemoveConfig removes "config" edges to FilterConfig entities.
func (fuo *FilterUpdateOne) RemoveConfig(f ...*FilterConfig) *FilterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fuo.RemoveConfigIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (fuo *FilterUpdateOne) ClearGroups() *FilterUpdateOne {
	fuo.mutation.ClearGroups()
	return fuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (fuo *FilterUpdateOne) RemoveGroupIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.RemoveGroupIDs(ids...)
	return fuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (fuo *FilterUpdateOne) RemoveGroups(g ...*Group) *FilterUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fuo.RemoveGroupIDs(ids...)
}

// ClearApp clears all "app" edges to the App entity.
func (fuo *FilterUpdateOne) ClearApp() *FilterUpdateOne {
	fuo.mutation.ClearApp()
	return fuo
}

// RemoveAppIDs removes the "app" edge to App entities by IDs.
func (fuo *FilterUpdateOne) RemoveAppIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.RemoveAppIDs(ids...)
	return fuo
}

// RemoveApp removes "app" edges to App entities.
func (fuo *FilterUpdateOne) RemoveApp(a ...*App) *FilterUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fuo.RemoveAppIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (fuo *FilterUpdateOne) ClearUser() *FilterUpdateOne {
	fuo.mutation.ClearUser()
	return fuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (fuo *FilterUpdateOne) RemoveUserIDs(ids ...int) *FilterUpdateOne {
	fuo.mutation.RemoveUserIDs(ids...)
	return fuo
}

// RemoveUser removes "user" edges to User entities.
func (fuo *FilterUpdateOne) RemoveUser(u ...*User) *FilterUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FilterUpdateOne) Select(field string, fields ...string) *FilterUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Filter entity.
func (fuo *FilterUpdateOne) Save(ctx context.Context) (*Filter, error) {
	var (
		err  error
		node *Filter
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Filter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FilterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FilterUpdateOne) SaveX(ctx context.Context) *Filter {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FilterUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FilterUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FilterUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := filter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Filter.Name": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.Description(); ok {
		if err := filter.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`ent: validator failed for field "Filter.Description": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.GetType(); ok {
		if err := filter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf(`ent: validator failed for field "Filter.Type": %w`, err)}
		}
	}
	if _, ok := fuo.mutation.TenantID(); fuo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Filter.tenant"`)
	}
	return nil
}

func (fuo *FilterUpdateOne) sqlSave(ctx context.Context) (_node *Filter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   filter.Table,
			Columns: filter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: filter.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Filter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filter.FieldID)
		for _, f := range fields {
			if !filter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filter.FieldName,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filter.FieldDescription,
		})
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: filter.FieldType,
		})
	}
	if value, ok := fuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: filter.FieldEnabled,
		})
	}
	if fuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filter.TenantTable,
			Columns: []string{filter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   filter.TenantTable,
			Columns: []string{filter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ConfigTable,
			Columns: []string{filter.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filterconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedConfigIDs(); len(nodes) > 0 && !fuo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ConfigTable,
			Columns: []string{filter.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filterconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filter.ConfigTable,
			Columns: []string{filter.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filterconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filter.GroupsTable,
			Columns: filter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !fuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filter.GroupsTable,
			Columns: filter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   filter.GroupsTable,
			Columns: filter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.AppTable,
			Columns: filter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedAppIDs(); len(nodes) > 0 && !fuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.AppTable,
			Columns: filter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.AppTable,
			Columns: filter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.UserTable,
			Columns: filter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !fuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.UserTable,
			Columns: filter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filter.UserTable,
			Columns: filter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Filter{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
