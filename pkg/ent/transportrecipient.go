/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/transportinstance"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/transportrecipient"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// TransportRecipient is the model entity for the TransportRecipient schema.
type TransportRecipient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the Group`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty" doc:"Description of the Group`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransportRecipientQuery when eager-loading is set.
	Edges                                   TransportRecipientEdges `json:"edges"`
	transport_instance_transport_recipients *int
}

// TransportRecipientEdges holds the relations/edges for other nodes in the graph.
type TransportRecipientEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// TransportInstance holds the value of the TransportInstance edge.
	TransportInstance *TransportInstance `json:"TransportInstance,omitempty"`
	// AppRecipient holds the value of the AppRecipient edge.
	AppRecipient []*App `json:"AppRecipient,omitempty"`
	// GroupRecipient holds the value of the GroupRecipient edge.
	GroupRecipient []*Group `json:"GroupRecipient,omitempty"`
	// UserRecipient holds the value of the UserRecipient edge.
	UserRecipient []*User `json:"UserRecipient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransportRecipientEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// TransportInstanceOrErr returns the TransportInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransportRecipientEdges) TransportInstanceOrErr() (*TransportInstance, error) {
	if e.loadedTypes[1] {
		if e.TransportInstance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transportinstance.Label}
		}
		return e.TransportInstance, nil
	}
	return nil, &NotLoadedError{edge: "TransportInstance"}
}

// AppRecipientOrErr returns the AppRecipient value or an error if the edge
// was not loaded in eager-loading.
func (e TransportRecipientEdges) AppRecipientOrErr() ([]*App, error) {
	if e.loadedTypes[2] {
		return e.AppRecipient, nil
	}
	return nil, &NotLoadedError{edge: "AppRecipient"}
}

// GroupRecipientOrErr returns the GroupRecipient value or an error if the edge
// was not loaded in eager-loading.
func (e TransportRecipientEdges) GroupRecipientOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.GroupRecipient, nil
	}
	return nil, &NotLoadedError{edge: "GroupRecipient"}
}

// UserRecipientOrErr returns the UserRecipient value or an error if the edge
// was not loaded in eager-loading.
func (e TransportRecipientEdges) UserRecipientOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.UserRecipient, nil
	}
	return nil, &NotLoadedError{edge: "UserRecipient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransportRecipient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transportrecipient.FieldID, transportrecipient.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case transportrecipient.FieldName, transportrecipient.FieldDescription:
			values[i] = new(sql.NullString)
		case transportrecipient.ForeignKeys[0]: // transport_instance_transport_recipients
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TransportRecipient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransportRecipient fields.
func (tr *TransportRecipient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transportrecipient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case transportrecipient.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tr.TenantID = int(value.Int64)
			}
		case transportrecipient.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				tr.Name = value.String
			}
		case transportrecipient.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				tr.Description = value.String
			}
		case transportrecipient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transport_instance_transport_recipients", value)
			} else if value.Valid {
				tr.transport_instance_transport_recipients = new(int)
				*tr.transport_instance_transport_recipients = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the TransportRecipient entity.
func (tr *TransportRecipient) QueryTenant() *TenantQuery {
	return (&TransportRecipientClient{config: tr.config}).QueryTenant(tr)
}

// QueryTransportInstance queries the "TransportInstance" edge of the TransportRecipient entity.
func (tr *TransportRecipient) QueryTransportInstance() *TransportInstanceQuery {
	return (&TransportRecipientClient{config: tr.config}).QueryTransportInstance(tr)
}

// QueryAppRecipient queries the "AppRecipient" edge of the TransportRecipient entity.
func (tr *TransportRecipient) QueryAppRecipient() *AppQuery {
	return (&TransportRecipientClient{config: tr.config}).QueryAppRecipient(tr)
}

// QueryGroupRecipient queries the "GroupRecipient" edge of the TransportRecipient entity.
func (tr *TransportRecipient) QueryGroupRecipient() *GroupQuery {
	return (&TransportRecipientClient{config: tr.config}).QueryGroupRecipient(tr)
}

// QueryUserRecipient queries the "UserRecipient" edge of the TransportRecipient entity.
func (tr *TransportRecipient) QueryUserRecipient() *UserQuery {
	return (&TransportRecipientClient{config: tr.config}).QueryUserRecipient(tr)
}

// Update returns a builder for updating this TransportRecipient.
// Note that you need to call TransportRecipient.Unwrap() before calling this method if this TransportRecipient
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TransportRecipient) Update() *TransportRecipientUpdateOne {
	return (&TransportRecipientClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TransportRecipient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TransportRecipient) Unwrap() *TransportRecipient {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransportRecipient is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TransportRecipient) String() string {
	var builder strings.Builder
	builder.WriteString("TransportRecipient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(tr.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(tr.Description)
	builder.WriteByte(')')
	return builder.String()
}

func (tr *TransportRecipient) ValidateTransportRecipient() error {
	if err := validate.Get().Struct(tr); err != nil {
		return err
	}
	return nil
}

// TransportRecipients is a parsable slice of TransportRecipient.
type TransportRecipients []*TransportRecipient

func (tr TransportRecipients) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
