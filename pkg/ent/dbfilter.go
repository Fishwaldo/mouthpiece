/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// DbFilter is the model entity for the DbFilter schema.
type DbFilter struct {
	config `doc:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// AppData holds the value of the "AppData" field.
	AppData interfaces.AppData `doc:"-" json:"-"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the User"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty" doc:"Description of the Filter"`
	// Type holds the value of the "Type" field.
	Type interfaces.FilterType `json:"Type,omitempty" doc:"Type of Filter"`
	// Enabled holds the value of the "Enabled" field.
	Enabled bool `json:"Enabled,omitempty" doc:"Is the Filter Enabled"`
	// FilterImpl holds the value of the "FilterImpl" field.
	FilterImpl string `json:"FilterImpl,omitempty" doc:"Filter Implementation"`
	// Config holds the value of the "Config" field.
	Config string `json:"Config,omitempty" doc:"Filter Configuration"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbFilterQuery when eager-loading is set.
	Edges DbFilterEdges `json:"edges"`
}

// DbFilterEdges holds the relations/edges for other nodes in the graph.
type DbFilterEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*DbGroup `json:"groups,omitempty"`
	// App holds the value of the app edge.
	App []*DbApp `json:"app,omitempty"`
	// User holds the value of the user edge.
	User []*DbUser `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbFilterEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e DbFilterEdges) GroupsOrErr() ([]*DbGroup, error) {
	if e.loadedTypes[1] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading.
func (e DbFilterEdges) AppOrErr() ([]*DbApp, error) {
	if e.loadedTypes[2] {
		return e.App, nil
	}
	return nil, &NotLoadedError{edge: "app"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e DbFilterEdges) UserOrErr() ([]*DbUser, error) {
	if e.loadedTypes[3] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbFilter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbfilter.FieldAppData:
			values[i] = new([]byte)
		case dbfilter.FieldType:
			values[i] = new(interfaces.FilterType)
		case dbfilter.FieldEnabled:
			values[i] = new(sql.NullBool)
		case dbfilter.FieldID, dbfilter.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case dbfilter.FieldName, dbfilter.FieldDescription, dbfilter.FieldFilterImpl, dbfilter.FieldConfig:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbFilter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbFilter fields.
func (df *DbFilter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbfilter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			df.ID = int(value.Int64)
		case dbfilter.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				df.TenantID = int(value.Int64)
			}
		case dbfilter.FieldAppData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field AppData", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &df.AppData); err != nil {
					return fmt.Errorf("unmarshal field AppData: %w", err)
				}
			}
		case dbfilter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				df.Name = value.String
			}
		case dbfilter.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				df.Description = value.String
			}
		case dbfilter.FieldType:
			if value, ok := values[i].(*interfaces.FilterType); !ok {
				return fmt.Errorf("unexpected type %T for field Type", values[i])
			} else if value != nil {
				df.Type = *value
			}
		case dbfilter.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Enabled", values[i])
			} else if value.Valid {
				df.Enabled = value.Bool
			}
		case dbfilter.FieldFilterImpl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FilterImpl", values[i])
			} else if value.Valid {
				df.FilterImpl = value.String
			}
		case dbfilter.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Config", values[i])
			} else if value.Valid {
				df.Config = value.String
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the DbFilter entity.
func (df *DbFilter) QueryTenant() *TenantQuery {
	return (&DbFilterClient{config: df.config}).QueryTenant(df)
}

// QueryGroups queries the "groups" edge of the DbFilter entity.
func (df *DbFilter) QueryGroups() *DbGroupQuery {
	return (&DbFilterClient{config: df.config}).QueryGroups(df)
}

// QueryApp queries the "app" edge of the DbFilter entity.
func (df *DbFilter) QueryApp() *DbAppQuery {
	return (&DbFilterClient{config: df.config}).QueryApp(df)
}

// QueryUser queries the "user" edge of the DbFilter entity.
func (df *DbFilter) QueryUser() *DbUserQuery {
	return (&DbFilterClient{config: df.config}).QueryUser(df)
}

// Update returns a builder for updating this DbFilter.
// Note that you need to call DbFilter.Unwrap() before calling this method if this DbFilter
// was returned from a transaction, and the transaction was committed or rolled back.
func (df *DbFilter) Update() *DbFilterUpdateOne {
	return (&DbFilterClient{config: df.config}).UpdateOne(df)
}

// Unwrap unwraps the DbFilter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (df *DbFilter) Unwrap() *DbFilter {
	_tx, ok := df.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbFilter is not a transactional entity")
	}
	df.config.driver = _tx.drv
	return df
}

// String implements the fmt.Stringer.
func (df *DbFilter) String() string {
	var builder strings.Builder
	builder.WriteString("DbFilter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", df.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", df.TenantID))
	builder.WriteString(", ")
	builder.WriteString("AppData=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(df.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(df.Description)
	builder.WriteString(", ")
	builder.WriteString("Type=")
	builder.WriteString(fmt.Sprintf("%v", df.Type))
	builder.WriteString(", ")
	builder.WriteString("Enabled=")
	builder.WriteString(fmt.Sprintf("%v", df.Enabled))
	builder.WriteString(", ")
	builder.WriteString("FilterImpl=")
	builder.WriteString(df.FilterImpl)
	builder.WriteString(", ")
	builder.WriteString("Config=")
	builder.WriteString(df.Config)
	builder.WriteByte(')')
	return builder.String()
}

func (df *DbFilter) ValidateDbFilter() error {
	if err := validate.Get().Struct(df); err != nil {
		return err
	}
	return nil
}

// DbFilters is a parsable slice of DbFilter.
type DbFilters []*DbFilter

func (df DbFilters) config(cfg config) {
	for _i := range df {
		df[_i].config = cfg
	}
}
