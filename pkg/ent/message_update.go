/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/app"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/message"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/msgvar"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTenantID sets the "tenant_id" field.
func (mu *MessageUpdate) SetTenantID(i int) *MessageUpdate {
	mu.mutation.SetTenantID(i)
	return mu
}

// SetMessage sets the "Message" field.
func (mu *MessageUpdate) SetMessage(s string) *MessageUpdate {
	mu.mutation.SetMessage(s)
	return mu
}

// SetShortMsg sets the "ShortMsg" field.
func (mu *MessageUpdate) SetShortMsg(s string) *MessageUpdate {
	mu.mutation.SetShortMsg(s)
	return mu
}

// SetNillableShortMsg sets the "ShortMsg" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableShortMsg(s *string) *MessageUpdate {
	if s != nil {
		mu.SetShortMsg(*s)
	}
	return mu
}

// ClearShortMsg clears the value of the "ShortMsg" field.
func (mu *MessageUpdate) ClearShortMsg() *MessageUpdate {
	mu.mutation.ClearShortMsg()
	return mu
}

// SetTopic sets the "Topic" field.
func (mu *MessageUpdate) SetTopic(s string) *MessageUpdate {
	mu.mutation.SetTopic(s)
	return mu
}

// SetNillableTopic sets the "Topic" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableTopic(s *string) *MessageUpdate {
	if s != nil {
		mu.SetTopic(*s)
	}
	return mu
}

// ClearTopic clears the value of the "Topic" field.
func (mu *MessageUpdate) ClearTopic() *MessageUpdate {
	mu.mutation.ClearTopic()
	return mu
}

// SetSeverity sets the "Severity" field.
func (mu *MessageUpdate) SetSeverity(i int) *MessageUpdate {
	mu.mutation.ResetSeverity()
	mu.mutation.SetSeverity(i)
	return mu
}

// SetNillableSeverity sets the "Severity" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSeverity(i *int) *MessageUpdate {
	if i != nil {
		mu.SetSeverity(*i)
	}
	return mu
}

// AddSeverity adds i to the "Severity" field.
func (mu *MessageUpdate) AddSeverity(i int) *MessageUpdate {
	mu.mutation.AddSeverity(i)
	return mu
}

// ClearSeverity clears the value of the "Severity" field.
func (mu *MessageUpdate) ClearSeverity() *MessageUpdate {
	mu.mutation.ClearSeverity()
	return mu
}

// SetTimestamp sets the "Timestamp" field.
func (mu *MessageUpdate) SetTimestamp(t time.Time) *MessageUpdate {
	mu.mutation.SetTimestamp(t)
	return mu
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableTimestamp(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetTimestamp(*t)
	}
	return mu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (mu *MessageUpdate) SetTenant(t *Tenant) *MessageUpdate {
	return mu.SetTenantID(t.ID)
}

// AddVarIDs adds the "vars" edge to the MsgVar entity by IDs.
func (mu *MessageUpdate) AddVarIDs(ids ...int) *MessageUpdate {
	mu.mutation.AddVarIDs(ids...)
	return mu
}

// AddVars adds the "vars" edges to the MsgVar entity.
func (mu *MessageUpdate) AddVars(m ...*MsgVar) *MessageUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddVarIDs(ids...)
}

// SetAppID sets the "app" edge to the App entity by ID.
func (mu *MessageUpdate) SetAppID(id int) *MessageUpdate {
	mu.mutation.SetAppID(id)
	return mu
}

// SetApp sets the "app" edge to the App entity.
func (mu *MessageUpdate) SetApp(a *App) *MessageUpdate {
	return mu.SetAppID(a.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (mu *MessageUpdate) ClearTenant() *MessageUpdate {
	mu.mutation.ClearTenant()
	return mu
}

// ClearVars clears all "vars" edges to the MsgVar entity.
func (mu *MessageUpdate) ClearVars() *MessageUpdate {
	mu.mutation.ClearVars()
	return mu
}

// RemoveVarIDs removes the "vars" edge to MsgVar entities by IDs.
func (mu *MessageUpdate) RemoveVarIDs(ids ...int) *MessageUpdate {
	mu.mutation.RemoveVarIDs(ids...)
	return mu
}

// RemoveVars removes "vars" edges to MsgVar entities.
func (mu *MessageUpdate) RemoveVars(m ...*MsgVar) *MessageUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveVarIDs(ids...)
}

// ClearApp clears the "app" edge to the App entity.
func (mu *MessageUpdate) ClearApp() *MessageUpdate {
	mu.mutation.ClearApp()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if v, ok := mu.mutation.Message(); ok {
		if err := message.MessageValidator(v); err != nil {
			return &ValidationError{Name: "Message", err: fmt.Errorf(`ent: validator failed for field "Message.Message": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Topic(); ok {
		if err := message.TopicValidator(v); err != nil {
			return &ValidationError{Name: "Topic", err: fmt.Errorf(`ent: validator failed for field "Message.Topic": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Severity(); ok {
		if err := message.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "Severity", err: fmt.Errorf(`ent: validator failed for field "Message.Severity": %w`, err)}
		}
	}
	if _, ok := mu.mutation.TenantID(); mu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.tenant"`)
	}
	if _, ok := mu.mutation.AppID(); mu.mutation.AppCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.app"`)
	}
	return nil
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldMessage,
		})
	}
	if value, ok := mu.mutation.ShortMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldShortMsg,
		})
	}
	if mu.mutation.ShortMsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldShortMsg,
		})
	}
	if value, ok := mu.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldTopic,
		})
	}
	if mu.mutation.TopicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldTopic,
		})
	}
	if value, ok := mu.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: message.FieldSeverity,
		})
	}
	if value, ok := mu.mutation.AddedSeverity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: message.FieldSeverity,
		})
	}
	if mu.mutation.SeverityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: message.FieldSeverity,
		})
	}
	if value, ok := mu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldTimestamp,
		})
	}
	if mu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedVarsIDs(); len(nodes) > 0 && !mu.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AppTable,
			Columns: []string{message.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AppTable,
			Columns: []string{message.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetTenantID sets the "tenant_id" field.
func (muo *MessageUpdateOne) SetTenantID(i int) *MessageUpdateOne {
	muo.mutation.SetTenantID(i)
	return muo
}

// SetMessage sets the "Message" field.
func (muo *MessageUpdateOne) SetMessage(s string) *MessageUpdateOne {
	muo.mutation.SetMessage(s)
	return muo
}

// SetShortMsg sets the "ShortMsg" field.
func (muo *MessageUpdateOne) SetShortMsg(s string) *MessageUpdateOne {
	muo.mutation.SetShortMsg(s)
	return muo
}

// SetNillableShortMsg sets the "ShortMsg" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableShortMsg(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetShortMsg(*s)
	}
	return muo
}

// ClearShortMsg clears the value of the "ShortMsg" field.
func (muo *MessageUpdateOne) ClearShortMsg() *MessageUpdateOne {
	muo.mutation.ClearShortMsg()
	return muo
}

// SetTopic sets the "Topic" field.
func (muo *MessageUpdateOne) SetTopic(s string) *MessageUpdateOne {
	muo.mutation.SetTopic(s)
	return muo
}

// SetNillableTopic sets the "Topic" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableTopic(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetTopic(*s)
	}
	return muo
}

// ClearTopic clears the value of the "Topic" field.
func (muo *MessageUpdateOne) ClearTopic() *MessageUpdateOne {
	muo.mutation.ClearTopic()
	return muo
}

// SetSeverity sets the "Severity" field.
func (muo *MessageUpdateOne) SetSeverity(i int) *MessageUpdateOne {
	muo.mutation.ResetSeverity()
	muo.mutation.SetSeverity(i)
	return muo
}

// SetNillableSeverity sets the "Severity" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSeverity(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetSeverity(*i)
	}
	return muo
}

// AddSeverity adds i to the "Severity" field.
func (muo *MessageUpdateOne) AddSeverity(i int) *MessageUpdateOne {
	muo.mutation.AddSeverity(i)
	return muo
}

// ClearSeverity clears the value of the "Severity" field.
func (muo *MessageUpdateOne) ClearSeverity() *MessageUpdateOne {
	muo.mutation.ClearSeverity()
	return muo
}

// SetTimestamp sets the "Timestamp" field.
func (muo *MessageUpdateOne) SetTimestamp(t time.Time) *MessageUpdateOne {
	muo.mutation.SetTimestamp(t)
	return muo
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableTimestamp(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetTimestamp(*t)
	}
	return muo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (muo *MessageUpdateOne) SetTenant(t *Tenant) *MessageUpdateOne {
	return muo.SetTenantID(t.ID)
}

// AddVarIDs adds the "vars" edge to the MsgVar entity by IDs.
func (muo *MessageUpdateOne) AddVarIDs(ids ...int) *MessageUpdateOne {
	muo.mutation.AddVarIDs(ids...)
	return muo
}

// AddVars adds the "vars" edges to the MsgVar entity.
func (muo *MessageUpdateOne) AddVars(m ...*MsgVar) *MessageUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddVarIDs(ids...)
}

// SetAppID sets the "app" edge to the App entity by ID.
func (muo *MessageUpdateOne) SetAppID(id int) *MessageUpdateOne {
	muo.mutation.SetAppID(id)
	return muo
}

// SetApp sets the "app" edge to the App entity.
func (muo *MessageUpdateOne) SetApp(a *App) *MessageUpdateOne {
	return muo.SetAppID(a.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (muo *MessageUpdateOne) ClearTenant() *MessageUpdateOne {
	muo.mutation.ClearTenant()
	return muo
}

// ClearVars clears all "vars" edges to the MsgVar entity.
func (muo *MessageUpdateOne) ClearVars() *MessageUpdateOne {
	muo.mutation.ClearVars()
	return muo
}

// RemoveVarIDs removes the "vars" edge to MsgVar entities by IDs.
func (muo *MessageUpdateOne) RemoveVarIDs(ids ...int) *MessageUpdateOne {
	muo.mutation.RemoveVarIDs(ids...)
	return muo
}

// RemoveVars removes "vars" edges to MsgVar entities.
func (muo *MessageUpdateOne) RemoveVars(m ...*MsgVar) *MessageUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveVarIDs(ids...)
}

// ClearApp clears the "app" edge to the App entity.
func (muo *MessageUpdateOne) ClearApp() *MessageUpdateOne {
	muo.mutation.ClearApp()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Message)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if v, ok := muo.mutation.Message(); ok {
		if err := message.MessageValidator(v); err != nil {
			return &ValidationError{Name: "Message", err: fmt.Errorf(`ent: validator failed for field "Message.Message": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Topic(); ok {
		if err := message.TopicValidator(v); err != nil {
			return &ValidationError{Name: "Topic", err: fmt.Errorf(`ent: validator failed for field "Message.Topic": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Severity(); ok {
		if err := message.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "Severity", err: fmt.Errorf(`ent: validator failed for field "Message.Severity": %w`, err)}
		}
	}
	if _, ok := muo.mutation.TenantID(); muo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.tenant"`)
	}
	if _, ok := muo.mutation.AppID(); muo.mutation.AppCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.app"`)
	}
	return nil
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldMessage,
		})
	}
	if value, ok := muo.mutation.ShortMsg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldShortMsg,
		})
	}
	if muo.mutation.ShortMsgCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldShortMsg,
		})
	}
	if value, ok := muo.mutation.Topic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldTopic,
		})
	}
	if muo.mutation.TopicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldTopic,
		})
	}
	if value, ok := muo.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: message.FieldSeverity,
		})
	}
	if value, ok := muo.mutation.AddedSeverity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: message.FieldSeverity,
		})
	}
	if muo.mutation.SeverityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: message.FieldSeverity,
		})
	}
	if value, ok := muo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldTimestamp,
		})
	}
	if muo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedVarsIDs(); len(nodes) > 0 && !muo.mutation.VarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AppTable,
			Columns: []string{message.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AppTable,
			Columns: []string{message.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
