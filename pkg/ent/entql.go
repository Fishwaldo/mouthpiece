/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbmessage"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbmessagefields"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportinstances"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportrecipients"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbusermetadata"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 10)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbapp.Table,
			Columns: dbapp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbapp.FieldID,
			},
		},
		Type: "DbApp",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbapp.FieldTenantID:    {Type: field.TypeInt, Column: dbapp.FieldTenantID},
			dbapp.FieldAppData:     {Type: field.TypeJSON, Column: dbapp.FieldAppData},
			dbapp.FieldName:        {Type: field.TypeString, Column: dbapp.FieldName},
			dbapp.FieldStatus:      {Type: field.TypeEnum, Column: dbapp.FieldStatus},
			dbapp.FieldDescription: {Type: field.TypeString, Column: dbapp.FieldDescription},
			dbapp.FieldIcon:        {Type: field.TypeString, Column: dbapp.FieldIcon},
			dbapp.FieldURL:         {Type: field.TypeString, Column: dbapp.FieldURL},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbfilter.Table,
			Columns: dbfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbfilter.FieldID,
			},
		},
		Type: "DbFilter",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbfilter.FieldTenantID:    {Type: field.TypeInt, Column: dbfilter.FieldTenantID},
			dbfilter.FieldAppData:     {Type: field.TypeJSON, Column: dbfilter.FieldAppData},
			dbfilter.FieldName:        {Type: field.TypeString, Column: dbfilter.FieldName},
			dbfilter.FieldDescription: {Type: field.TypeString, Column: dbfilter.FieldDescription},
			dbfilter.FieldType:        {Type: field.TypeEnum, Column: dbfilter.FieldType},
			dbfilter.FieldEnabled:     {Type: field.TypeBool, Column: dbfilter.FieldEnabled},
			dbfilter.FieldFilterImpl:  {Type: field.TypeString, Column: dbfilter.FieldFilterImpl},
			dbfilter.FieldConfig:      {Type: field.TypeString, Column: dbfilter.FieldConfig},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbgroup.Table,
			Columns: dbgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbgroup.FieldID,
			},
		},
		Type: "DbGroup",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbgroup.FieldTenantID:    {Type: field.TypeInt, Column: dbgroup.FieldTenantID},
			dbgroup.FieldAppData:     {Type: field.TypeJSON, Column: dbgroup.FieldAppData},
			dbgroup.FieldName:        {Type: field.TypeString, Column: dbgroup.FieldName},
			dbgroup.FieldDescription: {Type: field.TypeString, Column: dbgroup.FieldDescription},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbmessage.Table,
			Columns: dbmessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dbmessage.FieldID,
			},
		},
		Type: "DbMessage",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbmessage.FieldTenantID:  {Type: field.TypeInt, Column: dbmessage.FieldTenantID},
			dbmessage.FieldAppData:   {Type: field.TypeJSON, Column: dbmessage.FieldAppData},
			dbmessage.FieldMessage:   {Type: field.TypeString, Column: dbmessage.FieldMessage},
			dbmessage.FieldShortMsg:  {Type: field.TypeString, Column: dbmessage.FieldShortMsg},
			dbmessage.FieldTopic:     {Type: field.TypeString, Column: dbmessage.FieldTopic},
			dbmessage.FieldSeverity:  {Type: field.TypeInt, Column: dbmessage.FieldSeverity},
			dbmessage.FieldTimestamp: {Type: field.TypeTime, Column: dbmessage.FieldTimestamp},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbmessagefields.Table,
			Columns: dbmessagefields.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbmessagefields.FieldID,
			},
		},
		Type: "DbMessageFields",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbmessagefields.FieldTenantID: {Type: field.TypeInt, Column: dbmessagefields.FieldTenantID},
			dbmessagefields.FieldAppData:  {Type: field.TypeJSON, Column: dbmessagefields.FieldAppData},
			dbmessagefields.FieldName:     {Type: field.TypeString, Column: dbmessagefields.FieldName},
			dbmessagefields.FieldValue:    {Type: field.TypeString, Column: dbmessagefields.FieldValue},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbtransportinstances.Table,
			Columns: dbtransportinstances.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbtransportinstances.FieldID,
			},
		},
		Type: "DbTransportInstances",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbtransportinstances.FieldTenantID:          {Type: field.TypeInt, Column: dbtransportinstances.FieldTenantID},
			dbtransportinstances.FieldAppData:           {Type: field.TypeJSON, Column: dbtransportinstances.FieldAppData},
			dbtransportinstances.FieldName:              {Type: field.TypeString, Column: dbtransportinstances.FieldName},
			dbtransportinstances.FieldDescription:       {Type: field.TypeString, Column: dbtransportinstances.FieldDescription},
			dbtransportinstances.FieldConfig:            {Type: field.TypeString, Column: dbtransportinstances.FieldConfig},
			dbtransportinstances.FieldTransportProvider: {Type: field.TypeString, Column: dbtransportinstances.FieldTransportProvider},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbtransportrecipients.Table,
			Columns: dbtransportrecipients.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbtransportrecipients.FieldID,
			},
		},
		Type: "DbTransportRecipients",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbtransportrecipients.FieldTenantID:    {Type: field.TypeInt, Column: dbtransportrecipients.FieldTenantID},
			dbtransportrecipients.FieldAppData:     {Type: field.TypeJSON, Column: dbtransportrecipients.FieldAppData},
			dbtransportrecipients.FieldName:        {Type: field.TypeString, Column: dbtransportrecipients.FieldName},
			dbtransportrecipients.FieldDescription: {Type: field.TypeString, Column: dbtransportrecipients.FieldDescription},
			dbtransportrecipients.FieldConfig:      {Type: field.TypeString, Column: dbtransportrecipients.FieldConfig},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbuser.Table,
			Columns: dbuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbuser.FieldID,
			},
		},
		Type: "DbUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbuser.FieldTenantID:    {Type: field.TypeInt, Column: dbuser.FieldTenantID},
			dbuser.FieldAppData:     {Type: field.TypeJSON, Column: dbuser.FieldAppData},
			dbuser.FieldEmail:       {Type: field.TypeString, Column: dbuser.FieldEmail},
			dbuser.FieldName:        {Type: field.TypeString, Column: dbuser.FieldName},
			dbuser.FieldDescription: {Type: field.TypeString, Column: dbuser.FieldDescription},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dbusermetadata.Table,
			Columns: dbusermetadata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbusermetadata.FieldID,
			},
		},
		Type: "DbUserMetaData",
		Fields: map[string]*sqlgraph.FieldSpec{
			dbusermetadata.FieldTenantID: {Type: field.TypeInt, Column: dbusermetadata.FieldTenantID},
			dbusermetadata.FieldAppData:  {Type: field.TypeJSON, Column: dbusermetadata.FieldAppData},
			dbusermetadata.FieldName:     {Type: field.TypeString, Column: dbusermetadata.FieldName},
			dbusermetadata.FieldValue:    {Type: field.TypeString, Column: dbusermetadata.FieldValue},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tenant.FieldID,
			},
		},
		Type: "Tenant",
		Fields: map[string]*sqlgraph.FieldSpec{
			tenant.FieldName: {Type: field.TypeString, Column: tenant.FieldName},
		},
	}
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbapp.TenantTable,
			Columns: []string{dbapp.TenantColumn},
			Bidi:    false,
		},
		"DbApp",
		"Tenant",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbapp.MessagesTable,
			Columns: []string{dbapp.MessagesColumn},
			Bidi:    false,
		},
		"DbApp",
		"DbMessage",
	)
	graph.MustAddE(
		"filters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.FiltersTable,
			Columns: dbapp.FiltersPrimaryKey,
			Bidi:    false,
		},
		"DbApp",
		"DbFilter",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbapp.GroupsTable,
			Columns: dbapp.GroupsPrimaryKey,
			Bidi:    false,
		},
		"DbApp",
		"DbGroup",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbfilter.TenantTable,
			Columns: []string{dbfilter.TenantColumn},
			Bidi:    false,
		},
		"DbFilter",
		"Tenant",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
		},
		"DbFilter",
		"DbGroup",
	)
	graph.MustAddE(
		"app",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
		},
		"DbFilter",
		"DbApp",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
		},
		"DbFilter",
		"DbUser",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbgroup.TenantTable,
			Columns: []string{dbgroup.TenantColumn},
			Bidi:    false,
		},
		"DbGroup",
		"Tenant",
	)
	graph.MustAddE(
		"TransportRecipients",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbgroup.TransportRecipientsTable,
			Columns: []string{dbgroup.TransportRecipientsColumn},
			Bidi:    false,
		},
		"DbGroup",
		"DbTransportRecipients",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.UsersTable,
			Columns: dbgroup.UsersPrimaryKey,
			Bidi:    false,
		},
		"DbGroup",
		"DbUser",
	)
	graph.MustAddE(
		"filters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.FiltersTable,
			Columns: dbgroup.FiltersPrimaryKey,
			Bidi:    false,
		},
		"DbGroup",
		"DbFilter",
	)
	graph.MustAddE(
		"apps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbgroup.AppsTable,
			Columns: dbgroup.AppsPrimaryKey,
			Bidi:    false,
		},
		"DbGroup",
		"DbApp",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbmessage.TenantTable,
			Columns: []string{dbmessage.TenantColumn},
			Bidi:    false,
		},
		"DbMessage",
		"Tenant",
	)
	graph.MustAddE(
		"fields",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbmessage.FieldsTable,
			Columns: []string{dbmessage.FieldsColumn},
			Bidi:    false,
		},
		"DbMessage",
		"DbMessageFields",
	)
	graph.MustAddE(
		"app",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbmessage.AppTable,
			Columns: []string{dbmessage.AppColumn},
			Bidi:    false,
		},
		"DbMessage",
		"DbApp",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbmessagefields.TenantTable,
			Columns: []string{dbmessagefields.TenantColumn},
			Bidi:    false,
		},
		"DbMessageFields",
		"Tenant",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbmessagefields.OwnerTable,
			Columns: []string{dbmessagefields.OwnerColumn},
			Bidi:    false,
		},
		"DbMessageFields",
		"DbMessage",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportinstances.TenantTable,
			Columns: []string{dbtransportinstances.TenantColumn},
			Bidi:    false,
		},
		"DbTransportInstances",
		"Tenant",
	)
	graph.MustAddE(
		"TransportRecipients",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbtransportinstances.TransportRecipientsTable,
			Columns: []string{dbtransportinstances.TransportRecipientsColumn},
			Bidi:    false,
		},
		"DbTransportInstances",
		"DbTransportRecipients",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportrecipients.TenantTable,
			Columns: []string{dbtransportrecipients.TenantColumn},
			Bidi:    false,
		},
		"DbTransportRecipients",
		"Tenant",
	)
	graph.MustAddE(
		"TransportInstance",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.TransportInstanceTable,
			Columns: []string{dbtransportrecipients.TransportInstanceColumn},
			Bidi:    false,
		},
		"DbTransportRecipients",
		"DbTransportInstances",
	)
	graph.MustAddE(
		"GroupRecipient",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.GroupRecipientTable,
			Columns: []string{dbtransportrecipients.GroupRecipientColumn},
			Bidi:    false,
		},
		"DbTransportRecipients",
		"DbGroup",
	)
	graph.MustAddE(
		"UserRecipient",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.UserRecipientTable,
			Columns: []string{dbtransportrecipients.UserRecipientColumn},
			Bidi:    false,
		},
		"DbTransportRecipients",
		"DbUser",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbuser.TenantTable,
			Columns: []string{dbuser.TenantColumn},
			Bidi:    false,
		},
		"DbUser",
		"Tenant",
	)
	graph.MustAddE(
		"metadata",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbuser.MetadataTable,
			Columns: []string{dbuser.MetadataColumn},
			Bidi:    false,
		},
		"DbUser",
		"DbUserMetaData",
	)
	graph.MustAddE(
		"filters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbuser.FiltersTable,
			Columns: dbuser.FiltersPrimaryKey,
			Bidi:    false,
		},
		"DbUser",
		"DbFilter",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbuser.GroupsTable,
			Columns: dbuser.GroupsPrimaryKey,
			Bidi:    false,
		},
		"DbUser",
		"DbGroup",
	)
	graph.MustAddE(
		"TransportRecipients",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dbuser.TransportRecipientsTable,
			Columns: []string{dbuser.TransportRecipientsColumn},
			Bidi:    false,
		},
		"DbUser",
		"DbTransportRecipients",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbusermetadata.TenantTable,
			Columns: []string{dbusermetadata.TenantColumn},
			Bidi:    false,
		},
		"DbUserMetaData",
		"Tenant",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbusermetadata.UserTable,
			Columns: []string{dbusermetadata.UserColumn},
			Bidi:    false,
		},
		"DbUserMetaData",
		"DbUser",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (daq *DbAppQuery) addPredicate(pred func(s *sql.Selector)) {
	daq.predicates = append(daq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbAppQuery builder.
func (daq *DbAppQuery) Filter() *DbAppFilter {
	return &DbAppFilter{config: daq.config, predicateAdder: daq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbAppMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbAppMutation builder.
func (m *DbAppMutation) Filter() *DbAppFilter {
	return &DbAppFilter{config: m.config, predicateAdder: m}
}

// DbAppFilter provides a generic filtering capability at runtime for DbAppQuery.
type DbAppFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbAppFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbAppFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbapp.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbAppFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbapp.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbAppFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbapp.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbAppFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbapp.FieldName))
}

// WhereStatus applies the entql string predicate on the Status field.
func (f *DbAppFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(dbapp.FieldStatus))
}

// WhereDescription applies the entql string predicate on the Description field.
func (f *DbAppFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dbapp.FieldDescription))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *DbAppFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(dbapp.FieldIcon))
}

// WhereURL applies the entql string predicate on the url field.
func (f *DbAppFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(dbapp.FieldURL))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbAppFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbAppFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *DbAppFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *DbAppFilter) WhereHasMessagesWith(preds ...predicate.DbMessage) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFilters applies a predicate to check if query has an edge filters.
func (f *DbAppFilter) WhereHasFilters() {
	f.Where(entql.HasEdge("filters"))
}

// WhereHasFiltersWith applies a predicate to check if query has an edge filters with a given conditions (other predicates).
func (f *DbAppFilter) WhereHasFiltersWith(preds ...predicate.DbFilter) {
	f.Where(entql.HasEdgeWith("filters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *DbAppFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *DbAppFilter) WhereHasGroupsWith(preds ...predicate.DbGroup) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dfq *DbFilterQuery) addPredicate(pred func(s *sql.Selector)) {
	dfq.predicates = append(dfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbFilterQuery builder.
func (dfq *DbFilterQuery) Filter() *DbFilterFilter {
	return &DbFilterFilter{config: dfq.config, predicateAdder: dfq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbFilterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbFilterMutation builder.
func (m *DbFilterMutation) Filter() *DbFilterFilter {
	return &DbFilterFilter{config: m.config, predicateAdder: m}
}

// DbFilterFilter provides a generic filtering capability at runtime for DbFilterQuery.
type DbFilterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbFilterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbFilterFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbfilter.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbFilterFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbfilter.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbFilterFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbfilter.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbFilterFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbfilter.FieldName))
}

// WhereDescription applies the entql string predicate on the Description field.
func (f *DbFilterFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dbfilter.FieldDescription))
}

// WhereType applies the entql string predicate on the Type field.
func (f *DbFilterFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(dbfilter.FieldType))
}

// WhereEnabled applies the entql bool predicate on the Enabled field.
func (f *DbFilterFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(dbfilter.FieldEnabled))
}

// WhereFilterImpl applies the entql string predicate on the FilterImpl field.
func (f *DbFilterFilter) WhereFilterImpl(p entql.StringP) {
	f.Where(p.Field(dbfilter.FieldFilterImpl))
}

// WhereConfig applies the entql string predicate on the Config field.
func (f *DbFilterFilter) WhereConfig(p entql.StringP) {
	f.Where(p.Field(dbfilter.FieldConfig))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbFilterFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbFilterFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *DbFilterFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *DbFilterFilter) WhereHasGroupsWith(preds ...predicate.DbGroup) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApp applies a predicate to check if query has an edge app.
func (f *DbFilterFilter) WhereHasApp() {
	f.Where(entql.HasEdge("app"))
}

// WhereHasAppWith applies a predicate to check if query has an edge app with a given conditions (other predicates).
func (f *DbFilterFilter) WhereHasAppWith(preds ...predicate.DbApp) {
	f.Where(entql.HasEdgeWith("app", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *DbFilterFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *DbFilterFilter) WhereHasUserWith(preds ...predicate.DbUser) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dgq *DbGroupQuery) addPredicate(pred func(s *sql.Selector)) {
	dgq.predicates = append(dgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbGroupQuery builder.
func (dgq *DbGroupQuery) Filter() *DbGroupFilter {
	return &DbGroupFilter{config: dgq.config, predicateAdder: dgq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbGroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbGroupMutation builder.
func (m *DbGroupMutation) Filter() *DbGroupFilter {
	return &DbGroupFilter{config: m.config, predicateAdder: m}
}

// DbGroupFilter provides a generic filtering capability at runtime for DbGroupQuery.
type DbGroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbGroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbGroupFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbgroup.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbGroupFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbgroup.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbGroupFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbgroup.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbGroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbgroup.FieldName))
}

// WhereDescription applies the entql string predicate on the Description field.
func (f *DbGroupFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dbgroup.FieldDescription))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbGroupFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbGroupFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTransportRecipients applies a predicate to check if query has an edge TransportRecipients.
func (f *DbGroupFilter) WhereHasTransportRecipients() {
	f.Where(entql.HasEdge("TransportRecipients"))
}

// WhereHasTransportRecipientsWith applies a predicate to check if query has an edge TransportRecipients with a given conditions (other predicates).
func (f *DbGroupFilter) WhereHasTransportRecipientsWith(preds ...predicate.DbTransportRecipients) {
	f.Where(entql.HasEdgeWith("TransportRecipients", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *DbGroupFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *DbGroupFilter) WhereHasUsersWith(preds ...predicate.DbUser) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFilters applies a predicate to check if query has an edge filters.
func (f *DbGroupFilter) WhereHasFilters() {
	f.Where(entql.HasEdge("filters"))
}

// WhereHasFiltersWith applies a predicate to check if query has an edge filters with a given conditions (other predicates).
func (f *DbGroupFilter) WhereHasFiltersWith(preds ...predicate.DbFilter) {
	f.Where(entql.HasEdgeWith("filters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApps applies a predicate to check if query has an edge apps.
func (f *DbGroupFilter) WhereHasApps() {
	f.Where(entql.HasEdge("apps"))
}

// WhereHasAppsWith applies a predicate to check if query has an edge apps with a given conditions (other predicates).
func (f *DbGroupFilter) WhereHasAppsWith(preds ...predicate.DbApp) {
	f.Where(entql.HasEdgeWith("apps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dmq *DbMessageQuery) addPredicate(pred func(s *sql.Selector)) {
	dmq.predicates = append(dmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbMessageQuery builder.
func (dmq *DbMessageQuery) Filter() *DbMessageFilter {
	return &DbMessageFilter{config: dmq.config, predicateAdder: dmq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbMessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbMessageMutation builder.
func (m *DbMessageMutation) Filter() *DbMessageFilter {
	return &DbMessageFilter{config: m.config, predicateAdder: m}
}

// DbMessageFilter provides a generic filtering capability at runtime for DbMessageQuery.
type DbMessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbMessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DbMessageFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(dbmessage.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbMessageFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbmessage.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbMessageFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbmessage.FieldAppData))
}

// WhereMessage applies the entql string predicate on the Message field.
func (f *DbMessageFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(dbmessage.FieldMessage))
}

// WhereShortMsg applies the entql string predicate on the ShortMsg field.
func (f *DbMessageFilter) WhereShortMsg(p entql.StringP) {
	f.Where(p.Field(dbmessage.FieldShortMsg))
}

// WhereTopic applies the entql string predicate on the Topic field.
func (f *DbMessageFilter) WhereTopic(p entql.StringP) {
	f.Where(p.Field(dbmessage.FieldTopic))
}

// WhereSeverity applies the entql int predicate on the Severity field.
func (f *DbMessageFilter) WhereSeverity(p entql.IntP) {
	f.Where(p.Field(dbmessage.FieldSeverity))
}

// WhereTimestamp applies the entql time.Time predicate on the Timestamp field.
func (f *DbMessageFilter) WhereTimestamp(p entql.TimeP) {
	f.Where(p.Field(dbmessage.FieldTimestamp))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbMessageFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbMessageFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFields applies a predicate to check if query has an edge fields.
func (f *DbMessageFilter) WhereHasFields() {
	f.Where(entql.HasEdge("fields"))
}

// WhereHasFieldsWith applies a predicate to check if query has an edge fields with a given conditions (other predicates).
func (f *DbMessageFilter) WhereHasFieldsWith(preds ...predicate.DbMessageFields) {
	f.Where(entql.HasEdgeWith("fields", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasApp applies a predicate to check if query has an edge app.
func (f *DbMessageFilter) WhereHasApp() {
	f.Where(entql.HasEdge("app"))
}

// WhereHasAppWith applies a predicate to check if query has an edge app with a given conditions (other predicates).
func (f *DbMessageFilter) WhereHasAppWith(preds ...predicate.DbApp) {
	f.Where(entql.HasEdgeWith("app", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dmfq *DbMessageFieldsQuery) addPredicate(pred func(s *sql.Selector)) {
	dmfq.predicates = append(dmfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbMessageFieldsQuery builder.
func (dmfq *DbMessageFieldsQuery) Filter() *DbMessageFieldsFilter {
	return &DbMessageFieldsFilter{config: dmfq.config, predicateAdder: dmfq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbMessageFieldsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbMessageFieldsMutation builder.
func (m *DbMessageFieldsMutation) Filter() *DbMessageFieldsFilter {
	return &DbMessageFieldsFilter{config: m.config, predicateAdder: m}
}

// DbMessageFieldsFilter provides a generic filtering capability at runtime for DbMessageFieldsQuery.
type DbMessageFieldsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbMessageFieldsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbMessageFieldsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbmessagefields.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbMessageFieldsFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbmessagefields.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbMessageFieldsFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbmessagefields.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbMessageFieldsFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbmessagefields.FieldName))
}

// WhereValue applies the entql string predicate on the Value field.
func (f *DbMessageFieldsFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(dbmessagefields.FieldValue))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbMessageFieldsFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbMessageFieldsFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *DbMessageFieldsFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *DbMessageFieldsFilter) WhereHasOwnerWith(preds ...predicate.DbMessage) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dtiq *DbTransportInstancesQuery) addPredicate(pred func(s *sql.Selector)) {
	dtiq.predicates = append(dtiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbTransportInstancesQuery builder.
func (dtiq *DbTransportInstancesQuery) Filter() *DbTransportInstancesFilter {
	return &DbTransportInstancesFilter{config: dtiq.config, predicateAdder: dtiq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbTransportInstancesMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbTransportInstancesMutation builder.
func (m *DbTransportInstancesMutation) Filter() *DbTransportInstancesFilter {
	return &DbTransportInstancesFilter{config: m.config, predicateAdder: m}
}

// DbTransportInstancesFilter provides a generic filtering capability at runtime for DbTransportInstancesQuery.
type DbTransportInstancesFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbTransportInstancesFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbTransportInstancesFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbtransportinstances.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbTransportInstancesFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbtransportinstances.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbTransportInstancesFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbtransportinstances.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbTransportInstancesFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbtransportinstances.FieldName))
}

// WhereDescription applies the entql string predicate on the Description field.
func (f *DbTransportInstancesFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dbtransportinstances.FieldDescription))
}

// WhereConfig applies the entql string predicate on the Config field.
func (f *DbTransportInstancesFilter) WhereConfig(p entql.StringP) {
	f.Where(p.Field(dbtransportinstances.FieldConfig))
}

// WhereTransportProvider applies the entql string predicate on the TransportProvider field.
func (f *DbTransportInstancesFilter) WhereTransportProvider(p entql.StringP) {
	f.Where(p.Field(dbtransportinstances.FieldTransportProvider))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbTransportInstancesFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbTransportInstancesFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTransportRecipients applies a predicate to check if query has an edge TransportRecipients.
func (f *DbTransportInstancesFilter) WhereHasTransportRecipients() {
	f.Where(entql.HasEdge("TransportRecipients"))
}

// WhereHasTransportRecipientsWith applies a predicate to check if query has an edge TransportRecipients with a given conditions (other predicates).
func (f *DbTransportInstancesFilter) WhereHasTransportRecipientsWith(preds ...predicate.DbTransportRecipients) {
	f.Where(entql.HasEdgeWith("TransportRecipients", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dtrq *DbTransportRecipientsQuery) addPredicate(pred func(s *sql.Selector)) {
	dtrq.predicates = append(dtrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbTransportRecipientsQuery builder.
func (dtrq *DbTransportRecipientsQuery) Filter() *DbTransportRecipientsFilter {
	return &DbTransportRecipientsFilter{config: dtrq.config, predicateAdder: dtrq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbTransportRecipientsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbTransportRecipientsMutation builder.
func (m *DbTransportRecipientsMutation) Filter() *DbTransportRecipientsFilter {
	return &DbTransportRecipientsFilter{config: m.config, predicateAdder: m}
}

// DbTransportRecipientsFilter provides a generic filtering capability at runtime for DbTransportRecipientsQuery.
type DbTransportRecipientsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbTransportRecipientsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbTransportRecipientsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbtransportrecipients.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbTransportRecipientsFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbtransportrecipients.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbTransportRecipientsFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbtransportrecipients.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbTransportRecipientsFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbtransportrecipients.FieldName))
}

// WhereDescription applies the entql string predicate on the Description field.
func (f *DbTransportRecipientsFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dbtransportrecipients.FieldDescription))
}

// WhereConfig applies the entql string predicate on the config field.
func (f *DbTransportRecipientsFilter) WhereConfig(p entql.StringP) {
	f.Where(p.Field(dbtransportrecipients.FieldConfig))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbTransportRecipientsFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbTransportRecipientsFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTransportInstance applies a predicate to check if query has an edge TransportInstance.
func (f *DbTransportRecipientsFilter) WhereHasTransportInstance() {
	f.Where(entql.HasEdge("TransportInstance"))
}

// WhereHasTransportInstanceWith applies a predicate to check if query has an edge TransportInstance with a given conditions (other predicates).
func (f *DbTransportRecipientsFilter) WhereHasTransportInstanceWith(preds ...predicate.DbTransportInstances) {
	f.Where(entql.HasEdgeWith("TransportInstance", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupRecipient applies a predicate to check if query has an edge GroupRecipient.
func (f *DbTransportRecipientsFilter) WhereHasGroupRecipient() {
	f.Where(entql.HasEdge("GroupRecipient"))
}

// WhereHasGroupRecipientWith applies a predicate to check if query has an edge GroupRecipient with a given conditions (other predicates).
func (f *DbTransportRecipientsFilter) WhereHasGroupRecipientWith(preds ...predicate.DbGroup) {
	f.Where(entql.HasEdgeWith("GroupRecipient", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUserRecipient applies a predicate to check if query has an edge UserRecipient.
func (f *DbTransportRecipientsFilter) WhereHasUserRecipient() {
	f.Where(entql.HasEdge("UserRecipient"))
}

// WhereHasUserRecipientWith applies a predicate to check if query has an edge UserRecipient with a given conditions (other predicates).
func (f *DbTransportRecipientsFilter) WhereHasUserRecipientWith(preds ...predicate.DbUser) {
	f.Where(entql.HasEdgeWith("UserRecipient", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (duq *DbUserQuery) addPredicate(pred func(s *sql.Selector)) {
	duq.predicates = append(duq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbUserQuery builder.
func (duq *DbUserQuery) Filter() *DbUserFilter {
	return &DbUserFilter{config: duq.config, predicateAdder: duq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbUserMutation builder.
func (m *DbUserMutation) Filter() *DbUserFilter {
	return &DbUserFilter{config: m.config, predicateAdder: m}
}

// DbUserFilter provides a generic filtering capability at runtime for DbUserQuery.
type DbUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbUserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbuser.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbUserFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbuser.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbUserFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbuser.FieldAppData))
}

// WhereEmail applies the entql string predicate on the Email field.
func (f *DbUserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(dbuser.FieldEmail))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbUserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbuser.FieldName))
}

// WhereDescription applies the entql string predicate on the Description field.
func (f *DbUserFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(dbuser.FieldDescription))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbUserFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbUserFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMetadata applies a predicate to check if query has an edge metadata.
func (f *DbUserFilter) WhereHasMetadata() {
	f.Where(entql.HasEdge("metadata"))
}

// WhereHasMetadataWith applies a predicate to check if query has an edge metadata with a given conditions (other predicates).
func (f *DbUserFilter) WhereHasMetadataWith(preds ...predicate.DbUserMetaData) {
	f.Where(entql.HasEdgeWith("metadata", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFilters applies a predicate to check if query has an edge filters.
func (f *DbUserFilter) WhereHasFilters() {
	f.Where(entql.HasEdge("filters"))
}

// WhereHasFiltersWith applies a predicate to check if query has an edge filters with a given conditions (other predicates).
func (f *DbUserFilter) WhereHasFiltersWith(preds ...predicate.DbFilter) {
	f.Where(entql.HasEdgeWith("filters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *DbUserFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *DbUserFilter) WhereHasGroupsWith(preds ...predicate.DbGroup) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTransportRecipients applies a predicate to check if query has an edge TransportRecipients.
func (f *DbUserFilter) WhereHasTransportRecipients() {
	f.Where(entql.HasEdge("TransportRecipients"))
}

// WhereHasTransportRecipientsWith applies a predicate to check if query has an edge TransportRecipients with a given conditions (other predicates).
func (f *DbUserFilter) WhereHasTransportRecipientsWith(preds ...predicate.DbTransportRecipients) {
	f.Where(entql.HasEdgeWith("TransportRecipients", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dumdq *DbUserMetaDataQuery) addPredicate(pred func(s *sql.Selector)) {
	dumdq.predicates = append(dumdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DbUserMetaDataQuery builder.
func (dumdq *DbUserMetaDataQuery) Filter() *DbUserMetaDataFilter {
	return &DbUserMetaDataFilter{config: dumdq.config, predicateAdder: dumdq}
}

// addPredicate implements the predicateAdder interface.
func (m *DbUserMetaDataMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DbUserMetaDataMutation builder.
func (m *DbUserMetaDataMutation) Filter() *DbUserMetaDataFilter {
	return &DbUserMetaDataFilter{config: m.config, predicateAdder: m}
}

// DbUserMetaDataFilter provides a generic filtering capability at runtime for DbUserMetaDataQuery.
type DbUserMetaDataFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DbUserMetaDataFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DbUserMetaDataFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dbusermetadata.FieldID))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *DbUserMetaDataFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(dbusermetadata.FieldTenantID))
}

// WhereAppData applies the entql json.RawMessage predicate on the AppData field.
func (f *DbUserMetaDataFilter) WhereAppData(p entql.BytesP) {
	f.Where(p.Field(dbusermetadata.FieldAppData))
}

// WhereName applies the entql string predicate on the Name field.
func (f *DbUserMetaDataFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dbusermetadata.FieldName))
}

// WhereValue applies the entql string predicate on the Value field.
func (f *DbUserMetaDataFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(dbusermetadata.FieldValue))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DbUserMetaDataFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DbUserMetaDataFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *DbUserMetaDataFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *DbUserMetaDataFilter) WhereHasUserWith(preds ...predicate.DbUser) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TenantQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenantQuery builder.
func (tq *TenantQuery) Filter() *TenantFilter {
	return &TenantFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenantMutation builder.
func (m *TenantMutation) Filter() *TenantFilter {
	return &TenantFilter{config: m.config, predicateAdder: m}
}

// TenantFilter provides a generic filtering capability at runtime for TenantQuery.
type TenantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TenantFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(tenant.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TenantFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tenant.FieldName))
}
