/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbfilter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/interfaces"
)

// DbFilterUpdate is the builder for updating DbFilter entities.
type DbFilterUpdate struct {
	config
	hooks    []Hook
	mutation *DbFilterMutation
}

// Where appends a list predicates to the DbFilterUpdate builder.
func (dfu *DbFilterUpdate) Where(ps ...predicate.DbFilter) *DbFilterUpdate {
	dfu.mutation.Where(ps...)
	return dfu
}

// SetTenantID sets the "tenant_id" field.
func (dfu *DbFilterUpdate) SetTenantID(i int) *DbFilterUpdate {
	dfu.mutation.SetTenantID(i)
	return dfu
}

// SetAppData sets the "AppData" field.
func (dfu *DbFilterUpdate) SetAppData(id interfaces.AppData) *DbFilterUpdate {
	dfu.mutation.SetAppData(id)
	return dfu
}

// SetNillableAppData sets the "AppData" field if the given value is not nil.
func (dfu *DbFilterUpdate) SetNillableAppData(id *interfaces.AppData) *DbFilterUpdate {
	if id != nil {
		dfu.SetAppData(*id)
	}
	return dfu
}

// ClearAppData clears the value of the "AppData" field.
func (dfu *DbFilterUpdate) ClearAppData() *DbFilterUpdate {
	dfu.mutation.ClearAppData()
	return dfu
}

// SetName sets the "Name" field.
func (dfu *DbFilterUpdate) SetName(s string) *DbFilterUpdate {
	dfu.mutation.SetName(s)
	return dfu
}

// SetDescription sets the "Description" field.
func (dfu *DbFilterUpdate) SetDescription(s string) *DbFilterUpdate {
	dfu.mutation.SetDescription(s)
	return dfu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dfu *DbFilterUpdate) SetNillableDescription(s *string) *DbFilterUpdate {
	if s != nil {
		dfu.SetDescription(*s)
	}
	return dfu
}

// ClearDescription clears the value of the "Description" field.
func (dfu *DbFilterUpdate) ClearDescription() *DbFilterUpdate {
	dfu.mutation.ClearDescription()
	return dfu
}

// SetType sets the "Type" field.
func (dfu *DbFilterUpdate) SetType(it interfaces.FilterType) *DbFilterUpdate {
	dfu.mutation.SetType(it)
	return dfu
}

// SetEnabled sets the "Enabled" field.
func (dfu *DbFilterUpdate) SetEnabled(b bool) *DbFilterUpdate {
	dfu.mutation.SetEnabled(b)
	return dfu
}

// SetNillableEnabled sets the "Enabled" field if the given value is not nil.
func (dfu *DbFilterUpdate) SetNillableEnabled(b *bool) *DbFilterUpdate {
	if b != nil {
		dfu.SetEnabled(*b)
	}
	return dfu
}

// SetConfig sets the "Config" field.
func (dfu *DbFilterUpdate) SetConfig(s string) *DbFilterUpdate {
	dfu.mutation.SetConfig(s)
	return dfu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dfu *DbFilterUpdate) SetTenant(t *Tenant) *DbFilterUpdate {
	return dfu.SetTenantID(t.ID)
}

// AddGroupIDs adds the "groups" edge to the DbGroup entity by IDs.
func (dfu *DbFilterUpdate) AddGroupIDs(ids ...int) *DbFilterUpdate {
	dfu.mutation.AddGroupIDs(ids...)
	return dfu
}

// AddGroups adds the "groups" edges to the DbGroup entity.
func (dfu *DbFilterUpdate) AddGroups(d ...*DbGroup) *DbFilterUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfu.AddGroupIDs(ids...)
}

// AddAppIDs adds the "app" edge to the DbApp entity by IDs.
func (dfu *DbFilterUpdate) AddAppIDs(ids ...int) *DbFilterUpdate {
	dfu.mutation.AddAppIDs(ids...)
	return dfu
}

// AddApp adds the "app" edges to the DbApp entity.
func (dfu *DbFilterUpdate) AddApp(d ...*DbApp) *DbFilterUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfu.AddAppIDs(ids...)
}

// AddUserIDs adds the "user" edge to the DbUser entity by IDs.
func (dfu *DbFilterUpdate) AddUserIDs(ids ...int) *DbFilterUpdate {
	dfu.mutation.AddUserIDs(ids...)
	return dfu
}

// AddUser adds the "user" edges to the DbUser entity.
func (dfu *DbFilterUpdate) AddUser(d ...*DbUser) *DbFilterUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfu.AddUserIDs(ids...)
}

// Mutation returns the DbFilterMutation object of the builder.
func (dfu *DbFilterUpdate) Mutation() *DbFilterMutation {
	return dfu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dfu *DbFilterUpdate) ClearTenant() *DbFilterUpdate {
	dfu.mutation.ClearTenant()
	return dfu
}

// ClearGroups clears all "groups" edges to the DbGroup entity.
func (dfu *DbFilterUpdate) ClearGroups() *DbFilterUpdate {
	dfu.mutation.ClearGroups()
	return dfu
}

// RemoveGroupIDs removes the "groups" edge to DbGroup entities by IDs.
func (dfu *DbFilterUpdate) RemoveGroupIDs(ids ...int) *DbFilterUpdate {
	dfu.mutation.RemoveGroupIDs(ids...)
	return dfu
}

// RemoveGroups removes "groups" edges to DbGroup entities.
func (dfu *DbFilterUpdate) RemoveGroups(d ...*DbGroup) *DbFilterUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfu.RemoveGroupIDs(ids...)
}

// ClearApp clears all "app" edges to the DbApp entity.
func (dfu *DbFilterUpdate) ClearApp() *DbFilterUpdate {
	dfu.mutation.ClearApp()
	return dfu
}

// RemoveAppIDs removes the "app" edge to DbApp entities by IDs.
func (dfu *DbFilterUpdate) RemoveAppIDs(ids ...int) *DbFilterUpdate {
	dfu.mutation.RemoveAppIDs(ids...)
	return dfu
}

// RemoveApp removes "app" edges to DbApp entities.
func (dfu *DbFilterUpdate) RemoveApp(d ...*DbApp) *DbFilterUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfu.RemoveAppIDs(ids...)
}

// ClearUser clears all "user" edges to the DbUser entity.
func (dfu *DbFilterUpdate) ClearUser() *DbFilterUpdate {
	dfu.mutation.ClearUser()
	return dfu
}

// RemoveUserIDs removes the "user" edge to DbUser entities by IDs.
func (dfu *DbFilterUpdate) RemoveUserIDs(ids ...int) *DbFilterUpdate {
	dfu.mutation.RemoveUserIDs(ids...)
	return dfu
}

// RemoveUser removes "user" edges to DbUser entities.
func (dfu *DbFilterUpdate) RemoveUser(d ...*DbUser) *DbFilterUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dfu *DbFilterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dfu.hooks) == 0 {
		if err = dfu.check(); err != nil {
			return 0, err
		}
		affected, err = dfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dfu.check(); err != nil {
				return 0, err
			}
			dfu.mutation = mutation
			affected, err = dfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dfu.hooks) - 1; i >= 0; i-- {
			if dfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dfu *DbFilterUpdate) SaveX(ctx context.Context) int {
	affected, err := dfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dfu *DbFilterUpdate) Exec(ctx context.Context) error {
	_, err := dfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfu *DbFilterUpdate) ExecX(ctx context.Context) {
	if err := dfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dfu *DbFilterUpdate) check() error {
	if v, ok := dfu.mutation.Name(); ok {
		if err := dbfilter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbFilter.Name": %w`, err)}
		}
	}
	if v, ok := dfu.mutation.GetType(); ok {
		if err := dbfilter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf(`ent: validator failed for field "DbFilter.Type": %w`, err)}
		}
	}
	if _, ok := dfu.mutation.TenantID(); dfu.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbFilter.tenant"`)
	}
	return nil
}

func (dfu *DbFilterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbfilter.Table,
			Columns: dbfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbfilter.FieldID,
			},
		},
	}
	if ps := dfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dfu.mutation.AppData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dbfilter.FieldAppData,
		})
	}
	if dfu.mutation.AppDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: dbfilter.FieldAppData,
		})
	}
	if value, ok := dfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldName,
		})
	}
	if value, ok := dfu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldDescription,
		})
	}
	if dfu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbfilter.FieldDescription,
		})
	}
	if value, ok := dfu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: dbfilter.FieldType,
		})
	}
	if value, ok := dfu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dbfilter.FieldEnabled,
		})
	}
	if value, ok := dfu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldConfig,
		})
	}
	if dfu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbfilter.TenantTable,
			Columns: []string{dbfilter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbfilter.TenantTable,
			Columns: []string{dbfilter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !dfu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.RemovedAppIDs(); len(nodes) > 0 && !dfu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.RemovedUserIDs(); len(nodes) > 0 && !dfu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DbFilterUpdateOne is the builder for updating a single DbFilter entity.
type DbFilterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbFilterMutation
}

// SetTenantID sets the "tenant_id" field.
func (dfuo *DbFilterUpdateOne) SetTenantID(i int) *DbFilterUpdateOne {
	dfuo.mutation.SetTenantID(i)
	return dfuo
}

// SetAppData sets the "AppData" field.
func (dfuo *DbFilterUpdateOne) SetAppData(id interfaces.AppData) *DbFilterUpdateOne {
	dfuo.mutation.SetAppData(id)
	return dfuo
}

// SetNillableAppData sets the "AppData" field if the given value is not nil.
func (dfuo *DbFilterUpdateOne) SetNillableAppData(id *interfaces.AppData) *DbFilterUpdateOne {
	if id != nil {
		dfuo.SetAppData(*id)
	}
	return dfuo
}

// ClearAppData clears the value of the "AppData" field.
func (dfuo *DbFilterUpdateOne) ClearAppData() *DbFilterUpdateOne {
	dfuo.mutation.ClearAppData()
	return dfuo
}

// SetName sets the "Name" field.
func (dfuo *DbFilterUpdateOne) SetName(s string) *DbFilterUpdateOne {
	dfuo.mutation.SetName(s)
	return dfuo
}

// SetDescription sets the "Description" field.
func (dfuo *DbFilterUpdateOne) SetDescription(s string) *DbFilterUpdateOne {
	dfuo.mutation.SetDescription(s)
	return dfuo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dfuo *DbFilterUpdateOne) SetNillableDescription(s *string) *DbFilterUpdateOne {
	if s != nil {
		dfuo.SetDescription(*s)
	}
	return dfuo
}

// ClearDescription clears the value of the "Description" field.
func (dfuo *DbFilterUpdateOne) ClearDescription() *DbFilterUpdateOne {
	dfuo.mutation.ClearDescription()
	return dfuo
}

// SetType sets the "Type" field.
func (dfuo *DbFilterUpdateOne) SetType(it interfaces.FilterType) *DbFilterUpdateOne {
	dfuo.mutation.SetType(it)
	return dfuo
}

// SetEnabled sets the "Enabled" field.
func (dfuo *DbFilterUpdateOne) SetEnabled(b bool) *DbFilterUpdateOne {
	dfuo.mutation.SetEnabled(b)
	return dfuo
}

// SetNillableEnabled sets the "Enabled" field if the given value is not nil.
func (dfuo *DbFilterUpdateOne) SetNillableEnabled(b *bool) *DbFilterUpdateOne {
	if b != nil {
		dfuo.SetEnabled(*b)
	}
	return dfuo
}

// SetConfig sets the "Config" field.
func (dfuo *DbFilterUpdateOne) SetConfig(s string) *DbFilterUpdateOne {
	dfuo.mutation.SetConfig(s)
	return dfuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dfuo *DbFilterUpdateOne) SetTenant(t *Tenant) *DbFilterUpdateOne {
	return dfuo.SetTenantID(t.ID)
}

// AddGroupIDs adds the "groups" edge to the DbGroup entity by IDs.
func (dfuo *DbFilterUpdateOne) AddGroupIDs(ids ...int) *DbFilterUpdateOne {
	dfuo.mutation.AddGroupIDs(ids...)
	return dfuo
}

// AddGroups adds the "groups" edges to the DbGroup entity.
func (dfuo *DbFilterUpdateOne) AddGroups(d ...*DbGroup) *DbFilterUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfuo.AddGroupIDs(ids...)
}

// AddAppIDs adds the "app" edge to the DbApp entity by IDs.
func (dfuo *DbFilterUpdateOne) AddAppIDs(ids ...int) *DbFilterUpdateOne {
	dfuo.mutation.AddAppIDs(ids...)
	return dfuo
}

// AddApp adds the "app" edges to the DbApp entity.
func (dfuo *DbFilterUpdateOne) AddApp(d ...*DbApp) *DbFilterUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfuo.AddAppIDs(ids...)
}

// AddUserIDs adds the "user" edge to the DbUser entity by IDs.
func (dfuo *DbFilterUpdateOne) AddUserIDs(ids ...int) *DbFilterUpdateOne {
	dfuo.mutation.AddUserIDs(ids...)
	return dfuo
}

// AddUser adds the "user" edges to the DbUser entity.
func (dfuo *DbFilterUpdateOne) AddUser(d ...*DbUser) *DbFilterUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfuo.AddUserIDs(ids...)
}

// Mutation returns the DbFilterMutation object of the builder.
func (dfuo *DbFilterUpdateOne) Mutation() *DbFilterMutation {
	return dfuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dfuo *DbFilterUpdateOne) ClearTenant() *DbFilterUpdateOne {
	dfuo.mutation.ClearTenant()
	return dfuo
}

// ClearGroups clears all "groups" edges to the DbGroup entity.
func (dfuo *DbFilterUpdateOne) ClearGroups() *DbFilterUpdateOne {
	dfuo.mutation.ClearGroups()
	return dfuo
}

// RemoveGroupIDs removes the "groups" edge to DbGroup entities by IDs.
func (dfuo *DbFilterUpdateOne) RemoveGroupIDs(ids ...int) *DbFilterUpdateOne {
	dfuo.mutation.RemoveGroupIDs(ids...)
	return dfuo
}

// RemoveGroups removes "groups" edges to DbGroup entities.
func (dfuo *DbFilterUpdateOne) RemoveGroups(d ...*DbGroup) *DbFilterUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfuo.RemoveGroupIDs(ids...)
}

// ClearApp clears all "app" edges to the DbApp entity.
func (dfuo *DbFilterUpdateOne) ClearApp() *DbFilterUpdateOne {
	dfuo.mutation.ClearApp()
	return dfuo
}

// RemoveAppIDs removes the "app" edge to DbApp entities by IDs.
func (dfuo *DbFilterUpdateOne) RemoveAppIDs(ids ...int) *DbFilterUpdateOne {
	dfuo.mutation.RemoveAppIDs(ids...)
	return dfuo
}

// RemoveApp removes "app" edges to DbApp entities.
func (dfuo *DbFilterUpdateOne) RemoveApp(d ...*DbApp) *DbFilterUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfuo.RemoveAppIDs(ids...)
}

// ClearUser clears all "user" edges to the DbUser entity.
func (dfuo *DbFilterUpdateOne) ClearUser() *DbFilterUpdateOne {
	dfuo.mutation.ClearUser()
	return dfuo
}

// RemoveUserIDs removes the "user" edge to DbUser entities by IDs.
func (dfuo *DbFilterUpdateOne) RemoveUserIDs(ids ...int) *DbFilterUpdateOne {
	dfuo.mutation.RemoveUserIDs(ids...)
	return dfuo
}

// RemoveUser removes "user" edges to DbUser entities.
func (dfuo *DbFilterUpdateOne) RemoveUser(d ...*DbUser) *DbFilterUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dfuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dfuo *DbFilterUpdateOne) Select(field string, fields ...string) *DbFilterUpdateOne {
	dfuo.fields = append([]string{field}, fields...)
	return dfuo
}

// Save executes the query and returns the updated DbFilter entity.
func (dfuo *DbFilterUpdateOne) Save(ctx context.Context) (*DbFilter, error) {
	var (
		err  error
		node *DbFilter
	)
	if len(dfuo.hooks) == 0 {
		if err = dfuo.check(); err != nil {
			return nil, err
		}
		node, err = dfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dfuo.check(); err != nil {
				return nil, err
			}
			dfuo.mutation = mutation
			node, err = dfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dfuo.hooks) - 1; i >= 0; i-- {
			if dfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbFilter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbFilterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dfuo *DbFilterUpdateOne) SaveX(ctx context.Context) *DbFilter {
	node, err := dfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dfuo *DbFilterUpdateOne) Exec(ctx context.Context) error {
	_, err := dfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfuo *DbFilterUpdateOne) ExecX(ctx context.Context) {
	if err := dfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dfuo *DbFilterUpdateOne) check() error {
	if v, ok := dfuo.mutation.Name(); ok {
		if err := dbfilter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbFilter.Name": %w`, err)}
		}
	}
	if v, ok := dfuo.mutation.GetType(); ok {
		if err := dbfilter.TypeValidator(v); err != nil {
			return &ValidationError{Name: "Type", err: fmt.Errorf(`ent: validator failed for field "DbFilter.Type": %w`, err)}
		}
	}
	if _, ok := dfuo.mutation.TenantID(); dfuo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbFilter.tenant"`)
	}
	return nil
}

func (dfuo *DbFilterUpdateOne) sqlSave(ctx context.Context) (_node *DbFilter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbfilter.Table,
			Columns: dbfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbfilter.FieldID,
			},
		},
	}
	id, ok := dfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbFilter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbfilter.FieldID)
		for _, f := range fields {
			if !dbfilter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbfilter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dfuo.mutation.AppData(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dbfilter.FieldAppData,
		})
	}
	if dfuo.mutation.AppDataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: dbfilter.FieldAppData,
		})
	}
	if value, ok := dfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldName,
		})
	}
	if value, ok := dfuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldDescription,
		})
	}
	if dfuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbfilter.FieldDescription,
		})
	}
	if value, ok := dfuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: dbfilter.FieldType,
		})
	}
	if value, ok := dfuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dbfilter.FieldEnabled,
		})
	}
	if value, ok := dfuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbfilter.FieldConfig,
		})
	}
	if dfuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbfilter.TenantTable,
			Columns: []string{dbfilter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbfilter.TenantTable,
			Columns: []string{dbfilter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !dfuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   dbfilter.GroupsTable,
			Columns: dbfilter.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.RemovedAppIDs(); len(nodes) > 0 && !dfuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.AppTable,
			Columns: dbfilter.AppPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbapp.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dfuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !dfuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dfuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dbfilter.UserTable,
			Columns: dbfilter.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DbFilter{config: dfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbfilter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
