/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbgroup"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportinstances"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbtransportrecipients"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbuser"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
)

// DbTransportRecipientsUpdate is the builder for updating DbTransportRecipients entities.
type DbTransportRecipientsUpdate struct {
	config
	hooks    []Hook
	mutation *DbTransportRecipientsMutation
}

// Where appends a list predicates to the DbTransportRecipientsUpdate builder.
func (dtru *DbTransportRecipientsUpdate) Where(ps ...predicate.DbTransportRecipients) *DbTransportRecipientsUpdate {
	dtru.mutation.Where(ps...)
	return dtru
}

// SetTenantID sets the "tenant_id" field.
func (dtru *DbTransportRecipientsUpdate) SetTenantID(i int) *DbTransportRecipientsUpdate {
	dtru.mutation.SetTenantID(i)
	return dtru
}

// SetName sets the "Name" field.
func (dtru *DbTransportRecipientsUpdate) SetName(s string) *DbTransportRecipientsUpdate {
	dtru.mutation.SetName(s)
	return dtru
}

// SetDescription sets the "Description" field.
func (dtru *DbTransportRecipientsUpdate) SetDescription(s string) *DbTransportRecipientsUpdate {
	dtru.mutation.SetDescription(s)
	return dtru
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dtru *DbTransportRecipientsUpdate) SetNillableDescription(s *string) *DbTransportRecipientsUpdate {
	if s != nil {
		dtru.SetDescription(*s)
	}
	return dtru
}

// ClearDescription clears the value of the "Description" field.
func (dtru *DbTransportRecipientsUpdate) ClearDescription() *DbTransportRecipientsUpdate {
	dtru.mutation.ClearDescription()
	return dtru
}

// SetConfig sets the "config" field.
func (dtru *DbTransportRecipientsUpdate) SetConfig(s string) *DbTransportRecipientsUpdate {
	dtru.mutation.SetConfig(s)
	return dtru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dtru *DbTransportRecipientsUpdate) SetTenant(t *Tenant) *DbTransportRecipientsUpdate {
	return dtru.SetTenantID(t.ID)
}

// SetTransportInstanceID sets the "TransportInstance" edge to the DbTransportInstances entity by ID.
func (dtru *DbTransportRecipientsUpdate) SetTransportInstanceID(id int) *DbTransportRecipientsUpdate {
	dtru.mutation.SetTransportInstanceID(id)
	return dtru
}

// SetTransportInstance sets the "TransportInstance" edge to the DbTransportInstances entity.
func (dtru *DbTransportRecipientsUpdate) SetTransportInstance(d *DbTransportInstances) *DbTransportRecipientsUpdate {
	return dtru.SetTransportInstanceID(d.ID)
}

// SetGroupRecipientID sets the "GroupRecipient" edge to the DbGroup entity by ID.
func (dtru *DbTransportRecipientsUpdate) SetGroupRecipientID(id int) *DbTransportRecipientsUpdate {
	dtru.mutation.SetGroupRecipientID(id)
	return dtru
}

// SetNillableGroupRecipientID sets the "GroupRecipient" edge to the DbGroup entity by ID if the given value is not nil.
func (dtru *DbTransportRecipientsUpdate) SetNillableGroupRecipientID(id *int) *DbTransportRecipientsUpdate {
	if id != nil {
		dtru = dtru.SetGroupRecipientID(*id)
	}
	return dtru
}

// SetGroupRecipient sets the "GroupRecipient" edge to the DbGroup entity.
func (dtru *DbTransportRecipientsUpdate) SetGroupRecipient(d *DbGroup) *DbTransportRecipientsUpdate {
	return dtru.SetGroupRecipientID(d.ID)
}

// SetUserRecipientID sets the "UserRecipient" edge to the DbUser entity by ID.
func (dtru *DbTransportRecipientsUpdate) SetUserRecipientID(id int) *DbTransportRecipientsUpdate {
	dtru.mutation.SetUserRecipientID(id)
	return dtru
}

// SetNillableUserRecipientID sets the "UserRecipient" edge to the DbUser entity by ID if the given value is not nil.
func (dtru *DbTransportRecipientsUpdate) SetNillableUserRecipientID(id *int) *DbTransportRecipientsUpdate {
	if id != nil {
		dtru = dtru.SetUserRecipientID(*id)
	}
	return dtru
}

// SetUserRecipient sets the "UserRecipient" edge to the DbUser entity.
func (dtru *DbTransportRecipientsUpdate) SetUserRecipient(d *DbUser) *DbTransportRecipientsUpdate {
	return dtru.SetUserRecipientID(d.ID)
}

// Mutation returns the DbTransportRecipientsMutation object of the builder.
func (dtru *DbTransportRecipientsUpdate) Mutation() *DbTransportRecipientsMutation {
	return dtru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dtru *DbTransportRecipientsUpdate) ClearTenant() *DbTransportRecipientsUpdate {
	dtru.mutation.ClearTenant()
	return dtru
}

// ClearTransportInstance clears the "TransportInstance" edge to the DbTransportInstances entity.
func (dtru *DbTransportRecipientsUpdate) ClearTransportInstance() *DbTransportRecipientsUpdate {
	dtru.mutation.ClearTransportInstance()
	return dtru
}

// ClearGroupRecipient clears the "GroupRecipient" edge to the DbGroup entity.
func (dtru *DbTransportRecipientsUpdate) ClearGroupRecipient() *DbTransportRecipientsUpdate {
	dtru.mutation.ClearGroupRecipient()
	return dtru
}

// ClearUserRecipient clears the "UserRecipient" edge to the DbUser entity.
func (dtru *DbTransportRecipientsUpdate) ClearUserRecipient() *DbTransportRecipientsUpdate {
	dtru.mutation.ClearUserRecipient()
	return dtru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtru *DbTransportRecipientsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dtru.hooks) == 0 {
		if err = dtru.check(); err != nil {
			return 0, err
		}
		affected, err = dtru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbTransportRecipientsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtru.check(); err != nil {
				return 0, err
			}
			dtru.mutation = mutation
			affected, err = dtru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dtru.hooks) - 1; i >= 0; i-- {
			if dtru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtru *DbTransportRecipientsUpdate) SaveX(ctx context.Context) int {
	affected, err := dtru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtru *DbTransportRecipientsUpdate) Exec(ctx context.Context) error {
	_, err := dtru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtru *DbTransportRecipientsUpdate) ExecX(ctx context.Context) {
	if err := dtru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtru *DbTransportRecipientsUpdate) check() error {
	if v, ok := dtru.mutation.Name(); ok {
		if err := dbtransportrecipients.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbTransportRecipients.Name": %w`, err)}
		}
	}
	if _, ok := dtru.mutation.TenantID(); dtru.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbTransportRecipients.tenant"`)
	}
	if _, ok := dtru.mutation.TransportInstanceID(); dtru.mutation.TransportInstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbTransportRecipients.TransportInstance"`)
	}
	return nil
}

func (dtru *DbTransportRecipientsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbtransportrecipients.Table,
			Columns: dbtransportrecipients.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbtransportrecipients.FieldID,
			},
		},
	}
	if ps := dtru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportrecipients.FieldName,
		})
	}
	if value, ok := dtru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportrecipients.FieldDescription,
		})
	}
	if dtru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbtransportrecipients.FieldDescription,
		})
	}
	if value, ok := dtru.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportrecipients.FieldConfig,
		})
	}
	if dtru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportrecipients.TenantTable,
			Columns: []string{dbtransportrecipients.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportrecipients.TenantTable,
			Columns: []string{dbtransportrecipients.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtru.mutation.TransportInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.TransportInstanceTable,
			Columns: []string{dbtransportrecipients.TransportInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportinstances.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtru.mutation.TransportInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.TransportInstanceTable,
			Columns: []string{dbtransportrecipients.TransportInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportinstances.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtru.mutation.GroupRecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.GroupRecipientTable,
			Columns: []string{dbtransportrecipients.GroupRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtru.mutation.GroupRecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.GroupRecipientTable,
			Columns: []string{dbtransportrecipients.GroupRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtru.mutation.UserRecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.UserRecipientTable,
			Columns: []string{dbtransportrecipients.UserRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtru.mutation.UserRecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.UserRecipientTable,
			Columns: []string{dbtransportrecipients.UserRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbtransportrecipients.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DbTransportRecipientsUpdateOne is the builder for updating a single DbTransportRecipients entity.
type DbTransportRecipientsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DbTransportRecipientsMutation
}

// SetTenantID sets the "tenant_id" field.
func (dtruo *DbTransportRecipientsUpdateOne) SetTenantID(i int) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetTenantID(i)
	return dtruo
}

// SetName sets the "Name" field.
func (dtruo *DbTransportRecipientsUpdateOne) SetName(s string) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetName(s)
	return dtruo
}

// SetDescription sets the "Description" field.
func (dtruo *DbTransportRecipientsUpdateOne) SetDescription(s string) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetDescription(s)
	return dtruo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (dtruo *DbTransportRecipientsUpdateOne) SetNillableDescription(s *string) *DbTransportRecipientsUpdateOne {
	if s != nil {
		dtruo.SetDescription(*s)
	}
	return dtruo
}

// ClearDescription clears the value of the "Description" field.
func (dtruo *DbTransportRecipientsUpdateOne) ClearDescription() *DbTransportRecipientsUpdateOne {
	dtruo.mutation.ClearDescription()
	return dtruo
}

// SetConfig sets the "config" field.
func (dtruo *DbTransportRecipientsUpdateOne) SetConfig(s string) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetConfig(s)
	return dtruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dtruo *DbTransportRecipientsUpdateOne) SetTenant(t *Tenant) *DbTransportRecipientsUpdateOne {
	return dtruo.SetTenantID(t.ID)
}

// SetTransportInstanceID sets the "TransportInstance" edge to the DbTransportInstances entity by ID.
func (dtruo *DbTransportRecipientsUpdateOne) SetTransportInstanceID(id int) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetTransportInstanceID(id)
	return dtruo
}

// SetTransportInstance sets the "TransportInstance" edge to the DbTransportInstances entity.
func (dtruo *DbTransportRecipientsUpdateOne) SetTransportInstance(d *DbTransportInstances) *DbTransportRecipientsUpdateOne {
	return dtruo.SetTransportInstanceID(d.ID)
}

// SetGroupRecipientID sets the "GroupRecipient" edge to the DbGroup entity by ID.
func (dtruo *DbTransportRecipientsUpdateOne) SetGroupRecipientID(id int) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetGroupRecipientID(id)
	return dtruo
}

// SetNillableGroupRecipientID sets the "GroupRecipient" edge to the DbGroup entity by ID if the given value is not nil.
func (dtruo *DbTransportRecipientsUpdateOne) SetNillableGroupRecipientID(id *int) *DbTransportRecipientsUpdateOne {
	if id != nil {
		dtruo = dtruo.SetGroupRecipientID(*id)
	}
	return dtruo
}

// SetGroupRecipient sets the "GroupRecipient" edge to the DbGroup entity.
func (dtruo *DbTransportRecipientsUpdateOne) SetGroupRecipient(d *DbGroup) *DbTransportRecipientsUpdateOne {
	return dtruo.SetGroupRecipientID(d.ID)
}

// SetUserRecipientID sets the "UserRecipient" edge to the DbUser entity by ID.
func (dtruo *DbTransportRecipientsUpdateOne) SetUserRecipientID(id int) *DbTransportRecipientsUpdateOne {
	dtruo.mutation.SetUserRecipientID(id)
	return dtruo
}

// SetNillableUserRecipientID sets the "UserRecipient" edge to the DbUser entity by ID if the given value is not nil.
func (dtruo *DbTransportRecipientsUpdateOne) SetNillableUserRecipientID(id *int) *DbTransportRecipientsUpdateOne {
	if id != nil {
		dtruo = dtruo.SetUserRecipientID(*id)
	}
	return dtruo
}

// SetUserRecipient sets the "UserRecipient" edge to the DbUser entity.
func (dtruo *DbTransportRecipientsUpdateOne) SetUserRecipient(d *DbUser) *DbTransportRecipientsUpdateOne {
	return dtruo.SetUserRecipientID(d.ID)
}

// Mutation returns the DbTransportRecipientsMutation object of the builder.
func (dtruo *DbTransportRecipientsUpdateOne) Mutation() *DbTransportRecipientsMutation {
	return dtruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dtruo *DbTransportRecipientsUpdateOne) ClearTenant() *DbTransportRecipientsUpdateOne {
	dtruo.mutation.ClearTenant()
	return dtruo
}

// ClearTransportInstance clears the "TransportInstance" edge to the DbTransportInstances entity.
func (dtruo *DbTransportRecipientsUpdateOne) ClearTransportInstance() *DbTransportRecipientsUpdateOne {
	dtruo.mutation.ClearTransportInstance()
	return dtruo
}

// ClearGroupRecipient clears the "GroupRecipient" edge to the DbGroup entity.
func (dtruo *DbTransportRecipientsUpdateOne) ClearGroupRecipient() *DbTransportRecipientsUpdateOne {
	dtruo.mutation.ClearGroupRecipient()
	return dtruo
}

// ClearUserRecipient clears the "UserRecipient" edge to the DbUser entity.
func (dtruo *DbTransportRecipientsUpdateOne) ClearUserRecipient() *DbTransportRecipientsUpdateOne {
	dtruo.mutation.ClearUserRecipient()
	return dtruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtruo *DbTransportRecipientsUpdateOne) Select(field string, fields ...string) *DbTransportRecipientsUpdateOne {
	dtruo.fields = append([]string{field}, fields...)
	return dtruo
}

// Save executes the query and returns the updated DbTransportRecipients entity.
func (dtruo *DbTransportRecipientsUpdateOne) Save(ctx context.Context) (*DbTransportRecipients, error) {
	var (
		err  error
		node *DbTransportRecipients
	)
	if len(dtruo.hooks) == 0 {
		if err = dtruo.check(); err != nil {
			return nil, err
		}
		node, err = dtruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DbTransportRecipientsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtruo.check(); err != nil {
				return nil, err
			}
			dtruo.mutation = mutation
			node, err = dtruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtruo.hooks) - 1; i >= 0; i-- {
			if dtruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dtruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DbTransportRecipients)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DbTransportRecipientsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtruo *DbTransportRecipientsUpdateOne) SaveX(ctx context.Context) *DbTransportRecipients {
	node, err := dtruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtruo *DbTransportRecipientsUpdateOne) Exec(ctx context.Context) error {
	_, err := dtruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtruo *DbTransportRecipientsUpdateOne) ExecX(ctx context.Context) {
	if err := dtruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtruo *DbTransportRecipientsUpdateOne) check() error {
	if v, ok := dtruo.mutation.Name(); ok {
		if err := dbtransportrecipients.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "DbTransportRecipients.Name": %w`, err)}
		}
	}
	if _, ok := dtruo.mutation.TenantID(); dtruo.mutation.TenantCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbTransportRecipients.tenant"`)
	}
	if _, ok := dtruo.mutation.TransportInstanceID(); dtruo.mutation.TransportInstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DbTransportRecipients.TransportInstance"`)
	}
	return nil
}

func (dtruo *DbTransportRecipientsUpdateOne) sqlSave(ctx context.Context) (_node *DbTransportRecipients, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dbtransportrecipients.Table,
			Columns: dbtransportrecipients.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dbtransportrecipients.FieldID,
			},
		},
	}
	id, ok := dtruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DbTransportRecipients.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dbtransportrecipients.FieldID)
		for _, f := range fields {
			if !dbtransportrecipients.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dbtransportrecipients.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportrecipients.FieldName,
		})
	}
	if value, ok := dtruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportrecipients.FieldDescription,
		})
	}
	if dtruo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dbtransportrecipients.FieldDescription,
		})
	}
	if value, ok := dtruo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dbtransportrecipients.FieldConfig,
		})
	}
	if dtruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportrecipients.TenantTable,
			Columns: []string{dbtransportrecipients.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   dbtransportrecipients.TenantTable,
			Columns: []string{dbtransportrecipients.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtruo.mutation.TransportInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.TransportInstanceTable,
			Columns: []string{dbtransportrecipients.TransportInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportinstances.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtruo.mutation.TransportInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.TransportInstanceTable,
			Columns: []string{dbtransportrecipients.TransportInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbtransportinstances.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtruo.mutation.GroupRecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.GroupRecipientTable,
			Columns: []string{dbtransportrecipients.GroupRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtruo.mutation.GroupRecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.GroupRecipientTable,
			Columns: []string{dbtransportrecipients.GroupRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dtruo.mutation.UserRecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.UserRecipientTable,
			Columns: []string{dbtransportrecipients.UserRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dtruo.mutation.UserRecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dbtransportrecipients.UserRecipientTable,
			Columns: []string{dbtransportrecipients.UserRecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dbuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DbTransportRecipients{config: dtruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dbtransportrecipients.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
