/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package dbmessage

import (
	"time"

	"entgo.io/ent"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dbmessage type in the database.
	Label = "db_message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAppData holds the string denoting the appdata field in the database.
	FieldAppData = "app_data"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldShortMsg holds the string denoting the shortmsg field in the database.
	FieldShortMsg = "short_msg"
	// FieldTopic holds the string denoting the topic field in the database.
	FieldTopic = "topic"
	// FieldSeverity holds the string denoting the severity field in the database.
	FieldSeverity = "severity"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeFields holds the string denoting the fields edge name in mutations.
	EdgeFields = "fields"
	// EdgeApp holds the string denoting the app edge name in mutations.
	EdgeApp = "app"
	// Table holds the table name of the dbmessage in the database.
	Table = "db_messages"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "db_messages"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// FieldsTable is the table that holds the fields relation/edge.
	FieldsTable = "db_message_fields"
	// FieldsInverseTable is the table name for the DbMessageFields entity.
	// It exists in this package in order to avoid circular dependency with the "dbmessagefields" package.
	FieldsInverseTable = "db_message_fields"
	// FieldsColumn is the table column denoting the fields relation/edge.
	FieldsColumn = "db_message_fields"
	// AppTable is the table that holds the app relation/edge.
	AppTable = "db_messages"
	// AppInverseTable is the table name for the DbApp entity.
	// It exists in this package in order to avoid circular dependency with the "dbapp" package.
	AppInverseTable = "db_apps"
	// AppColumn is the table column denoting the app relation/edge.
	AppColumn = "db_app_messages"
)

// Columns holds all SQL columns for dbmessage fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldAppData,
	FieldMessage,
	FieldShortMsg,
	FieldTopic,
	FieldSeverity,
	FieldTimestamp,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "db_messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"db_app_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/Fishwaldo/mouthpiece/pkg/ent/runtime"
//
var (
	Hooks  [3]ent.Hook
	Policy ent.Policy
	// MessageValidator is a validator for the "Message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// TopicValidator is a validator for the "Topic" field. It is called by the builders before save.
	TopicValidator func(string) error
	// DefaultSeverity holds the default value on creation for the "Severity" field.
	DefaultSeverity int
	// SeverityValidator is a validator for the "Severity" field. It is called by the builders before save.
	SeverityValidator func(int) error
	// DefaultTimestamp holds the default value on creation for the "Timestamp" field.
	DefaultTimestamp time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
