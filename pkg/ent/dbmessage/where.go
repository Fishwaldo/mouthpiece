/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package dbmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantID), v))
	})
}

// Message applies equality check predicate on the "Message" field. It's identical to MessageEQ.
func Message(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// ShortMsg applies equality check predicate on the "ShortMsg" field. It's identical to ShortMsgEQ.
func ShortMsg(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortMsg), v))
	})
}

// Topic applies equality check predicate on the "Topic" field. It's identical to TopicEQ.
func Topic(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopic), v))
	})
}

// Severity applies equality check predicate on the "Severity" field. It's identical to SeverityEQ.
func Severity(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverity), v))
	})
}

// Timestamp applies equality check predicate on the "Timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenantID), v))
	})
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenantID), v))
	})
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenantID), v...))
	})
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenantID), v...))
	})
}

// AppDataIsNil applies the IsNil predicate on the "AppData" field.
func AppDataIsNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppData)))
	})
}

// AppDataNotNil applies the NotNil predicate on the "AppData" field.
func AppDataNotNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppData)))
	})
}

// MessageEQ applies the EQ predicate on the "Message" field.
func MessageEQ(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "Message" field.
func MessageNEQ(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "Message" field.
func MessageIn(vs ...string) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "Message" field.
func MessageNotIn(vs ...string) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "Message" field.
func MessageGT(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "Message" field.
func MessageGTE(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "Message" field.
func MessageLT(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "Message" field.
func MessageLTE(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "Message" field.
func MessageContains(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "Message" field.
func MessageHasPrefix(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "Message" field.
func MessageHasSuffix(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "Message" field.
func MessageEqualFold(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "Message" field.
func MessageContainsFold(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// ShortMsgEQ applies the EQ predicate on the "ShortMsg" field.
func ShortMsgEQ(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShortMsg), v))
	})
}

// ShortMsgNEQ applies the NEQ predicate on the "ShortMsg" field.
func ShortMsgNEQ(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShortMsg), v))
	})
}

// ShortMsgIn applies the In predicate on the "ShortMsg" field.
func ShortMsgIn(vs ...string) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldShortMsg), v...))
	})
}

// ShortMsgNotIn applies the NotIn predicate on the "ShortMsg" field.
func ShortMsgNotIn(vs ...string) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldShortMsg), v...))
	})
}

// ShortMsgGT applies the GT predicate on the "ShortMsg" field.
func ShortMsgGT(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShortMsg), v))
	})
}

// ShortMsgGTE applies the GTE predicate on the "ShortMsg" field.
func ShortMsgGTE(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShortMsg), v))
	})
}

// ShortMsgLT applies the LT predicate on the "ShortMsg" field.
func ShortMsgLT(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShortMsg), v))
	})
}

// ShortMsgLTE applies the LTE predicate on the "ShortMsg" field.
func ShortMsgLTE(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShortMsg), v))
	})
}

// ShortMsgContains applies the Contains predicate on the "ShortMsg" field.
func ShortMsgContains(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShortMsg), v))
	})
}

// ShortMsgHasPrefix applies the HasPrefix predicate on the "ShortMsg" field.
func ShortMsgHasPrefix(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShortMsg), v))
	})
}

// ShortMsgHasSuffix applies the HasSuffix predicate on the "ShortMsg" field.
func ShortMsgHasSuffix(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShortMsg), v))
	})
}

// ShortMsgIsNil applies the IsNil predicate on the "ShortMsg" field.
func ShortMsgIsNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShortMsg)))
	})
}

// ShortMsgNotNil applies the NotNil predicate on the "ShortMsg" field.
func ShortMsgNotNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShortMsg)))
	})
}

// ShortMsgEqualFold applies the EqualFold predicate on the "ShortMsg" field.
func ShortMsgEqualFold(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShortMsg), v))
	})
}

// ShortMsgContainsFold applies the ContainsFold predicate on the "ShortMsg" field.
func ShortMsgContainsFold(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShortMsg), v))
	})
}

// TopicEQ applies the EQ predicate on the "Topic" field.
func TopicEQ(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopic), v))
	})
}

// TopicNEQ applies the NEQ predicate on the "Topic" field.
func TopicNEQ(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopic), v))
	})
}

// TopicIn applies the In predicate on the "Topic" field.
func TopicIn(vs ...string) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTopic), v...))
	})
}

// TopicNotIn applies the NotIn predicate on the "Topic" field.
func TopicNotIn(vs ...string) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTopic), v...))
	})
}

// TopicGT applies the GT predicate on the "Topic" field.
func TopicGT(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopic), v))
	})
}

// TopicGTE applies the GTE predicate on the "Topic" field.
func TopicGTE(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopic), v))
	})
}

// TopicLT applies the LT predicate on the "Topic" field.
func TopicLT(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopic), v))
	})
}

// TopicLTE applies the LTE predicate on the "Topic" field.
func TopicLTE(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopic), v))
	})
}

// TopicContains applies the Contains predicate on the "Topic" field.
func TopicContains(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTopic), v))
	})
}

// TopicHasPrefix applies the HasPrefix predicate on the "Topic" field.
func TopicHasPrefix(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTopic), v))
	})
}

// TopicHasSuffix applies the HasSuffix predicate on the "Topic" field.
func TopicHasSuffix(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTopic), v))
	})
}

// TopicIsNil applies the IsNil predicate on the "Topic" field.
func TopicIsNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTopic)))
	})
}

// TopicNotNil applies the NotNil predicate on the "Topic" field.
func TopicNotNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTopic)))
	})
}

// TopicEqualFold applies the EqualFold predicate on the "Topic" field.
func TopicEqualFold(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTopic), v))
	})
}

// TopicContainsFold applies the ContainsFold predicate on the "Topic" field.
func TopicContainsFold(v string) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTopic), v))
	})
}

// SeverityEQ applies the EQ predicate on the "Severity" field.
func SeverityEQ(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeverity), v))
	})
}

// SeverityNEQ applies the NEQ predicate on the "Severity" field.
func SeverityNEQ(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeverity), v))
	})
}

// SeverityIn applies the In predicate on the "Severity" field.
func SeverityIn(vs ...int) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSeverity), v...))
	})
}

// SeverityNotIn applies the NotIn predicate on the "Severity" field.
func SeverityNotIn(vs ...int) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSeverity), v...))
	})
}

// SeverityGT applies the GT predicate on the "Severity" field.
func SeverityGT(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeverity), v))
	})
}

// SeverityGTE applies the GTE predicate on the "Severity" field.
func SeverityGTE(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeverity), v))
	})
}

// SeverityLT applies the LT predicate on the "Severity" field.
func SeverityLT(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeverity), v))
	})
}

// SeverityLTE applies the LTE predicate on the "Severity" field.
func SeverityLTE(v int) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeverity), v))
	})
}

// SeverityIsNil applies the IsNil predicate on the "Severity" field.
func SeverityIsNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSeverity)))
	})
}

// SeverityNotNil applies the NotNil predicate on the "Severity" field.
func SeverityNotNil() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSeverity)))
	})
}

// TimestampEQ applies the EQ predicate on the "Timestamp" field.
func TimestampEQ(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "Timestamp" field.
func TimestampNEQ(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "Timestamp" field.
func TimestampIn(vs ...time.Time) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "Timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.DbMessage {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "Timestamp" field.
func TimestampGT(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "Timestamp" field.
func TimestampGTE(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "Timestamp" field.
func TimestampLT(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "Timestamp" field.
func TimestampLTE(v time.Time) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TenantInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFields applies the HasEdge predicate on the "fields" edge.
func HasFields() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FieldsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FieldsTable, FieldsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFieldsWith applies the HasEdge predicate on the "fields" edge with a given conditions (other predicates).
func HasFieldsWith(preds ...predicate.DbMessageFields) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FieldsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FieldsTable, FieldsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppTable, AppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.DbApp) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppTable, AppColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DbMessage) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DbMessage) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DbMessage) predicate.DbMessage {
	return predicate.DbMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
