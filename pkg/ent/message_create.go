/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/app"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/message"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/msgvar"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/google/uuid"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
}

// SetTenantID sets the "tenant_id" field.
func (mc *MessageCreate) SetTenantID(i int) *MessageCreate {
	mc.mutation.SetTenantID(i)
	return mc
}

// SetMessage sets the "Message" field.
func (mc *MessageCreate) SetMessage(s string) *MessageCreate {
	mc.mutation.SetMessage(s)
	return mc
}

// SetShortMsg sets the "ShortMsg" field.
func (mc *MessageCreate) SetShortMsg(s string) *MessageCreate {
	mc.mutation.SetShortMsg(s)
	return mc
}

// SetNillableShortMsg sets the "ShortMsg" field if the given value is not nil.
func (mc *MessageCreate) SetNillableShortMsg(s *string) *MessageCreate {
	if s != nil {
		mc.SetShortMsg(*s)
	}
	return mc
}

// SetTopic sets the "Topic" field.
func (mc *MessageCreate) SetTopic(s string) *MessageCreate {
	mc.mutation.SetTopic(s)
	return mc
}

// SetNillableTopic sets the "Topic" field if the given value is not nil.
func (mc *MessageCreate) SetNillableTopic(s *string) *MessageCreate {
	if s != nil {
		mc.SetTopic(*s)
	}
	return mc
}

// SetSeverity sets the "Severity" field.
func (mc *MessageCreate) SetSeverity(i int) *MessageCreate {
	mc.mutation.SetSeverity(i)
	return mc
}

// SetNillableSeverity sets the "Severity" field if the given value is not nil.
func (mc *MessageCreate) SetNillableSeverity(i *int) *MessageCreate {
	if i != nil {
		mc.SetSeverity(*i)
	}
	return mc
}

// SetTimestamp sets the "Timestamp" field.
func (mc *MessageCreate) SetTimestamp(t time.Time) *MessageCreate {
	mc.mutation.SetTimestamp(t)
	return mc
}

// SetNillableTimestamp sets the "Timestamp" field if the given value is not nil.
func (mc *MessageCreate) SetNillableTimestamp(t *time.Time) *MessageCreate {
	if t != nil {
		mc.SetTimestamp(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MessageCreate) SetID(u uuid.UUID) *MessageCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableID(u *uuid.UUID) *MessageCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (mc *MessageCreate) SetTenant(t *Tenant) *MessageCreate {
	return mc.SetTenantID(t.ID)
}

// AddVarIDs adds the "vars" edge to the MsgVar entity by IDs.
func (mc *MessageCreate) AddVarIDs(ids ...int) *MessageCreate {
	mc.mutation.AddVarIDs(ids...)
	return mc
}

// AddVars adds the "vars" edges to the MsgVar entity.
func (mc *MessageCreate) AddVars(m ...*MsgVar) *MessageCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddVarIDs(ids...)
}

// SetAppID sets the "app" edge to the App entity by ID.
func (mc *MessageCreate) SetAppID(id int) *MessageCreate {
	mc.mutation.SetAppID(id)
	return mc
}

// SetApp sets the "app" edge to the App entity.
func (mc *MessageCreate) SetApp(a *App) *MessageCreate {
	return mc.SetAppID(a.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mc *MessageCreate) Mutation() *MessageMutation {
	return mc.mutation
}

// Save creates the Message in the database.
func (mc *MessageCreate) Save(ctx context.Context) (*Message, error) {
	var (
		err  error
		node *Message
	)
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Message)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MessageCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MessageCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MessageCreate) defaults() error {
	if _, ok := mc.mutation.Severity(); !ok {
		v := message.DefaultSeverity
		mc.mutation.SetSeverity(v)
	}
	if _, ok := mc.mutation.Timestamp(); !ok {
		v := message.DefaultTimestamp
		mc.mutation.SetTimestamp(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		if message.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized message.DefaultID (forgotten import ent/runtime?)")
		}
		v := message.DefaultID()
		mc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessageCreate) check() error {
	if _, ok := mc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Message.tenant_id"`)}
	}
	if _, ok := mc.mutation.Message(); !ok {
		return &ValidationError{Name: "Message", err: errors.New(`ent: missing required field "Message.Message"`)}
	}
	if v, ok := mc.mutation.Message(); ok {
		if err := message.MessageValidator(v); err != nil {
			return &ValidationError{Name: "Message", err: fmt.Errorf(`ent: validator failed for field "Message.Message": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Topic(); ok {
		if err := message.TopicValidator(v); err != nil {
			return &ValidationError{Name: "Topic", err: fmt.Errorf(`ent: validator failed for field "Message.Topic": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Severity(); ok {
		if err := message.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "Severity", err: fmt.Errorf(`ent: validator failed for field "Message.Severity": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "Timestamp", err: errors.New(`ent: missing required field "Message.Timestamp"`)}
	}
	if _, ok := mc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Message.tenant"`)}
	}
	if _, ok := mc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "Message.app"`)}
	}
	return nil
}

func (mc *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mc *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: message.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: message.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := mc.mutation.ShortMsg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldShortMsg,
		})
		_node.ShortMsg = &value
	}
	if value, ok := mc.mutation.Topic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldTopic,
		})
		_node.Topic = &value
	}
	if value, ok := mc.mutation.Severity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: message.FieldSeverity,
		})
		_node.Severity = value
	}
	if value, ok := mc.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if nodes := mc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.TenantTable,
			Columns: []string{message.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tenant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.VarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.VarsTable,
			Columns: []string{message.VarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: msgvar.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.AppTable,
			Columns: []string{message.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: app.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.app_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

func (mc *MessageCreate) SetMessageFromStruct(input *Message) *MessageCreate {

	mc.SetTenantID(input.TenantID)

	mc.SetMessage(input.Message)

	if input.ShortMsg != nil {
		mc.SetShortMsg(*input.ShortMsg)
	}

	if input.Topic != nil {
		mc.SetTopic(*input.Topic)
	}

	mc.SetSeverity(input.Severity)

	mc.SetTimestamp(input.Timestamp)

	return mc
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	builders []*MessageCreate
}

// Save creates the Message entities in the database.
func (mcb *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Message, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
