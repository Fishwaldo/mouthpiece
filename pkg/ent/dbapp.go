/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/dbapp"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// DbApp is the model entity for the DbApp schema.
type DbApp struct {
	config `doc:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Application Name"`
	// Status holds the value of the "Status" field.
	Status interfaces.AppStatus `json:"Status,omitempty" doc:"Status of Application"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty" doc:"Description of Application"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty" doc:"Icon of Application"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty" doc:"URL of Application"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DbAppQuery when eager-loading is set.
	Edges DbAppEdges `json:"edges"`
}

// DbAppEdges holds the relations/edges for other nodes in the graph.
type DbAppEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*DbMessage `json:"messages,omitempty"`
	// Filters holds the value of the filters edge.
	Filters []*DbFilter `json:"filters,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*DbGroup `json:"groups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DbAppEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e DbAppEdges) MessagesOrErr() ([]*DbMessage, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// FiltersOrErr returns the Filters value or an error if the edge
// was not loaded in eager-loading.
func (e DbAppEdges) FiltersOrErr() ([]*DbFilter, error) {
	if e.loadedTypes[2] {
		return e.Filters, nil
	}
	return nil, &NotLoadedError{edge: "filters"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e DbAppEdges) GroupsOrErr() ([]*DbGroup, error) {
	if e.loadedTypes[3] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DbApp) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dbapp.FieldStatus:
			values[i] = new(interfaces.AppStatus)
		case dbapp.FieldID, dbapp.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case dbapp.FieldName, dbapp.FieldDescription, dbapp.FieldIcon, dbapp.FieldURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DbApp", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DbApp fields.
func (da *DbApp) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dbapp.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			da.ID = int(value.Int64)
		case dbapp.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				da.TenantID = int(value.Int64)
			}
		case dbapp.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				da.Name = value.String
			}
		case dbapp.FieldStatus:
			if value, ok := values[i].(*interfaces.AppStatus); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value != nil {
				da.Status = *value
			}
		case dbapp.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				da.Description = value.String
			}
		case dbapp.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				da.Icon = value.String
			}
		case dbapp.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				da.URL = value.String
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the DbApp entity.
func (da *DbApp) QueryTenant() *TenantQuery {
	return (&DbAppClient{config: da.config}).QueryTenant(da)
}

// QueryMessages queries the "messages" edge of the DbApp entity.
func (da *DbApp) QueryMessages() *DbMessageQuery {
	return (&DbAppClient{config: da.config}).QueryMessages(da)
}

// QueryFilters queries the "filters" edge of the DbApp entity.
func (da *DbApp) QueryFilters() *DbFilterQuery {
	return (&DbAppClient{config: da.config}).QueryFilters(da)
}

// QueryGroups queries the "groups" edge of the DbApp entity.
func (da *DbApp) QueryGroups() *DbGroupQuery {
	return (&DbAppClient{config: da.config}).QueryGroups(da)
}

// Update returns a builder for updating this DbApp.
// Note that you need to call DbApp.Unwrap() before calling this method if this DbApp
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DbApp) Update() *DbAppUpdateOne {
	return (&DbAppClient{config: da.config}).UpdateOne(da)
}

// Unwrap unwraps the DbApp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (da *DbApp) Unwrap() *DbApp {
	_tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DbApp is not a transactional entity")
	}
	da.config.driver = _tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DbApp) String() string {
	var builder strings.Builder
	builder.WriteString("DbApp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", da.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", da.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(da.Name)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(fmt.Sprintf("%v", da.Status))
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(da.Description)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(da.Icon)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(da.URL)
	builder.WriteByte(')')
	return builder.String()
}

func (da *DbApp) ValidateDbApp() error {
	if err := validate.Get().Struct(da); err != nil {
		return err
	}
	return nil
}

// DbApps is a parsable slice of DbApp.
type DbApps []*DbApp

func (da DbApps) config(cfg config) {
	for _i := range da {
		da[_i].config = cfg
	}
}
