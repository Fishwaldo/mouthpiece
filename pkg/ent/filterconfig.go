/*
	MIT License

	Copyright (c) 2021 Justin Hammond

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/filter"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/filterconfig"
	"github.com/Fishwaldo/mouthpiece/pkg/ent/tenant"
	"github.com/Fishwaldo/mouthpiece/pkg/validate"
)

// FilterConfig is the model entity for the FilterConfig schema.
type FilterConfig struct {
	config `doc:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty" doc:"Name of the Field"`
	// Value holds the value of the "Value" field.
	Value string `json:"Value,omitempty" doc:"Value of the Field"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FilterConfigQuery when eager-loading is set.
	Edges         FilterConfigEdges `json:"edges"`
	filter_config *int
}

// FilterConfigEdges holds the relations/edges for other nodes in the graph.
type FilterConfigEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Filter holds the value of the filter edge.
	Filter *Filter `json:"filter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FilterConfigEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// FilterOrErr returns the Filter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FilterConfigEdges) FilterOrErr() (*Filter, error) {
	if e.loadedTypes[1] {
		if e.Filter == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: filter.Label}
		}
		return e.Filter, nil
	}
	return nil, &NotLoadedError{edge: "filter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FilterConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filterconfig.FieldID, filterconfig.FieldTenantID:
			values[i] = new(sql.NullInt64)
		case filterconfig.FieldName, filterconfig.FieldValue:
			values[i] = new(sql.NullString)
		case filterconfig.ForeignKeys[0]: // filter_config
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FilterConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FilterConfig fields.
func (fc *FilterConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filterconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fc.ID = int(value.Int64)
		case filterconfig.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				fc.TenantID = int(value.Int64)
			}
		case filterconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				fc.Name = value.String
			}
		case filterconfig.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Value", values[i])
			} else if value.Valid {
				fc.Value = value.String
			}
		case filterconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field filter_config", value)
			} else if value.Valid {
				fc.filter_config = new(int)
				*fc.filter_config = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the FilterConfig entity.
func (fc *FilterConfig) QueryTenant() *TenantQuery {
	return (&FilterConfigClient{config: fc.config}).QueryTenant(fc)
}

// QueryFilter queries the "filter" edge of the FilterConfig entity.
func (fc *FilterConfig) QueryFilter() *FilterQuery {
	return (&FilterConfigClient{config: fc.config}).QueryFilter(fc)
}

// Update returns a builder for updating this FilterConfig.
// Note that you need to call FilterConfig.Unwrap() before calling this method if this FilterConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (fc *FilterConfig) Update() *FilterConfigUpdateOne {
	return (&FilterConfigClient{config: fc.config}).UpdateOne(fc)
}

// Unwrap unwraps the FilterConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fc *FilterConfig) Unwrap() *FilterConfig {
	_tx, ok := fc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FilterConfig is not a transactional entity")
	}
	fc.config.driver = _tx.drv
	return fc
}

// String implements the fmt.Stringer.
func (fc *FilterConfig) String() string {
	var builder strings.Builder
	builder.WriteString("FilterConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", fc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(fc.Name)
	builder.WriteString(", ")
	builder.WriteString("Value=")
	builder.WriteString(fc.Value)
	builder.WriteByte(')')
	return builder.String()
}

func (fc *FilterConfig) ValidateFilterConfig() error {
	if err := validate.Get().Struct(fc); err != nil {
		return err
	}
	return nil
}

// FilterConfigs is a parsable slice of FilterConfig.
type FilterConfigs []*FilterConfig

func (fc FilterConfigs) config(cfg config) {
	for _i := range fc {
		fc[_i].config = cfg
	}
}
