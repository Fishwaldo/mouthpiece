// Code generated by "enumer -type=FilterType -json -text -sql"; DO NOT EDIT.

package interfaces

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _FilterTypeName = "InvalidFilterAppFilterUserFilterTransportFilter"

var _FilterTypeIndex = [...]uint8{0, 13, 22, 32, 47}

const _FilterTypeLowerName = "invalidfilterappfilteruserfiltertransportfilter"

func (i FilterType) String() string {
	if i < 0 || i >= FilterType(len(_FilterTypeIndex)-1) {
		return fmt.Sprintf("FilterType(%d)", i)
	}
	return _FilterTypeName[_FilterTypeIndex[i]:_FilterTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FilterTypeNoOp() {
	var x [1]struct{}
	_ = x[InvalidFilter-(0)]
	_ = x[AppFilter-(1)]
	_ = x[UserFilter-(2)]
	_ = x[TransportFilter-(3)]
}

var _FilterTypeValues = []FilterType{InvalidFilter, AppFilter, UserFilter, TransportFilter}

var _FilterTypeNameToValueMap = map[string]FilterType{
	_FilterTypeName[0:13]:       InvalidFilter,
	_FilterTypeLowerName[0:13]:  InvalidFilter,
	_FilterTypeName[13:22]:      AppFilter,
	_FilterTypeLowerName[13:22]: AppFilter,
	_FilterTypeName[22:32]:      UserFilter,
	_FilterTypeLowerName[22:32]: UserFilter,
	_FilterTypeName[32:47]:      TransportFilter,
	_FilterTypeLowerName[32:47]: TransportFilter,
}

var _FilterTypeNames = []string{
	_FilterTypeName[0:13],
	_FilterTypeName[13:22],
	_FilterTypeName[22:32],
	_FilterTypeName[32:47],
}

// FilterTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FilterTypeString(s string) (FilterType, error) {
	if val, ok := _FilterTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FilterTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FilterType values", s)
}

// FilterTypeValues returns all values of the enum
func FilterTypeValues() []FilterType {
	return _FilterTypeValues
}

// FilterTypeStrings returns a slice of all String values of the enum
func FilterTypeStrings() []string {
	strs := make([]string, len(_FilterTypeNames))
	copy(strs, _FilterTypeNames)
	return strs
}

// IsAFilterType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FilterType) IsAFilterType() bool {
	for _, v := range _FilterTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FilterType
func (i FilterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FilterType
func (i *FilterType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FilterType should be a string, got %s", data)
	}

	var err error
	*i, err = FilterTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for FilterType
func (i FilterType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for FilterType
func (i *FilterType) UnmarshalText(text []byte) error {
	var err error
	*i, err = FilterTypeString(string(text))
	return err
}

func (i FilterType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *FilterType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of FilterType: %[1]T(%[1]v)", value)
	}

	val, err := FilterTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
