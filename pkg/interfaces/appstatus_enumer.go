// Code generated by "enumer -type=AppStatus -json -text -sql"; DO NOT EDIT.

package interfaces

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AppStatusName = "EnabledDisabled"

var _AppStatusIndex = [...]uint8{0, 7, 15}

const _AppStatusLowerName = "enableddisabled"

func (i AppStatus) String() string {
	if i < 0 || i >= AppStatus(len(_AppStatusIndex)-1) {
		return fmt.Sprintf("AppStatus(%d)", i)
	}
	return _AppStatusName[_AppStatusIndex[i]:_AppStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AppStatusNoOp() {
	var x [1]struct{}
	_ = x[Enabled-(0)]
	_ = x[Disabled-(1)]
}

var _AppStatusValues = []AppStatus{Enabled, Disabled}

var _AppStatusNameToValueMap = map[string]AppStatus{
	_AppStatusName[0:7]:       Enabled,
	_AppStatusLowerName[0:7]:  Enabled,
	_AppStatusName[7:15]:      Disabled,
	_AppStatusLowerName[7:15]: Disabled,
}

var _AppStatusNames = []string{
	_AppStatusName[0:7],
	_AppStatusName[7:15],
}

// AppStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AppStatusString(s string) (AppStatus, error) {
	if val, ok := _AppStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AppStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AppStatus values", s)
}

// AppStatusValues returns all values of the enum
func AppStatusValues() []AppStatus {
	return _AppStatusValues
}

// AppStatusStrings returns a slice of all String values of the enum
func AppStatusStrings() []string {
	strs := make([]string, len(_AppStatusNames))
	copy(strs, _AppStatusNames)
	return strs
}

// IsAAppStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AppStatus) IsAAppStatus() bool {
	for _, v := range _AppStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AppStatus
func (i AppStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AppStatus
func (i *AppStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AppStatus should be a string, got %s", data)
	}

	var err error
	*i, err = AppStatusString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AppStatus
func (i AppStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AppStatus
func (i *AppStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = AppStatusString(string(text))
	return err
}

func (i AppStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AppStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AppStatus: %[1]T(%[1]v)", value)
	}

	val, err := AppStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
