// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Fishwaldo/mouthpiece/pkg/interfaces (interfaces: GroupI)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
)

// MockGroupI is a mock of GroupI interface.
type MockGroupI struct {
	ctrl     *gomock.Controller
	recorder *MockGroupIMockRecorder
}

// MockGroupIMockRecorder is the mock recorder for MockGroupI.
type MockGroupIMockRecorder struct {
	mock *MockGroupI
}

// NewMockGroupI creates a new mock instance.
func NewMockGroupI(ctrl *gomock.Controller) *MockGroupI {
	mock := &MockGroupI{ctrl: ctrl}
	mock.recorder = &MockGroupIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupI) EXPECT() *MockGroupIMockRecorder {
	return m.recorder
}

// AddApp mocks base method.
func (m *MockGroupI) AddApp(arg0 context.Context, arg1 interfaces.AppI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddApp indicates an expected call of AddApp.
func (mr *MockGroupIMockRecorder) AddApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApp", reflect.TypeOf((*MockGroupI)(nil).AddApp), arg0, arg1)
}

// AddTransportRecipient mocks base method.
func (m *MockGroupI) AddTransportRecipient(arg0 context.Context, arg1 interfaces.TransportRecipient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransportRecipient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransportRecipient indicates an expected call of AddTransportRecipient.
func (mr *MockGroupIMockRecorder) AddTransportRecipient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransportRecipient", reflect.TypeOf((*MockGroupI)(nil).AddTransportRecipient), arg0, arg1)
}

// AddUser mocks base method.
func (m *MockGroupI) AddUser(arg0 context.Context, arg1 interfaces.UserI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockGroupIMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockGroupI)(nil).AddUser), arg0, arg1)
}

// DelApp mocks base method.
func (m *MockGroupI) DelApp(arg0 context.Context, arg1 interfaces.AppI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelApp indicates an expected call of DelApp.
func (mr *MockGroupIMockRecorder) DelApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelApp", reflect.TypeOf((*MockGroupI)(nil).DelApp), arg0, arg1)
}

// DelTransportRecipient mocks base method.
func (m *MockGroupI) DelTransportRecipient(arg0 context.Context, arg1 interfaces.TransportRecipient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelTransportRecipient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelTransportRecipient indicates an expected call of DelTransportRecipient.
func (mr *MockGroupIMockRecorder) DelTransportRecipient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelTransportRecipient", reflect.TypeOf((*MockGroupI)(nil).DelTransportRecipient), arg0, arg1)
}

// DelUser mocks base method.
func (m *MockGroupI) DelUser(arg0 context.Context, arg1 interfaces.UserI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUser indicates an expected call of DelUser.
func (mr *MockGroupIMockRecorder) DelUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUser", reflect.TypeOf((*MockGroupI)(nil).DelUser), arg0, arg1)
}

// GetApps mocks base method.
func (m *MockGroupI) GetApps(arg0 context.Context) []interfaces.AppI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", arg0)
	ret0, _ := ret[0].([]interfaces.AppI)
	return ret0
}

// GetApps indicates an expected call of GetApps.
func (mr *MockGroupIMockRecorder) GetApps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockGroupI)(nil).GetApps), arg0)
}

// GetDescription mocks base method.
func (m *MockGroupI) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockGroupIMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockGroupI)(nil).GetDescription))
}

// GetID mocks base method.
func (m *MockGroupI) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockGroupIMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockGroupI)(nil).GetID))
}

// GetName mocks base method.
func (m *MockGroupI) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockGroupIMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockGroupI)(nil).GetName))
}

// GetTransportRecipients mocks base method.
func (m *MockGroupI) GetTransportRecipients(arg0 context.Context) []interfaces.TransportRecipient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransportRecipients", arg0)
	ret0, _ := ret[0].([]interfaces.TransportRecipient)
	return ret0
}

// GetTransportRecipients indicates an expected call of GetTransportRecipients.
func (mr *MockGroupIMockRecorder) GetTransportRecipients(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransportRecipients", reflect.TypeOf((*MockGroupI)(nil).GetTransportRecipients), arg0)
}

// GetUsers mocks base method.
func (m *MockGroupI) GetUsers(arg0 context.Context) []interfaces.UserI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]interfaces.UserI)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGroupIMockRecorder) GetUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGroupI)(nil).GetUsers), arg0)
}

// Load mocks base method.
func (m *MockGroupI) Load(arg0 context.Context, arg1 logr.Logger, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockGroupIMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockGroupI)(nil).Load), arg0, arg1, arg2)
}

// ProcessMessage mocks base method.
func (m *MockGroupI) ProcessMessage(arg0 context.Context, arg1 interfaces.MessageI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockGroupIMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockGroupI)(nil).ProcessMessage), arg0, arg1)
}

// Save mocks base method.
func (m *MockGroupI) Save(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockGroupIMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGroupI)(nil).Save), arg0)
}

// SetDescription mocks base method.
func (m *MockGroupI) SetDescription(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDescription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockGroupIMockRecorder) SetDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockGroupI)(nil).SetDescription), arg0, arg1)
}

// SetName mocks base method.
func (m *MockGroupI) SetName(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockGroupIMockRecorder) SetName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockGroupI)(nil).SetName), arg0, arg1)
}
