// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Fishwaldo/mouthpiece/pkg/interfaces (interfaces: AppI)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
)

// MockAppI is a mock of AppI interface.
type MockAppI struct {
	ctrl     *gomock.Controller
	recorder *MockAppIMockRecorder
}

// MockAppIMockRecorder is the mock recorder for MockAppI.
type MockAppIMockRecorder struct {
	mock *MockAppI
}

// NewMockAppI creates a new mock instance.
func NewMockAppI(ctrl *gomock.Controller) *MockAppI {
	mock := &MockAppI{ctrl: ctrl}
	mock.recorder = &MockAppIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppI) EXPECT() *MockAppIMockRecorder {
	return m.recorder
}

// AddFilter mocks base method.
func (m *MockAppI) AddFilter(arg0 context.Context, arg1 interfaces.FilterI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilter indicates an expected call of AddFilter.
func (mr *MockAppIMockRecorder) AddFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilter", reflect.TypeOf((*MockAppI)(nil).AddFilter), arg0, arg1)
}

// DelFilter mocks base method.
func (m *MockAppI) DelFilter(arg0 context.Context, arg1 interfaces.FilterI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFilter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelFilter indicates an expected call of DelFilter.
func (mr *MockAppIMockRecorder) DelFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFilter", reflect.TypeOf((*MockAppI)(nil).DelFilter), arg0, arg1)
}

// GetAppData mocks base method.
func (m *MockAppI) GetAppData(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppData indicates an expected call of GetAppData.
func (mr *MockAppIMockRecorder) GetAppData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppData", reflect.TypeOf((*MockAppI)(nil).GetAppData), arg0, arg1, arg2)
}

// GetDescription mocks base method.
func (m *MockAppI) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockAppIMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockAppI)(nil).GetDescription))
}

// GetFilters mocks base method.
func (m *MockAppI) GetFilters(arg0 context.Context) ([]interfaces.FilterI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilters", arg0)
	ret0, _ := ret[0].([]interfaces.FilterI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilters indicates an expected call of GetFilters.
func (mr *MockAppIMockRecorder) GetFilters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilters", reflect.TypeOf((*MockAppI)(nil).GetFilters), arg0)
}

// GetID mocks base method.
func (m *MockAppI) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockAppIMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockAppI)(nil).GetID))
}

// GetIcon mocks base method.
func (m *MockAppI) GetIcon() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIcon")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIcon indicates an expected call of GetIcon.
func (mr *MockAppIMockRecorder) GetIcon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIcon", reflect.TypeOf((*MockAppI)(nil).GetIcon))
}

// GetName mocks base method.
func (m *MockAppI) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockAppIMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockAppI)(nil).GetName))
}

// GetStatus mocks base method.
func (m *MockAppI) GetStatus() interfaces.AppStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(interfaces.AppStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockAppIMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockAppI)(nil).GetStatus))
}

// GetURL mocks base method.
func (m *MockAppI) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockAppIMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockAppI)(nil).GetURL))
}

// Load mocks base method.
func (m *MockAppI) Load(arg0 context.Context, arg1 logr.Logger, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockAppIMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockAppI)(nil).Load), arg0, arg1, arg2)
}

// ProcessMessage mocks base method.
func (m *MockAppI) ProcessMessage(arg0 context.Context, arg1 interfaces.MessageI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockAppIMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockAppI)(nil).ProcessMessage), arg0, arg1)
}

// Save mocks base method.
func (m *MockAppI) Save(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAppIMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAppI)(nil).Save), arg0)
}

// SetAppData mocks base method.
func (m *MockAppI) SetAppData(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppData indicates an expected call of SetAppData.
func (mr *MockAppIMockRecorder) SetAppData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppData", reflect.TypeOf((*MockAppI)(nil).SetAppData), arg0, arg1, arg2)
}

// SetDescription mocks base method.
func (m *MockAppI) SetDescription(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDescription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockAppIMockRecorder) SetDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockAppI)(nil).SetDescription), arg0, arg1)
}

// SetIcon mocks base method.
func (m *MockAppI) SetIcon(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIcon", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIcon indicates an expected call of SetIcon.
func (mr *MockAppIMockRecorder) SetIcon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIcon", reflect.TypeOf((*MockAppI)(nil).SetIcon), arg0, arg1)
}

// SetName mocks base method.
func (m *MockAppI) SetName(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockAppIMockRecorder) SetName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockAppI)(nil).SetName), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockAppI) SetStatus(arg0 context.Context, arg1 interfaces.AppStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockAppIMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockAppI)(nil).SetStatus), arg0, arg1)
}

// SetURL mocks base method.
func (m *MockAppI) SetURL(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetURL indicates an expected call of SetURL.
func (mr *MockAppIMockRecorder) SetURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetURL", reflect.TypeOf((*MockAppI)(nil).SetURL), arg0, arg1)
}
