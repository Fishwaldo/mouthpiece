// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Fishwaldo/mouthpiece/pkg/interfaces (interfaces: TransportRecipient)

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/Fishwaldo/mouthpiece/pkg/interfaces"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
)

// MockTransportRecipient is a mock of TransportRecipient interface.
type MockTransportRecipient struct {
	ctrl     *gomock.Controller
	recorder *MockTransportRecipientMockRecorder
}

// MockTransportRecipientMockRecorder is the mock recorder for MockTransportRecipient.
type MockTransportRecipientMockRecorder struct {
	mock *MockTransportRecipient
}

// NewMockTransportRecipient creates a new mock instance.
func NewMockTransportRecipient(ctrl *gomock.Controller) *MockTransportRecipient {
	mock := &MockTransportRecipient{ctrl: ctrl}
	mock.recorder = &MockTransportRecipientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransportRecipient) EXPECT() *MockTransportRecipientMockRecorder {
	return m.recorder
}

// GetAppData mocks base method.
func (m *MockTransportRecipient) GetAppData(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAppData indicates an expected call of GetAppData.
func (mr *MockTransportRecipientMockRecorder) GetAppData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppData", reflect.TypeOf((*MockTransportRecipient)(nil).GetAppData), arg0, arg1, arg2)
}

// GetConfig mocks base method.
func (m *MockTransportRecipient) GetConfig() (interfaces.MarshableConfigI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(interfaces.MarshableConfigI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockTransportRecipientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockTransportRecipient)(nil).GetConfig))
}

// GetDescription mocks base method.
func (m *MockTransportRecipient) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockTransportRecipientMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockTransportRecipient)(nil).GetDescription))
}

// GetGroup mocks base method.
func (m *MockTransportRecipient) GetGroup(arg0 context.Context) (interfaces.GroupI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(interfaces.GroupI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockTransportRecipientMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockTransportRecipient)(nil).GetGroup), arg0)
}

// GetID mocks base method.
func (m *MockTransportRecipient) GetID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockTransportRecipientMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTransportRecipient)(nil).GetID))
}

// GetName mocks base method.
func (m *MockTransportRecipient) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockTransportRecipientMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTransportRecipient)(nil).GetName))
}

// GetRecipientType mocks base method.
func (m *MockTransportRecipient) GetRecipientType(arg0 context.Context) interfaces.TransportRecipientType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipientType", arg0)
	ret0, _ := ret[0].(interfaces.TransportRecipientType)
	return ret0
}

// GetRecipientType indicates an expected call of GetRecipientType.
func (mr *MockTransportRecipientMockRecorder) GetRecipientType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipientType", reflect.TypeOf((*MockTransportRecipient)(nil).GetRecipientType), arg0)
}

// GetUser mocks base method.
func (m *MockTransportRecipient) GetUser(arg0 context.Context) (interfaces.UserI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(interfaces.UserI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTransportRecipientMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTransportRecipient)(nil).GetUser), arg0)
}

// Load mocks base method.
func (m *MockTransportRecipient) Load(arg0 context.Context, arg1 logr.Logger, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockTransportRecipientMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTransportRecipient)(nil).Load), arg0, arg1, arg2)
}

// ProcessMessage mocks base method.
func (m *MockTransportRecipient) ProcessMessage(arg0 context.Context, arg1 interfaces.MessageI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockTransportRecipientMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockTransportRecipient)(nil).ProcessMessage), arg0, arg1)
}

// SetAppData mocks base method.
func (m *MockTransportRecipient) SetAppData(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAppData indicates an expected call of SetAppData.
func (mr *MockTransportRecipientMockRecorder) SetAppData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppData", reflect.TypeOf((*MockTransportRecipient)(nil).SetAppData), arg0, arg1, arg2)
}

// SetConfig mocks base method.
func (m *MockTransportRecipient) SetConfig(arg0 context.Context, arg1 interfaces.MarshableConfigI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockTransportRecipientMockRecorder) SetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockTransportRecipient)(nil).SetConfig), arg0, arg1)
}

// SetDescription mocks base method.
func (m *MockTransportRecipient) SetDescription(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDescription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDescription indicates an expected call of SetDescription.
func (mr *MockTransportRecipientMockRecorder) SetDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockTransportRecipient)(nil).SetDescription), arg0, arg1)
}

// SetGroup mocks base method.
func (m *MockTransportRecipient) SetGroup(arg0 context.Context, arg1 interfaces.GroupI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroup indicates an expected call of SetGroup.
func (mr *MockTransportRecipientMockRecorder) SetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroup", reflect.TypeOf((*MockTransportRecipient)(nil).SetGroup), arg0, arg1)
}

// SetName mocks base method.
func (m *MockTransportRecipient) SetName(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetName indicates an expected call of SetName.
func (mr *MockTransportRecipientMockRecorder) SetName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockTransportRecipient)(nil).SetName), arg0, arg1)
}

// SetUser mocks base method.
func (m *MockTransportRecipient) SetUser(arg0 context.Context, arg1 interfaces.UserI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUser indicates an expected call of SetUser.
func (mr *MockTransportRecipientMockRecorder) SetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockTransportRecipient)(nil).SetUser), arg0, arg1)
}
